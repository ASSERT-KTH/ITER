bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  w.write(entryName,  name);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  name);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  name);	  w.write(key,    name);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
2	[BUG]  [BUGGY]  w.write(value,  name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  name);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  name);	  w.write(key,    name);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
3	[BUG]  [BUGGY]  w.write(entryName,  key);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  key);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  key);	  w.write(key,    name);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
4	[BUG]  [BUGGY]  w.write(name,  key);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(name,  key);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(name,  key);	  w.write(key,    name);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
5	[BUG]  [BUGGY]  w.write(value  + ".n ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + ".n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + ".n ");	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
6	[BUG]  [BUGGY]  w.write(key  + ".js ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ".js ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ".js ");	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
7	[BUG]  [BUGGY]  w.write(key  + ".txt ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ".txt ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ".txt ");	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
8	[BUG]  [BUGGY]  w.write(value  + ".null ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + ".null ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + ".null ");	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
9	[BUG]  [BUGGY]  w.write(key,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  headers);	  w.write(entryName,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
10	[BUG]  [BUGGY]  w.write(headers,  entryName);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(headers,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(headers,  entryName);	  w.write(entryName,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
11	[BUG]  [BUGGY]  w.write(entryName,  headers,  buffer);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  headers,  buffer);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  headers,  buffer);	  w.write(entryName,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
12	[BUG]  [BUGGY]  w.write(entryName,  headers,  currName);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  headers,  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  headers,  currName);	  w.write(entryName,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
13	[BUG]  [BUGGY]  w.write(encoding,  headers);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(encoding,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(encoding,  headers);	  w.write(entryName,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
14	[BUG]  [BUGGY]  w.write(entryName,  currName);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  currName);	  w.write(entryName,    value);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
15	[BUG]  [BUGGY]  w.write(value,  entryName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  entryName);	  w.write(entryName,    value);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
16	[BUG]  [BUGGY]  w.write(entryName,  key,  value);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  key,  value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  key,  value);	  w.write(entryName,    value);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
17	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(line);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(line);	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
18	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
19	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  }	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(entryName);	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  else  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  else  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  else  writePaxHeadersForNonAsciiNames(pex);  }	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
22	[BUG]  [BUGGY]  w.write(value,  value  +  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  value  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  value  +  1);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
23	[BUG]  [BUGGY]  w.write(key,  value  +  2);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  +  2);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  +  2);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
24	[BUG]  [BUGGY]  w.write(entryName,  value  +  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  value  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  value  +  1);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
25	[BUG]  [BUGGY]  w.write(value,  key  +  1);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  key  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  key  +  1);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
26	[BUG]  [BUGGY]  w.write(data,  value  +  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  value  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  value  +  1);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
27	[BUG]  [BUGGY]  w.write(key,  value  +  1,  len);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  +  1,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  +  1,  len);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
28	[BUG]  [BUGGY]  w.write(line,  encoding);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(line,  encoding);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(line,  encoding);	  w.write(encoding,    line);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
29	[BUG]  [BUGGY]  w.write('/',  len);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('/',  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('/',  len);	  w.write('/');    	non-compiled	[CE]  <identifier>  expected	49	None	replace
30	[BUG]  [BUGGY]  w.write('/'  +  entryName);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('/'  +  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('/'  +  entryName);	  w.write('/');    	non-compiled	[CE]  <identifier>  expected	49	None	replace
31	[BUG]  [BUGGY]  w.write('/',  currName);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('/',  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('/',  currName);	  w.write('/');    	non-compiled	[CE]  <identifier>  expected	49	None	replace
32	[BUG]  [BUGGY]  w.write('/'  +  currName);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('/'  +  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('/'  +  currName);	  w.write('/');    	non-compiled	[CE]  <identifier>  expected	49	None	replace
33	[BUG]  [BUGGY]  w.write(line,  currName);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(line,  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(line,  currName);	  w.write(currName,    line);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
34	[BUG]  [BUGGY]  w.write(entryName,  currSize);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  currSize);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  currSize);	  w.write(currName,    line);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
35	[BUG]  [BUGGY]  w.write(entryName,  currBytes);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  currBytes);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  currBytes);	  w.write(currName,    line);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
36	[BUG]  [BUGGY]  w.write('n',  currName  +  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  currName  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  currName  +  1);	  w.write('n',    currName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
37	[BUG]  [BUGGY]  w.write('n',  currName  + "n ");  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  currName  + "n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  currName  + "n ");	  w.write('n',    currName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
38	[BUG]  [BUGGY]  w.write('n',  currName.length());  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  currName.length());  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  currName.length());	  w.write('n',    currName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
39	[BUG]  [BUGGY]  w.toString().getBytes(entryName);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.toString().getBytes(entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.toString().getBytes(entryName);	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
40	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
41	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
42	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
43	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  else  {  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  else  {  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  else  {  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
44	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  else  {  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  else  {  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  else  {  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
45	[BUG]  [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
46	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
47	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
48	[BUG]  [BUGGY]  if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
49	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i  +  1);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i  +  1);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i  +  1);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
50	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i).toLowerCase();  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i).toLowerCase();  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i).toLowerCase();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
51	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  new  String(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  new  String(currName.charAt(i));  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  new  String(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
52	[BUG]  [BUGGY]  w.write(value  + ": ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + ": ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + ": ");	  w.write(key    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
53	[BUG]  [BUGGY]  w.write(key  + ":n ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ":n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ":n ");	  w.write(key    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
54	[BUG]  [BUGGY]  w.write(entryName  + ": ");  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName  + ": ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName  + ": ");	  w.write(key    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
55	[BUG]  [BUGGY]  w.write(key  + ",  actualLength: ");  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ",  actualLength: ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ",  actualLength: ");	  w.write(key    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
56	[BUG]  [BUGGY]  w.write(key  + ",  value: ");  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ",  value: ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ",  value: ");	  w.write(key    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
57	[BUG]  [BUGGY]  w.write(key,  value  + ": ");  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  + ": ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  + ": ");	  w.write(key    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
58	[BUG]  [BUGGY]  w.write(key  + "nonAsciiNames ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "nonAsciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "nonAsciiNames ");	  w.write(value    +   "noAsciiNames   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
59	[BUG]  [BUGGY]  w.write(key  + "  noAsciiNames ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "  noAsciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "  noAsciiNames ");	  w.write(value    +   "noAsciiNames   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
60	[BUG]  [BUGGY]  w.write(key  + "NonAsciiNames ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "NonAsciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "NonAsciiNames ");	  w.write(value    +   "noAsciiNames   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
61	[BUG]  [BUGGY]  w.write(key  + "#AsciiNames ");  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "#AsciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "#AsciiNames ");	  w.write(value    +   "noAsciiNames   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
62	[BUG]  [BUGGY]  w.write(entryName,  encoding);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  encoding);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  encoding);	  w.write(key,    encoding);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
63	[BUG]  [BUGGY]  w.write(value,  encoding);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  encoding);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  encoding);	  w.write(key,    encoding);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
64	[BUG]  [BUGGY]  w.write(encoding,  key);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(encoding,  key);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(encoding,  key);	  w.write(key,    encoding);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
65	[BUG]  [BUGGY]  w.write(currName,  encoding);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(currName,  encoding);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(currName,  encoding);	  w.write(key,    encoding);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
66	[BUG]  [BUGGY]  w.write(line,  value);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(line,  value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(line,  value);	  w.write(value,    line);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
67	[BUG]  [BUGGY]  w.write(key,  offset  +  len);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  offset  +  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  offset  +  len);	  w.write(value,    line);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
68	[BUG]  [BUGGY]  w.write(data,  offset  +  len);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  offset  +  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  offset  +  len);	  w.write(data,    len);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
69	[BUG]  [BUGGY]  w.write(data,  len  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  len  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  len  +  1);	  w.write(data,    len);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
70	[BUG]  [BUGGY]  w.write(key  + ",  value= ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ",  value= ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ",  value= ");	  w.write(key    +   ",    valuen   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
71	[BUG]  [BUGGY]  w.write(key  + ",  value   ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ",  value   ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ",  value   ");	  w.write(key    +   ",    valuen   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
72	[BUG]  [BUGGY]  w.write(value  + ",  value ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + ",  value ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + ",  value ");	  w.write(key    +   ",    valuen   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
73	[BUG]  [BUGGY]  w.write(key  + "n ",  value);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "n ",  value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "n ",  value);	  w.write(key    +   ",    valuen   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
74	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(line,  headers);	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
75	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  headers);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(entryName,  headers);	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
76	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(len,  headers);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(len,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(len,  headers);	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
77	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(headers,  w);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(headers,  w);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(headers,  w);	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
78	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(w,  line);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(w,  line);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(w,  line);	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
79	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(w,  cache);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(w,  cache);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(w,  cache);	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
80	[BUG]  [BUGGY]  w.write(line,  entryName);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(line,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(line,  entryName);	  w.write(entryName,    line);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
81	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
82	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer,  len);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(wBuffer,  len);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
83	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer,  line);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer,  line);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(wBuffer,  line);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
84	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer,  assemLen);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer,  assemLen);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(wBuffer,  assemLen);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
85	[BUG]  [BUGGY]  w.write('n',  key);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  key);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  key);	  w.write(value,    key);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
86	[BUG]  [BUGGY]  w.write(key,  valueLength);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  valueLength);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  valueLength);	  w.write(value,    key);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
87	[BUG]  [BUGGY]  w.write(entryName,  buffer);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  buffer);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  buffer);	  w.write(buffer,    entryName);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
88	[BUG]  [BUGGY]  w.write(buffer,  entryName,  headers);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  entryName,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  entryName,  headers);	  w.write(buffer,    entryName);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
89	[BUG]  [BUGGY]  w.write(buffer,  key,  entryName);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  key,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  key,  entryName);	  w.write(buffer,    entryName);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
90	[BUG]  [BUGGY]  w.write(encoding,  entryName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(encoding,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(encoding,  entryName);	  w.write(buffer,    entryName);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
91	[BUG]  [BUGGY]  w.write(data,  entryName);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  entryName);	  w.write(buffer,    entryName);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
92	[BUG]  [BUGGY]  w.write(key  + "null ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "null ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "null ");	  w.write(entryName    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
93	[BUG]  [BUGGY]  w.write(entryName  + ".js ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName  + ".js ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName  + ".js ");	  w.write(entryName    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
94	[BUG]  [BUGGY]  w.write(entryName  + ".null ");  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName  + ".null ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName  + ".null ");	  w.write(entryName    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
95	[BUG]  [BUGGY]  w.write(key  + "no-asciiNames ");  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "no-asciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "no-asciiNames ");	  w.write(entryName    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
96	[BUG]  [BUGGY]  w.write(line,  data);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(line,  data);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(line,  data);	  w.write(data,    line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
97	[BUG]  [BUGGY]  w.write(data,  0,  line);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  0,  line);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  0,  line);	  w.write(data,    line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
98	[BUG]  [BUGGY]  w.write(data,  currName);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  currName);	  w.write(data,    line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
99	[BUG]  [BUGGY]  w.write('N',  len);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('N',  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('N',  len);	  w.write('N');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
100	[BUG]  [BUGGY]  w.write( ".s.IFJDCS ".getBytes());  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write( ".s.IFJDCS ".getBytes());  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write( ".s.IFJDCS ".getBytes());	  w.write('N');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
101	[BUG]  [BUGGY]  w.write( ".s.IFJDCS ".toString());  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write( ".s.IFJDCS ".toString());  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write( ".s.IFJDCS ".toString());	  w.write('N');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
102	[BUG]  [BUGGY]  w.write( ".s.IFJDCS ".charAt(len));  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write( ".s.IFJDCS ".charAt(len));  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write( ".s.IFJDCS ".charAt(len));	  w.write('N');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
103	[BUG]  [BUGGY]  w.write(value,  buf.length);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  buf.length);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  buf.length);	  w.write(key,    buf.length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
104	[BUG]  [BUGGY]  w.write(buf,  len);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buf,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buf,  len);	  w.write(key,    buf.length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
105	[BUG]  [BUGGY]  w.write(entryName,  buf.length);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  buf.length);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  buf.length);	  w.write(key,    buf.length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
106	[BUG]  [BUGGY]  w.write(key,  buf.length  +  1);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  buf.length  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  buf.length  +  1);	  w.write(key,    buf.length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
107	[BUG]  [BUGGY]  w.write(data,  0,  buf.length);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  0,  buf.length);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  0,  buf.length);	  w.write(key,    buf.length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
108	[BUG]  [BUGGY]  w.write(key,  buf.length  -  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  buf.length  -  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  buf.length  -  1);	  w.write(key,    buf.length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
109	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
110	[BUG]  [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
111	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
112	[BUG]  [BUGGY]  if(entryName.length()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(entryName.length()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(entryName.length()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
113	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
114	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
115	[BUG]  [BUGGY]  w.write(data,  0,  len  +  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  0,  len  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  0,  len  +  1);	  w.write(data,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
116	[BUG]  [BUGGY]  w.write(data,  0,  line.length);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  0,  line.length);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  0,  line.length);	  w.write(data,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
117	[BUG]  [BUGGY]  w.write(data,  0,  data.length);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  0,  data.length);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  0,  data.length);	  w.write(data,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
118	[BUG]  [BUGGY]  w.write(key,  0,  len);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  0,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  0,  len);	  w.write(data,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
119	[BUG]  [BUGGY]  w.write(data,  0,  len  +  2);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  0,  len  +  2);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  0,  len  +  2);	  w.write(data,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
120	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(len);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(len);	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
121	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  w);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  w);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(line,  w);	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
122	[BUG]  [BUGGY]  w.write(entryName  + ",  null ");  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName  + ",  null ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName  + ",  null ");	  w.write(entryName    +   "null   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
123	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
124	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
125	[BUG]  [BUGGY]  if(actualLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(actualLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(actualLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
126	[BUG]  [BUGGY]  if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
127	[BUG]  [BUGGY]  if(actualLength!=  currSize)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(actualLength!=  currSize)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(actualLength!=  currSize)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
128	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('N');  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('N');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('N');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
129	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
130	[BUG]  [BUGGY]  w.write(entryName,  len  +  1);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  len  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  len  +  1);	  w.write(entryName,    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
131	[BUG]  [BUGGY]  w.write(currName,  key);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(currName,  key);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(currName,  key);	  w.write(line,    key);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
132	[BUG]  [BUGGY]  w.write(key,  value  + ",  actualLengthn ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  + ",  actualLengthn ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  + ",  actualLengthn ");	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
133	[BUG]  [BUGGY]  w.write(key,  value  + ",  actualLength   ");  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  + ",  actualLength   ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  + ",  actualLength   ");	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
134	[BUG]  [BUGGY]  w.write(key,  value  + ",  actualLength= ");  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  + ",  actualLength= ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  + ",  actualLength= ");	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
135	[BUG]  [BUGGY]  w.write(value,  key  + "n   ");  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  key  + "n   ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  key  + "n   ");	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
136	[BUG]  [BUGGY]  w.write(entryName,  value  + "n   ");  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  value  + "n   ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  value  + "n   ");	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
137	[BUG]  [BUGGY]  w.write('n',  len  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  len  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  len  +  1);	  w.write('n',    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
138	[BUG]  [BUGGY]  w.write('n',  len  +  2);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  len  +  2);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  len  +  2);	  w.write('n',    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
139	[BUG]  [BUGGY]  w.write('n',  actualLength);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  actualLength);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  actualLength);	  w.write('n',    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
140	[BUG]  [BUGGY]  w.write('n',  line);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  line);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  line);	  w.write('n',    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
141	[BUG]  [BUGGY]  w.write('n',  len  *  2);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  len  *  2);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  len  *  2);	  w.write('n',    len);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
142	[BUG]  [BUGGY]  w.write(currName,  entryName);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(currName,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(currName,  entryName);	  w.write(key,    entryName);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
143	[BUG]  [BUGGY]  w.write(value,  currName);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  currName);	  w.write(key,    currName);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
144	[BUG]  [BUGGY]  w.write(encoding,  currName);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(encoding,  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(encoding,  currName);	  w.write(key,    currName);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
145	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
146	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
147	[BUG]  [BUGGY]  if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currentLength!=  len)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
148	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i  +  1);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i  +  1);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i  +  1);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
149	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  +=  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  +=  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  +=  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
150	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i  +  1);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i  +  1);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i  +  1);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
151	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
152	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
153	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
154	[BUG]  [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
155	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
156	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
157	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  addPaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  addPaxHeadersForNonAsciiNames  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  addPaxHeadersForNonAsciiNames	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
158	[BUG]  [BUGGY]  w.write(key  + "no   ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "no   ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "no   ");	  w.write(value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
159	[BUG]  [BUGGY]  w.write(buffer,  0,  len);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  0,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  0,  len);	  w.write(buffer,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
160	[BUG]  [BUGGY]  w.write(buffer,  len  +  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  len  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  len  +  1);	  w.write(buffer,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
161	[BUG]  [BUGGY]  w.write(buffer,  offset,  len);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  offset,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  offset,  len);	  w.write(buffer,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
162	[BUG]  [BUGGY]  w.write(value  + "= ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + "= ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + "= ");	  w.write(key    +   "=       ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
163	[BUG]  [BUGGY]  w.write(key  + "=n ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "=n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "=n ");	  w.write(key    +   "=       ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
164	[BUG]  [BUGGY]  w.write(entryName  + "= ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName  + "= ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName  + "= ");	  w.write(key    +   "=       ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
165	[BUG]  [BUGGY]  w.write(value  + "= "  +  key  + "n   ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + "= "  +  key  + "n   ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + "= "  +  key  + "n   ");	  w.write(key    +   "=   "    +    value    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
166	[BUG]  [BUGGY]  w.write(key  + "= "  +  value  + ",  actualLength= ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "= "  +  value  + ",  actualLength= ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "= "  +  value  + ",  actualLength= ");	  w.write(key    +   "=   "    +    value    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
167	[BUG]  [BUGGY]  w.write(key  + ",  value= "  +  value  + "n ");  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ",  value= "  +  value  + "n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ",  value= "  +  value  + "n ");	  w.write(key    +   "=   "    +    value    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
168	[BUG]  [BUGGY]  w.write(line,  len  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(line,  len  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(line,  len  +  1);	  w.write(line,    len);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
169	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(headers,  true);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(headers,  true);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(headers,  true);	  writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
170	[BUG]  [BUGGY]  w.write(value,  len  +  1);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  len  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  len  +  1);	  w.write(key,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
171	[BUG]  [BUGGY]  w.write(key,  actualLength  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  actualLength  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  actualLength  +  1);	  w.write(key,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
172	[BUG]  [BUGGY]  w.write(key,  entryName,  actualLength);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  entryName,  actualLength);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  entryName,  actualLength);	  w.write(entryName,    actualLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
173	[BUG]  [BUGGY]  w.write(key,  currentLength);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  currentLength);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  currentLength);	  w.write(value,    currentLength);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
174	[BUG]  [BUGGY]  w.write(entryName,  currentLength);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  currentLength);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  currentLength);	  w.write(value,    currentLength);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
175	[BUG]  [BUGGY]  w.write(key,  valueLen);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  valueLen);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  valueLen);	  w.write(value,    currentLength);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
176	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
177	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
178	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(0);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(0);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(0);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
179	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes();  }  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes();  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
180	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(1);  }  [CE]  <identifier>  expected  [FE]                                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(1);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(1);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
181	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i).toString();  }  [CE]  <identifier>  expected  [FE]                                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i).toString();  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i).toString();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
182	[BUG]  [BUGGY]  w.write(key  + ",  null ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ",  null ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ",  null ");	  w.write(value    +   "null   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
183	[BUG]  [BUGGY]  w.write(key  + ".null ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ".null ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ".null ");	  w.write(value    +   "null   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
184	[BUG]  [BUGGY]  w.write( ".s.IFJDCS ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write( ".s.IFJDCS ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write( ".s.IFJDCS ");	  w.write(   "n   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
185	[BUG]  [BUGGY]  w.write( "n ".getBytes());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write( "n ".getBytes());  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write( "n ".getBytes());	  w.write(   "n   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
186	[BUG]  [BUGGY]  w.write(key,  assemLen);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  assemLen);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  assemLen);	  w.write(value,    actualLength);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
187	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(wBuf,  len);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(wBuf,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(wBuf,  len);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
188	[BUG]  [BUGGY]  w.write(key,  length);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  length);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  length);	  w.write(value,    len);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
189	[BUG]  [BUGGY]  w.write(key,  new  String(actualLength));  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  new  String(actualLength));  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  new  String(actualLength));	  w.write(value,    actualLength);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
190	[BUG]  [BUGGY]  w.write(key  + "=n "  +  value  + "n ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "=n "  +  value  + "n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "=n "  +  value  + "n ");	  w.write(key    +   "=   "    +    value    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
191	[BUG]  [BUGGY]  w.write(encoding,  value);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(encoding,  value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(encoding,  value);	  w.write(entryName,    value);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
192	[BUG]  [BUGGY]  w.write(currName,  value);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(currName,  value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(currName,  value);	  w.write(entryName,    value);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
193	[BUG]  [BUGGY]  w.write(value  + ".: ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + ".: ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + ".: ");	  w.write(key    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	48	None	replace
194	[BUG]  [BUGGY]  w.write( ".s.IFJDCS ".charAt(len  -  1));  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write( ".s.IFJDCS ".charAt(len  -  1));  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write( ".s.IFJDCS ".charAt(len  -  1));	  w.write(   "n   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
195	[BUG]  [BUGGY]  w.write( "null ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write( "null ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write( "null ");	  w.write(   "n   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
196	[BUG]  [BUGGY]  w.write('/'  +  key  + "n ");  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('/'  +  key  + "n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('/'  +  key  + "n ");	  w.write('/');    	non-compiled	[CE]  <identifier>  expected	49	None	replace
197	[BUG]  [BUGGY]  w.write('/'  +  key);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('/'  +  key);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('/'  +  key);	  w.write('/');    	non-compiled	[CE]  <identifier>  expected	49	None	replace
198	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer,  headers);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(wBuffer,  headers);	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
199	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(pex,  headers,  w);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(pex,  headers,  w);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(pex,  headers,  w);	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
200	[BUG]  [BUGGY]  w.write(key  + ".nonAsciiNames ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ".nonAsciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ".nonAsciiNames ");	  w.write(value    +   "noAsciiNames   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
201	[BUG]  [BUGGY]  w.write(buffer,  entryName,  encoding);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  entryName,  encoding);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  entryName,  encoding);	  w.write(key,    encoding);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
202	[BUG]  [BUGGY]  w.write(key,  currName,  value);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  currName,  value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  currName,  value);	  w.write(key,    currName);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
203	[BUG]  [BUGGY]  w.write(key,  currName,  headers);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  currName,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  currName,  headers);	  w.write(key,    currName);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
204	[BUG]  [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
205	[BUG]  [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
206	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
207	[BUG]  [BUGGY]  w.write(value,  value  + "n ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  value  + "n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  value  + "n ");	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
208	[BUG]  [BUGGY]  w.write(key,  value  + ".n ");  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  + ".n ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  + ".n ");	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
209	[BUG]  [BUGGY]  w.write(key  + "no-data ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "no-data ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "no-data ");	  w.write(value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
210	[BUG]  [BUGGY]  w.write(value,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  headers);	  w.write(entryName,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
211	[BUG]  [BUGGY]  w.write(buffer,  0,  entryName);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  0,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  0,  entryName);	  w.write(buffer,    entryName);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
212	[BUG]  [BUGGY]  w.write(buffer,  0,  entryName.length);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  0,  entryName.length);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  0,  entryName.length);	  w.write(buffer,    entryName);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
213	[BUG]  [BUGGY]  w.write(key,  buffer);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  buffer);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  buffer);	  w.write(buffer,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
214	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
215	[BUG]  [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
216	[BUG]  [BUGGY]  if(currentLength!=  currSize)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currentLength!=  currSize)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currentLength!=  currSize)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
217	[BUG]  [BUGGY]  if(currentLength!=  currName)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currentLength!=  currName)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currentLength!=  currName)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
218	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
219	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  w);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  w);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(entryName,  w);	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
220	[BUG]  [BUGGY]  w.write(string,  line);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(string,  line);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(string,  line);	  w.write(encoding,    line);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
222	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
223	[BUG]  [BUGGY]  w.write(value  + ".noAsciiNames ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + ".noAsciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + ".noAsciiNames ");	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
224	[BUG]  [BUGGY]  w.write(value  + ".next ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + ".next ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + ".next ");	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
225	[BUG]  [BUGGY]  w.write('n',  value);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  value);	  w.write('n',    currName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
226	[BUG]  [BUGGY]  w.write(encoding,  name);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(encoding,  name);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(encoding,  name);	  w.write(key,    name);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
227	[BUG]  [BUGGY]  w.write(key  + "=   "  +  value);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "=   "  +  value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "=   "  +  value);	  w.write(key    +   "=       ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
228	[BUG]  [BUGGY]  w.write(key,  nameLength);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  nameLength);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  nameLength);	  w.write(entryName,    actualLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
229	[BUG]  [BUGGY]  w.write(key,  value  +  4);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  +  4);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  +  4);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
230	[BUG]  [BUGGY]  w.write(key,  value  *  1000  +  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  *  1000  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  *  1000  +  1);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
231	[BUG]  [BUGGY]  if(pex!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(pex!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(pex!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
232	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(headers);  w.toString().getBytes(entryName);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(headers);  w.toString().getBytes(entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(headers);  w.toString().getBytes(entryName);	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
233	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
234	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
235	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
236	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName.append('n');  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
237	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  len);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(line,  len);	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
238	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(ceil);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(ceil);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(ceil);	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
239	[BUG]  [BUGGY]  w.write(data,  offset);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(data,  offset);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(data,  offset);	  w.write(data,    len);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
240	[BUG]  [BUGGY]  w.write('N'  +  currName);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('N'  +  currName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('N'  +  currName);	  w.write('N');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
241	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
242	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
243	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
244	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.append('n');  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
245	[BUG]  [BUGGY]  w.write(value,  0,  len);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value,  0,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value,  0,  len);	  w.write(data,    0,    len);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
246	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(value);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(value);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(value);	  writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
247	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(w,  assemLen);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(w,  assemLen);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(w,  assemLen);	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
248	[BUG]  [BUGGY]  w.write(currName,  len);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(currName,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(currName,  len);	  w.write(entryName,    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
249	[BUG]  [BUGGY]  w.write(encoding,  len);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(encoding,  len);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(encoding,  len);	  w.write(entryName,    len);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
250	[BUG]  [BUGGY]  if(w.toString()!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(w.toString()!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(w.toString()!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
251	[BUG]  [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
252	[BUG]  [BUGGY]  if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
253	[BUG]  [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(pex);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }	  writePaxHeadersForNonAsciiNames(pex);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
254	[BUG]  [BUGGY]  w.write(key  + ".next ");  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ".next ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ".next ");	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
255	[BUG]  [BUGGY]  w.write(key  + "n ".length());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "n ".length());  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "n ".length());	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
256	[BUG]  [BUGGY]  w.write(value  + ".no ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(value  + ".no ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(value  + ".no ");	  w.write(key    +   ".n   ");    	non-compiled	[CE]  <identifier>  expected	46	None	replace
257	[BUG]  [BUGGY]  w.write('/').return;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('/').return;  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('/').return;	  w.write('/');    	non-compiled	[CE]  <identifier>  expected	49	None	replace
258	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(w,  entryName);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(w,  entryName);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(w,  entryName);	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
259	[BUG]  [BUGGY]  w.write(key,  endLength);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  endLength);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  endLength);	  w.write(entryName,    actualLength);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
260	[BUG]  [BUGGY]  w.write(key  + "nasciiNames ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "nasciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "nasciiNames ");	  w.write(entryName    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
261	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(ceil,  headers);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(ceil,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(ceil,  headers);	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
262	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(headers,  encoding);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(headers,  encoding);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(headers,  encoding);	  writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
263	[BUG]  [BUGGY]  w.write(key,  nextLength);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  nextLength);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  nextLength);	  w.write(value,    currentLength);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
264	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.getBytes(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
265	[BUG]  [BUGGY]  if(currName!=  null)  {  currName  =  currName.getBytes(i);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  currName  =  currName.getBytes(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  currName  =  currName.getBytes(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.getBytes(i);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
266	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
267	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(0);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(0);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  currName  =  currName.charAt(0);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
268	[BUG]  [BUGGY]  if(currName!=  null)  {  currName  =  currName.substring(0,  currName.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  currName  =  currName.substring(0,  currName.length()  -  1);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  currName  =  currName.substring(0,  currName.length()  -  1);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
269	[BUG]  [BUGGY]  w.write(key,  new  StringReader(len));  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  new  StringReader(len));  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  new  StringReader(len));	  w.write(value,    len);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
270	[BUG]  [BUGGY]  w.write(key,  line  +  1);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  line  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  line  +  1);	  w.write(key,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
271	[BUG]  [BUGGY]  w.write(key,  len  +  2);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  len  +  2);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  len  +  2);	  w.write(key,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
272	[BUG]  [BUGGY]  w.write(key,  offset  +  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  offset  +  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  offset  +  1);	  w.write(key,    len    +    1);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
273	[BUG]  [BUGGY]  w.write(entryName,  headers,  encoding);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  headers,  encoding);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  headers,  encoding);	  w.write(entryName,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
274	[BUG]  [BUGGY]  w.write(key,  value  *  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  *  1);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  *  1);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
275	[BUG]  [BUGGY]  w.write(key,  value  *  1000);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  *  1000);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  *  1000);	  w.write(key,    value    +    1);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
276	[BUG]  [BUGGY]  w.write(encoding,  line,  headers);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(encoding,  line,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(encoding,  line,  headers);	  w.write(encoding,    line);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
277	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
278	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
279	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(0);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(0);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  currName  =  currName.charAt(0);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    currName    =    currName.charAt(i);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
280	[BUG]  [BUGGY]  w.write(entryName,  line,  headers);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(entryName,  line,  headers);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(entryName,  line,  headers);	  w.write(entryName,    line);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
281	[BUG]  [BUGGY]  w.write(key,  value  +  line.getBytes(CharsetNames.UTF_8));  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  +  line.getBytes(CharsetNames.UTF_8));  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  +  line.getBytes(CharsetNames.UTF_8));	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
282	[BUG]  [BUGGY]  w.write(key,  value  +  line.getBytes(CharacterNames.UTF_8));  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  +  line.getBytes(CharacterNames.UTF_8));  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  +  line.getBytes(CharacterNames.UTF_8));	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
283	[BUG]  [BUGGY]  w.write(key,  value  +  line.length());  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  value  +  line.length());  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  value  +  line.length());	  w.write(key,    value    +   "n       ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
284	[BUG]  [BUGGY]  w.write(key  + ".noAsciiNames ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + ".noAsciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + ".noAsciiNames ");	  w.write(value    +   "noAsciiNames   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
285	[BUG]  [BUGGY]  w.write(key  + "#asciiNames ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key  + "#asciiNames ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key  + "#asciiNames ");	  w.write(value    +   "noAsciiNames   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
286	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
287	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
288	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
289	[BUG]  [BUGGY]  if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
290	[BUG]  [BUGGY]  if(writePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(writePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(writePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
291	[BUG]  [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }	  writePaxHeadersForNonAsciiNames(entryName);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
292	[BUG]  [BUGGY]  w.write(key,  file);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(key,  file);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(key,  file);	  w.write(value,    line);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
293	[BUG]  [BUGGY]  w.write(buffer,  line);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write(buffer,  line);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write(buffer,  line);	  w.write(buffer,    len);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
294	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(wBuf,  line);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  writePaxHeadersForNonAsciiNames(wBuf,  line);  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	writePaxHeadersForNonAsciiNames(wBuf,  line);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
295	[BUG]  [BUGGY]  if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(w.toString().contains(entryName))  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
296	[BUG]  [BUGGY]  if(w.toString().equals(entryName))  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(w.toString().equals(entryName))  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(w.toString().equals(entryName))  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
297	[BUG]  [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  headers);  w.toString().getBytes(entryName);  }  else  {  buffer.append('n');  }	  writePaxHeadersForNonAsciiNames(entryName,    headers);    w.toString().getBytes(entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
298	[BUG]  [BUGGY]  w.write('n',  currName  + "' ");  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }      [BUGGY]  w.write('n',  currName  + "' ");  [BUGGY]      }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	w.write('n',  currName  + "' ");	  w.write('n',    currName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
