bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  len  =  actualLength  +  1;  [CE]  <identifier>  expected  [FE]    IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  actualLength  +  1;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  +  1;	len  =  actualLength;  	non-compiled	[CE]  <identifier>  expected	13	None	replace
2	[BUG]  [BUGGY]  len  =  actualLength  -  1;  [CE]  <identifier>  expected  [FE]      IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  actualLength  -  1;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  -  1;	len  =  actualLength;  	non-compiled	[CE]  <identifier>  expected	13	None	replace
3	[BUG]  [BUGGY]  len  -=  actualLength;  [CE]  <identifier>  expected  [FE]        IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  -=  actualLength;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength;	len  =  actualLength;  	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  len  =  LONGFILE_TRUNCATE;  [CE]  <identifier>  expected  [FE]          IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  LONGFILE_TRUNCATE;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_TRUNCATE;	len  =  actualLength;  	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  len  =  assemLen;  [CE]  <identifier>  expected  [FE]            IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  assemLen;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemLen;	len  =  actualLength;  	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  len  =  0;  [CE]  <identifier>  expected  [FE]              IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  0;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  0;	len  =  actualLength;  	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  len  =  len;  [CE]  <identifier>  expected  [FE]                IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  len;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  len;	len  =  actualLength;  	non-compiled	[CE]  <identifier>  expected	13	None	replace
8	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                  IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]    [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	  	len  =  actualLength;  	non-compiled	[CE]  <identifier>  expected	13	None	replace
9	[BUG]  [BUGGY]  len  =  actualLength  +  2;  [CE]  illegal  start  of  type  [FE]    IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  actualLength  +  2;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  +  2;	len  =  actualLength;  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  len  =  line.length();  [CE]  illegal  start  of  type  [FE]    IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  line.length();  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.length();	len  =  actualLength;  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  len  =  aLen;  [CE]  illegal  start  of  type  [FE]      IOException  [CONTEXT]  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {        [BUGGY]  len  =  aLen;  [BUGGY]  line  =  len  +   "   "  +  key  +   "= "  +  value  +   "\n ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  aLen;	len  =  actualLength;  	non-compiled	[CE]  illegal  start  of  type	13	None	replace
