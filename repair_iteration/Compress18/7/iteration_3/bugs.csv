bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  len  =  actualLength  /  3;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  3;	  len    =    actualLength    +    3;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
2	[BUG]  [BUGGY]  len  =  actualLength  -  3;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  -  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  -  3;	  len    =    actualLength    +    3;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
3	[BUG]  [BUGGY]  len  =  currName.length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName.length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName.length;	  len    =    currName;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
4	[BUG]  [BUGGY]  len  =  currName  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName  +  1;	  len    =    currName;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
5	[BUG]  [BUGGY]  len  =  currLength;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currLength;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currLength;	  len    =    currName;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
6	[BUG]  [BUGGY]  len  -=  currName;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  currName;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  currName;	  len    =    currName;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
7	[BUG]  [BUGGY]  Len  =  assemLen  +  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  assemLen  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  assemLen  +  1;	  len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
8	[BUG]  [BUGGY]  len  =  aLen  +  2;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  aLen  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  aLen  +  2;	  len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
9	[BUG]  [BUGGY]  len  -=  aLen  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  aLen  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  aLen  +  1;	  len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
10	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  String    key    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
11	[BUG]  [BUGGY]  String  key  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  String    key    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
12	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  String    key    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
13	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  String    key    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
14	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8).length  +  4;	  String    key    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
15	[BUG]  [BUGGY]  int  len  =  line.toString().getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.toString().getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.toString().getBytes(CharsetNames.UTF_8);	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
16	[BUG]  [BUGGY]  int  len  =  w.toString().getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().getBytes(CharsetNames.UTF_8)+  1;	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
17	[BUG]  [BUGGY]  byte  len  =  w.toString().getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  byte  len  =  w.toString().getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	byte  len  =  w.toString().getBytes(CharsetNames.UTF_8);	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
18	[BUG]  [BUGGY]  char  len  =  w.toString().getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  char  len  =  w.toString().getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	char  len  =  w.toString().getBytes(CharsetNames.UTF_8);	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
19	[BUG]  [BUGGY]  Integer  len  =  w.toString().getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Integer  len  =  w.toString().getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Integer  len  =  w.toString().getBytes(CharsetNames.UTF_8);	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
20	[BUG]  [BUGGY]  lan  =  line.length();  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  lan  =  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	lan  =  line.length();	  len    =    line.length()    +    4;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
21	[BUG]  [BUGGY]  LEn  =  line.length();  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  LEn  =  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	LEn  =  line.length();	  len    =    line.length()    +    4;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
22	[BUG]  [BUGGY]  len  =  actualLength  /  4;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  4;	  len    =    actualLength    +    4;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
23	[BUG]  [BUGGY]  Len  -=  actualLength  +  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  actualLength  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  actualLength  +  2;	  Len    -=    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
24	[BUG]  [BUGGY]  Len  -=  actualLength  +  4;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  actualLength  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  actualLength  +  4;	  Len    -=    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
25	[BUG]  [BUGGY]  Len  -=  actualLength  +  3;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  actualLength  +  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  actualLength  +  3;	  Len    -=    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
26	[BUG]  [BUGGY]  Len  -=  actualLength  *  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  actualLength  *  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  actualLength  *  1;	  Len    -=    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
27	[BUG]  [BUGGY]  Len  -=  actualLength  +  5;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  actualLength  +  5;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  actualLength  +  5;	  Len    -=    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
28	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
29	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8)+  1;	  int    len    =    line.getBytes(CharacterNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
30	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8)-  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8)-  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8)-  1;	  int    len    =    line.getBytes(CharacterNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
31	[BUG]  [BUGGY]  int  len  =  w.getBytes(CharacterNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.getBytes(CharacterNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.getBytes(CharacterNames.UTF_8);	  int    len    =    line.getBytes(CharacterNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
32	[BUG]  [BUGGY]  byte  len  =  line.getBytes(CharacterNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  byte  len  =  line.getBytes(CharacterNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	byte  len  =  line.getBytes(CharacterNames.UTF_8);	  int    len    =    line.getBytes(CharacterNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
33	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8)+  2;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8)+  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8)+  2;	  int    len    =    line.getBytes(CharacterNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
34	[BUG]  [BUGGY]  len  =  actualLength  *  aLen;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  aLen;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  aLen;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
35	[BUG]  [BUGGY]  Len  =  actualLength  *  aLen;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  *  aLen;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  *  aLen;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
36	[BUG]  [BUGGY]  len  -=  actualLength  *  aLen;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  actualLength  *  aLen;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength  *  aLen;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
37	[BUG]  [BUGGY]  len  =  assemLen  *  actualLength;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemLen  *  actualLength;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemLen  *  actualLength;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
38	[BUG]  [BUGGY]  Len  -=  actualLength  *  aLen;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  actualLength  *  aLen;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  actualLength  *  aLen;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
39	[BUG]  [BUGGY]  len  =  len  *  actualLength;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  len  *  actualLength;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  len  *  actualLength;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
40	[BUG]  [BUGGY]  len  =  LONGFILE_TRUNCATE  +  1L;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_TRUNCATE  +  1L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_TRUNCATE  +  1L;	  len    =    LONGFILE_TRUNCATE    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
41	[BUG]  [BUGGY]  len  =  LONGFILE_TRUNCATE  +  2;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_TRUNCATE  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_TRUNCATE  +  2;	  len    =    LONGFILE_TRUNCATE    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
42	[BUG]  [BUGGY]  len  =  LONGFILE_GNU  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_GNU  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_GNU  +  1;	  len    =    LONGFILE_TRUNCATE    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
43	[BUG]  [BUGGY]  len  =  LONGFILE_TRUNCATE  +  4;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_TRUNCATE  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_TRUNCATE  +  4;	  len    =    LONGFILE_TRUNCATE    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
44	[BUG]  [BUGGY]  len  =  LONGFILE_TRUNCATE  +  0;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_TRUNCATE  +  0;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_TRUNCATE  +  0;	  len    =    LONGFILE_TRUNCATE    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
45	[BUG]  [BUGGY]  Len  =  line.length()  +  2;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.length()  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.length()  +  2;	  Len    =    line.length();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
46	[BUG]  [BUGGY]  Len  =  line.length()  -  2;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.length()  -  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.length()  -  2;	  Len    =    line.length();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
47	[BUG]  [BUGGY]  Len  =  w.length();  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  w.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  w.length();	  Len    =    line.length();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
48	[BUG]  [BUGGY]  Len  =  currName.length();  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  currName.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  currName.length();	  Len    =    line.length();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
49	[BUG]  [BUGGY]  len  -=  actualLength  +  3;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  actualLength  +  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength  +  3;	  len    -=    actualLength    +    4;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
50	[BUG]  [BUGGY]  len  -=  actualLength  *  4;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  actualLength  *  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength  *  4;	  len    -=    actualLength    +    4;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
51	[BUG]  [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  len  -=  actualLength;  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
52	[BUG]  [BUGGY]  LONGFILE_GNU  >  0)  {  len  -=  actualLength;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  LONGFILE_GNU  >  0)  {  len  -=  actualLength;  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	LONGFILE_GNU  >  0)  {  len  -=  actualLength;  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
53	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  LONGFILE_GNU;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  LONGFILE_GNU;  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  LONGFILE_GNU;  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
54	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  1;  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
55	[BUG]  [BUGGY]  len  =  assemLen  +  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemLen  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemLen  +  2;	  len    =    assemLen    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
56	[BUG]  [BUGGY]  len  -=  assemLen  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  assemLen  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  assemLen  +  1;	  len    =    assemLen    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
57	[BUG]  [BUGGY]  len  =  assemLen  +  4;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemLen  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemLen  +  4;	  len    =    assemLen    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
58	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  actualLength);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  actualLength);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  actualLength);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
59	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  MAX_VALUE);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  MAX_VALUE);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  MAX_VALUE);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
60	[BUG]  [BUGGY]  int  len  =  w.toString().indexOf('.',  actualLength);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().indexOf('.',  actualLength);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().indexOf('.',  actualLength);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
61	[BUG]  [BUGGY]  int  len  =  line.toString().lastIndexOf('.');  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.toString().lastIndexOf('.');  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.toString().lastIndexOf('.');	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
62	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  LONGFILE_GNU);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  LONGFILE_GNU);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
63	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  MAX_LENGTH);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  MAX_LENGTH);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  MAX_LENGTH);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
64	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  currentLength);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  currentLength);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  currentLength);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
65	[BUG]  [BUGGY]  Len  =  len;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  len;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  len;	  Len    =    actualLength;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
66	[BUG]  [BUGGY]  Len  =  assemLen;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  assemLen;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  assemLen;	  Len    =    actualLength;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
67	[BUG]  [BUGGY]  Len  =  actualLength  +  line.length();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  +  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  +  line.length();	  Len    =    actualLength;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
68	[BUG]  [BUGGY]  Len  =  actualLength  +  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  +  2;	  Len    =    actualLength;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
69	[BUG]  [BUGGY]  Len  -=  LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  LONGFILE_GNU;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  LONGFILE_GNU;	  len    -=    LONGFILE_TRUNCATE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
70	[BUG]  [BUGGY]  Len  -=  LONGFILE_TRUNCATE  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  LONGFILE_TRUNCATE  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  LONGFILE_TRUNCATE  +  1;	  len    -=    LONGFILE_TRUNCATE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
71	[BUG]  [BUGGY]  Len  -=  len;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  len;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  len;	  len    -=    LONGFILE_TRUNCATE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
72	[BUG]  [BUGGY]  Len  =  0;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  0;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  0;	  len    =    0L;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  len  -=  0L;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  0L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  0L;	  len    =    0L;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  Len  =  0L;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  0L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  0L;	  len    =    0L;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
75	[BUG]  [BUGGY]  len  =  currName.length()  +  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName.length()  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName.length()  +  1;	  len    =    currName.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  len  =  currName.length()  -  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName.length()  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName.length()  -  1;	  len    =    currName.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
77	[BUG]  [BUGGY]  len  =  currName.length()  +  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName.length()  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName.length()  +  2;	  len    =    currName.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
78	[BUG]  [BUGGY]  Len  =  currName.length()  +  1;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  currName.length()  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  currName.length()  +  1;	  len    =    currName.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
79	[BUG]  [BUGGY]  len  =  currName.length()  -  2;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName.length()  -  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName.length()  -  2;	  len    =    currName.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
80	[BUG]  [BUGGY]  len  =  assemBuf.length  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemBuf.length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemBuf.length  +  1;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
81	[BUG]  [BUGGY]  len  =  assemBuf.length  -  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemBuf.length  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemBuf.length  -  1;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
82	[BUG]  [BUGGY]  len  -=  assemBuf.length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  assemBuf.length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  assemBuf.length;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
83	[BUG]  [BUGGY]  len  =  assemBuf.length  +  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemBuf.length  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemBuf.length  +  2;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
84	[BUG]  [BUGGY]  Len  =  assemBuf.length  +  1;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  assemBuf.length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  assemBuf.length  +  1;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
85	[BUG]  [BUGGY]  len  -=  line.length();  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  line.length();	  len    =    line.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
86	[BUG]  [BUGGY]  len  =  line.length()  /  1;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.length()  /  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.length()  /  1;	  len    =    line.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
87	[BUG]  [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line,  true);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
88	[BUG]  [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
89	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
90	[BUG]  [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line,  false);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line,  false);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line,  false);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
91	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(line,  true);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  WritePaxHeadersForNonAsciiNames(line,  true);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	WritePaxHeadersForNonAsciiNames(line,  true);	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
92	[BUG]  [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
93	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len  +  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len  +  1);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len  +  1);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
94	[BUG]  [BUGGY]  Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
95	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line,  actualLength);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line,  actualLength);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line,  actualLength);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
96	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8)+  1;	  int    len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
97	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8)-  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8)-  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8)-  1;	  int    len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
98	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8)+  2;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8)+  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8)+  2;	  int    len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
99	[BUG]  [BUGGY]  char  len  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  char  len  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	char  len  =  line.getBytes(CharsetNames.UTF_8);	  int    len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
100	[BUG]  [BUGGY]  len  =  line.length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.length;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
101	[BUG]  [BUGGY]  len  =  LONGFILE_GNU.length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_GNU.length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_GNU.length  +  1;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
102	[BUG]  [BUGGY]  len  =  LONGFILE_GNU.length  -  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_GNU.length  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_GNU.length  -  1;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
103	[BUG]  [BUGGY]  len  -=  LONGFILE_GNU.length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  LONGFILE_GNU.length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  LONGFILE_GNU.length;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
104	[BUG]  [BUGGY]  Len  =  LONGFILE_GNU.length  +  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  LONGFILE_GNU.length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  LONGFILE_GNU.length  +  1;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
105	[BUG]  [BUGGY]  len  =  LONGFILE_GNU.length  +  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_GNU.length  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_GNU.length  +  2;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
106	[BUG]  [BUGGY]  len  =  LONGFILE_GNU.length  -  2;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_GNU.length  -  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_GNU.length  -  2;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
107	[BUG]  [BUGGY]  len  -=  actualLength  *  2;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  actualLength  *  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength  *  2;	  len    -=    actualLength    +    2;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
108	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
109	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
110	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
111	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
112	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  2;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  2;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
113	[BUG]  [BUGGY]  int  len  =  line.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.toString().getBytes(CharsetNames.UTF_8).length;	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
114	[BUG]  [BUGGY]  int  len  =  w.toString().getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().getBytes(CharsetNames.UTF_8).length  +  1;	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
115	[BUG]  [BUGGY]  byte  len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  byte  len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	byte  len  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
116	[BUG]  [BUGGY]  char  len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  char  len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	char  len  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
117	[BUG]  [BUGGY]  Integer  len  =  line.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Integer  len  =  line.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Integer  len  =  line.toString().getBytes(CharsetNames.UTF_8).length;	  int    len    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
118	[BUG]  [BUGGY]  w.write(key);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(key);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(key);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
119	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  actualLength);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  actualLength);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  actualLength);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
120	[BUG]  [BUGGY]  Integer  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Integer  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Integer  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
121	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key  + "n ");  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key  + "n ");  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key  + "n ");	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
122	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
123	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  true);  [CE]  <identifier>  expected  [FE]                                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  true);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  true);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
124	[BUG]  [BUGGY]  len  =  actualLength  /  6;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  6;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  6;	  len    =    actualLength    +    6;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
125	[BUG]  [BUGGY]  len  =  LONGFILE_GNU  +  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_GNU  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_GNU  +  2;	  len    =    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
126	[BUG]  [BUGGY]  len  -=  4;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  4;	  len    -=    0;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
127	[BUG]  [BUGGY]  len  -=  8;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  8;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  8;	  len    -=    0;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
128	[BUG]  [BUGGY]  len  -=  10;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  10;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  10;	  len    -=    0;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
129	[BUG]  [BUGGY]  len  -=  3;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  3;	  len    -=    0;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
130	[BUG]  [BUGGY]  if(actualLength  >  LONGFILE_GNU)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  LONGFILE_GNU)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  LONGFILE_GNU)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  len    -=    len;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
131	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }	  len    -=    len;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
132	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  len    -=    len;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
133	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  len    -=    len;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
134	[BUG]  [BUGGY]  if(actualLength  >  LONGFILE_GNU)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  LONGFILE_GNU)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  LONGFILE_GNU)  {  len  -=  len;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  len    -=    len;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
135	[BUG]  [BUGGY]  len  =  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  2;	  len    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
136	[BUG]  [BUGGY]  Len  -=  LONGFILE_TRUNCATE;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  LONGFILE_TRUNCATE;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  LONGFILE_TRUNCATE;	  Len    -=    actualLength;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
137	[BUG]  [BUGGY]  len  =  numToWrite  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  numToWrite  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  numToWrite  +  1;	  len    =    numToWrite;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
138	[BUG]  [BUGGY]  len  -=  numToWrite;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  numToWrite;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  numToWrite;	  len    =    numToWrite;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
139	[BUG]  [BUGGY]  len  =  num;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  num;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  num;	  len    =    numToWrite;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
140	[BUG]  [BUGGY]  len  =  numToWrite  +  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  numToWrite  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  numToWrite  +  2;	  len    =    numToWrite;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
141	[BUG]  [BUGGY]  len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8).length;	  len    =    actualLength    *    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
142	[BUG]  [BUGGY]  len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8);	  len    =    actualLength    *    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
143	[BUG]  [BUGGY]  len  =  actualLength  *  2  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  2  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  2  +  1;	  len    =    actualLength    *    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
144	[BUG]  [BUGGY]  Len  =  actualLength  /  2  +  1;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  /  2  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  /  2  +  1;	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
145	[BUG]  [BUGGY]  Len  =  actualLength  /  2  +  line.length();  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  /  2  +  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  /  2  +  line.length();	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
146	[BUG]  [BUGGY]  Len  =  actualLength  /  2  *  LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  /  2  *  LONGFILE_GNU;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  /  2  *  LONGFILE_GNU;	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
147	[BUG]  [BUGGY]  Len  =  actualLength  -  2;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  -  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  -  2;	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
148	[BUG]  [BUGGY]  Len  =  actualLength  /  4;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  /  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  /  4;	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
149	[BUG]  [BUGGY]  len  -=  LONGFILE_GNU  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  LONGFILE_GNU  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  LONGFILE_GNU  +  1;	  len    -=    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
150	[BUG]  [BUGGY]  Len  -=  LONGFILE_GNU  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  LONGFILE_GNU  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  LONGFILE_GNU  +  1;	  len    -=    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
151	[BUG]  [BUGGY]  len  -=  LONGFILE_GNU  *  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  LONGFILE_GNU  *  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  LONGFILE_GNU  *  2;	  len    -=    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
152	[BUG]  [BUGGY]  len  -=  LONGFILE_GNU  +  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  LONGFILE_GNU  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  LONGFILE_GNU  +  2;	  len    -=    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
153	[BUG]  [BUGGY]  Len  -=  aLen  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  aLen  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  aLen  +  1;	  Len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
154	[BUG]  [BUGGY]  Len  =  len  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  len  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  len  +  1;	  Len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
155	[BUG]  [BUGGY]  Len  =  aLen  +  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  aLen  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  aLen  +  2;	  Len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
156	[BUG]  [BUGGY]  Len  =  currentLength  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  currentLength  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  currentLength  +  1;	  Len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
157	[BUG]  [BUGGY]  Len  -=  line.length();  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  line.length();	  Len    =    line.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
158	[BUG]  [BUGGY]  Len  =  line.length()  /  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.length()  /  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.length()  /  1;	  Len    =    line.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
159	[BUG]  [BUGGY]  w.write('n',  actualLength);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write('n',  actualLength);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write('n',  actualLength);	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
160	[BUG]  [BUGGY]  w.write( "n ");  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write( "n ");  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write( "n ");	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
161	[BUG]  [BUGGY]  w.write('n',  len);  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write('n',  len);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write('n',  len);	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
162	[BUG]  [BUGGY]  w.write('N');  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write('N');  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write('N');	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
163	[BUG]  [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
164	[BUG]  [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
165	[BUG]  [BUGGY]  if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
166	[BUG]  [BUGGY]  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
167	[BUG]  [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
168	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(line);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  readPaxHeadersForNonAsciiNames(line);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	readPaxHeadersForNonAsciiNames(line);	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
169	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.')+  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.')+  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.')+  2;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
170	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  actualLength)+  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  actualLength)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  actualLength)+  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
171	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.')/  1;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.')/  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.')/  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
172	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.')+  4;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.')+  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.')+  4;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
173	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.')+  3;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.')+  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.')+  3;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
174	[BUG]  [BUGGY]  int  len  =  line.toString().lastIndexOf('.')+  1;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.toString().lastIndexOf('.')+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.toString().lastIndexOf('.')+  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
175	[BUG]  [BUGGY]  Len  =  actualLength  /  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  /  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  /  1;	  Len    =    actualLength    -    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
176	[BUG]  [BUGGY]  Len  =  len  -  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  len  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  len  -  1;	  Len    =    actualLength    -    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
177	[BUG]  [BUGGY]  Len  =  actualLength  -  4;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  -  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  -  4;	  Len    =    actualLength    -    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
178	[BUG]  [BUGGY]  Len  =  actualLength  -  1  +  len;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  -  1  +  len;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  -  1  +  len;	  Len    =    actualLength    -    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
179	[BUG]  [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
180	[BUG]  [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(len);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
181	[BUG]  [BUGGY]  if(len  <  actualLength)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  <  actualLength)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  <  actualLength)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
182	[BUG]  [BUGGY]  if(len  <  actualLength)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  <  actualLength)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  <  actualLength)  {  if(actualLength  >  0)  {  len  -=  actualLength;  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
183	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(len);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  readPaxHeadersForNonAsciiNames(len);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	readPaxHeadersForNonAsciiNames(len);	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
184	[BUG]  [BUGGY]  len  =  currSize  -  1;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currSize  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currSize  -  1;	  len    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
185	[BUG]  [BUGGY]  len  -=  len  -  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  len  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  len  -  1;	  len    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
186	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }	  len    -=    aLen;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
187	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  len    -=    aLen;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
188	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  len    -=    aLen;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
189	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames();  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames();  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames();  }	  len    -=    aLen;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
190	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  aLen;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }	  len    -=    aLen;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
191	[BUG]  [BUGGY]  len  =  actualLength  /  2  +  1;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  2  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  2  +  1;	  len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
192	[BUG]  [BUGGY]  len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8).length;	  len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
193	[BUG]  [BUGGY]  len  =  actualLength  /  2  +  line.length();  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  2  +  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  2  +  line.length();	  len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
194	[BUG]  [BUGGY]  len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8);	  len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
195	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8)+  1;	  String    key    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
196	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8)+  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8)+  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8)+  2;	  String    key    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
197	[BUG]  [BUGGY]  String  key  =  w.toString().getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  w.toString().getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  w.toString().getBytes(CharsetNames.UTF_8);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
198	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8)+  4;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8)+  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8)+  4;	  String    key    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
199	[BUG]  [BUGGY]  String  key  =  w.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  w.getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  w.getBytes(CharsetNames.UTF_8);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
200	[BUG]  [BUGGY]  len  =  currBytes;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currBytes;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currBytes;	  len    =    currSize;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
201	[BUG]  [BUGGY]  len  -=  currSize;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  currSize;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  currSize;	  len    =    currSize;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
202	[BUG]  [BUGGY]  len  =  currSize  +  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currSize  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currSize  +  1;	  len    =    currSize;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
203	[BUG]  [BUGGY]  Len  =  currBytes;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  currBytes;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  currBytes;	  len    =    currSize;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
204	[BUG]  [BUGGY]  Len  =  actualLength  +  4;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  +  4;	  Len    =    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
205	[BUG]  [BUGGY]  Len  =  actualLength  +  3;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  +  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  +  3;	  Len    =    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
206	[BUG]  [BUGGY]  Len  =  actualLength  +  6;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  +  6;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  +  6;	  Len    =    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
207	[BUG]  [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(pex);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
208	[BUG]  [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(pex);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(pex);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
209	[BUG]  [BUGGY]  if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(pex);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
210	[BUG]  [BUGGY]  Len  =  currName.length()  -  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  currName.length()  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  currName.length()  -  1;	  Len    =    line.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
211	[BUG]  [BUGGY]  Len  =  len.length();  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  len.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  len.length();	  Len    =    line.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
212	[BUG]  [BUGGY]  Len  =  lineno.length();  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  lineno.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  lineno.length();	  Len    =    line.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
213	[BUG]  [BUGGY]  len  -=  wOffset;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  wOffset;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  wOffset;	  len    =    wOffset;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
214	[BUG]  [BUGGY]  len  =  wOffset  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  wOffset  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  wOffset  +  1;	  len    =    wOffset;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
215	[BUG]  [BUGGY]  w.write(line,  0,  len);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(line,  0,  len);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(line,  0,  len);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
216	[BUG]  [BUGGY]  w.write(line  + "n ");  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(line  + "n ");  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(line  + "n ");	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
217	[BUG]  [BUGGY]  w.write(entryName);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(entryName);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(entryName);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
218	[BUG]  [BUGGY]  w.write(line,  currName);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(line,  currName);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(line,  currName);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
219	[BUG]  [BUGGY]  Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
220	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line  +  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line  +  1);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line  +  1);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
221	[BUG]  [BUGGY]  len  =  w.length();  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  w.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  w.length();	  len    =    line.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
222	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
223	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
224	[BUG]  [BUGGY]  Len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
225	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
226	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
227	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
228	[BUG]  [BUGGY]  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
229	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8).length;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
230	[BUG]  [BUGGY]  Len  =  w.toString().getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  w.toString().getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  w.toString().getBytes(CharacterNames.UTF_8).length;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
231	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
232	[BUG]  [BUGGY]  len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
233	[BUG]  [BUGGY]  len  =  w.toString().getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  w.toString().getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  w.toString().getBytes(CharacterNames.UTF_8).length;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
234	[BUG]  [BUGGY]  len  -=  actualLength  *  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  actualLength  *  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength  *  1;	  len    -=    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
235	[BUG]  [BUGGY]  int  len  =  line.toString().getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.toString().getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.toString().getBytes(CharacterNames.UTF_8).length;	  int    len    =    w.toString().getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
236	[BUG]  [BUGGY]  int  len  =  w.toString().getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().getBytes(CharacterNames.UTF_8).length  +  1;	  int    len    =    w.toString().getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
237	[BUG]  [BUGGY]  byte  len  =  w.toString().getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  byte  len  =  w.toString().getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	byte  len  =  w.toString().getBytes(CharacterNames.UTF_8).length;	  int    len    =    w.toString().getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
238	[BUG]  [BUGGY]  char  len  =  w.toString().getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  char  len  =  w.toString().getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	char  len  =  w.toString().getBytes(CharacterNames.UTF_8).length;	  int    len    =    w.toString().getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
239	[BUG]  [BUGGY]  Integer  len  =  line.toString().getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Integer  len  =  line.toString().getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Integer  len  =  line.toString().getBytes(CharacterNames.UTF_8).length;	  int    len    =    w.toString().getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
240	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharsetNames.UTF_8)+  1;	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
241	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8)+  1;	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
242	[BUG]  [BUGGY]  Len  =  w.toString().getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  w.toString().getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  w.toString().getBytes(CharsetNames.UTF_8);	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
243	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8);	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
244	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }	  len    -=    assemLen;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
245	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  len    -=    assemLen;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
246	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  len    -=    assemLen;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
247	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames();  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames();  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  assemLen;  }  else  {  writePaxHeadersForNonAsciiNames();  }	  len    -=    assemLen;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
248	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  assemLen;  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  assemLen;  }	  len    -=    assemLen;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
249	[BUG]  [BUGGY]  len  -=  length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  length;	  len    =    length;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
250	[BUG]  [BUGGY]  len  =  actualLength  /  8;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  8;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  8;	  len    =    actualLength    /    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
251	[BUG]  [BUGGY]  len  =  actualLength  *  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  1;	  len    =    actualLength    /    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
252	[BUG]  [BUGGY]  len  =  1L;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  1L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  1L;	  len    =    1;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
253	[BUG]  [BUGGY]  len  =  actualLength  +  5;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  +  5;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  +  5;	  len    =    actualLength    +    6;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
254	[BUG]  [BUGGY]  len  =  actualLength  +  8;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  +  8;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  +  8;	  len    =    actualLength    +    6;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
255	[BUG]  [BUGGY]  LONGFILE_GNU  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  LONGFILE_GNU  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	LONGFILE_GNU  >  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
256	[BUG]  [BUGGY]  if(actualLength  >  0)  {  line  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  line  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  line  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
257	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
258	[BUG]  [BUGGY]  len  =  w.length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  w.length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  w.length;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
259	[BUG]  [BUGGY]  len  =  currName.length()  +  4;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName.length()  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName.length()  +  4;	  len    =    currName.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
260	[BUG]  [BUGGY]  len  -=  2L;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  2L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  2L;	  len    -=    2;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
261	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(pex);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  readPaxHeadersForNonAsciiNames(pex);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	readPaxHeadersForNonAsciiNames(pex);	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(pex);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
262	[BUG]  [BUGGY]  Len  =  LONGFILE_TRUNCATE;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  LONGFILE_TRUNCATE;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  LONGFILE_TRUNCATE;	  Len    =    actualLength;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
263	[BUG]  [BUGGY]  Len  =  aLen;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  aLen;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  aLen;	  Len    =    actualLength;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
264	[BUG]  [BUGGY]  len  =  wBuf.length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  wBuf.length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  wBuf.length;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
265	[BUG]  [BUGGY]  len  =  assemBuf.length  *  2;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemBuf.length  *  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemBuf.length  *  2;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
266	[BUG]  [BUGGY]  len  =  assemBuf.length  +  4;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemBuf.length  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemBuf.length  +  4;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
267	[BUG]  [BUGGY]  len  -=  assemLength;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  assemLength;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  assemLength;	  len    -=    assemLen;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
268	[BUG]  [BUGGY]  len  =  line.length()  -  1L;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.length()  -  1L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.length()  -  1L;	  len    =    line.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
269	[BUG]  [BUGGY]  if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
270	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(line,  true);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  readPaxHeadersForNonAsciiNames(line,  true);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	readPaxHeadersForNonAsciiNames(line,  true);	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
271	[BUG]  [BUGGY]  if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  >  0)  {  actualLength  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  false);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
272	[BUG]  [BUGGY]  Len  -=  0L;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  0L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  0L;	  len    =    0L;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
273	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
274	[BUG]  [BUGGY]  len  =  LONGFILE_TRUNCATE  +  8;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_TRUNCATE  +  8;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_TRUNCATE  +  8;	  len    =    LONGFILE_TRUNCATE    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
275	[BUG]  [BUGGY]  len  =  assemLen  +  8;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemLen  +  8;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemLen  +  8;	  len    =    assemLen    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
276	[BUG]  [BUGGY]  len  =  assemLen  +  3;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemLen  +  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemLen  +  3;	  len    =    assemLen    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
277	[BUG]  [BUGGY]  len  =  assemLen  *  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemLen  *  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemLen  *  1;	  len    =    assemLen    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
278	[BUG]  [BUGGY]  w.write(key,  value);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(key,  value);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(key,  value);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
279	[BUG]  [BUGGY]  w.write(value);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(value);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(value);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
280	[BUG]  [BUGGY]  len  =  actualLength  /  2  +  line;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  2  +  line;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  2  +  line;	  len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
281	[BUG]  [BUGGY]  Lan  =  line.length();  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Lan  =  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Lan  =  line.length();	  Len    =    line.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
282	[BUG]  [BUGGY]  Latin  =  line.length();  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Latin  =  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Latin  =  line.length();	  Len    =    line.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
283	[BUG]  [BUGGY]  int  len  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.getBytes(CharsetNames.UTF_8).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
284	[BUG]  [BUGGY]  int  len  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(charsetNames.UTF_8).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
285	[BUG]  [BUGGY]  Len  =  actualLength  /  2  +  len;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  /  2  +  len;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  /  2  +  len;	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
286	[BUG]  [BUGGY]  Len  =  actualLength  *  2;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  *  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  *  2;	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
287	[BUG]  [BUGGY]  char  len  =  line.getBytes(CharacterNames.UTF_8);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  char  len  =  line.getBytes(CharacterNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	char  len  =  line.getBytes(CharacterNames.UTF_8);	  int    len    =    line.getBytes(CharacterNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
288	[BUG]  [BUGGY]  len  -=  len  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  len  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  len  +  1;	  len    -=    len;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
289	[BUG]  [BUGGY]  len  -=  currLength;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  currLength;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  currLength;	  len    -=    len;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
290	[BUG]  [BUGGY]  len  =  currLen;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currLen;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currLen;	  len    =    currName;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
291	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  LONGFILE_TRUNCATE;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  LONGFILE_TRUNCATE;  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  LONGFILE_TRUNCATE;  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
292	[BUG]  [BUGGY]  len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
293	[BUG]  [BUGGY]  len  =  w.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  w.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  w.getBytes(CharacterNames.UTF_8).length;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
294	[BUG]  [BUGGY]  String  key  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  w.getBytes(CharsetNames.UTF_8).length;	  String    key    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
295	[BUG]  [BUGGY]  len  -=  6;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  6;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  6;	  len    -=    0;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
296	[BUG]  [BUGGY]  len  =  actualLength  -  6;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  -  6;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  -  6;	  len    =    actualLength    -    4;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
297	[BUG]  [BUGGY]  Len  =  linen.length();  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  linen.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  linen.length();	  Len    =    line.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
298	[BUG]  [BUGGY]  Len  =  line.length()  -  1L;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.length()  -  1L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.length()  -  1L;	  Len    =    line.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
299	[BUG]  [BUGGY]  len  =  LONGFILE_TRUNCATE  *  actualLength;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_TRUNCATE  *  actualLength;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_TRUNCATE  *  actualLength;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
300	[BUG]  [BUGGY]  len  =  aLen  *  LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  aLen  *  LONGFILE_GNU;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  aLen  *  LONGFILE_GNU;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
301	[BUG]  [BUGGY]  int  len  =  w.toString().indexOf('.')+  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().indexOf('.')+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().indexOf('.')+  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
302	[BUG]  [BUGGY]  Len  =  line.length()  +  4;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.length()  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.length()  +  4;	  Len    =    line.length();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
303	[BUG]  [BUGGY]  Len  -=  actualLength  +  6;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  actualLength  +  6;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  actualLength  +  6;	  Len    -=    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
304	[BUG]  [BUGGY]  Len  -=  assemLen;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  assemLen;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  assemLen;	  len    -=    aLen;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
305	[BUG]  [BUGGY]  w.write('n'  +  currName);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write('n'  +  currName);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write('n'  +  currName);	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
306	[BUG]  [BUGGY]  w.write('n'  +  len);  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write('n'  +  len);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write('n'  +  len);	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
307	[BUG]  [BUGGY]  len  -=  MAX_LONGFILE_GNU;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  MAX_LONGFILE_GNU;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  MAX_LONGFILE_GNU;	  len    -=    LONGFILE_TRUNCATE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
308	[BUG]  [BUGGY]  len  -=  LONGFILE_TRUNCATE  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  LONGFILE_TRUNCATE  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  LONGFILE_TRUNCATE  +  1;	  len    -=    LONGFILE_TRUNCATE;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
309	[BUG]  [BUGGY]  len  =  aLen  +  4;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  aLen  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  aLen  +  4;	  len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
310	[BUG]  [BUGGY]  len  =  aLen  *  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  aLen  *  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  aLen  *  1;	  len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
311	[BUG]  [BUGGY]  if(w!=  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(w!=  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(w!=  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  }	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
312	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
313	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >=  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >=  0)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
314	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
315	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  4;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  4;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  4;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
316	[BUG]  [BUGGY]  len  =  numToWrite  +  4;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  numToWrite  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  numToWrite  +  4;	  len    =    numToWrite;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
317	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8)+  'n';  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8)+  'n';  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8)+  'n';	  String    key    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
318	[BUG]  [BUGGY]  len  -=  1L;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  1L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  1L;	  len    -=    1;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
319	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  0);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  0);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  0);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
320	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  len);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  len);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  len);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
321	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  1);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  1);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
322	[BUG]  [BUGGY]  len  =  actualLength  *  4;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  4;	  len    =    actualLength    *    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
323	[BUG]  [BUGGY]  len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  2  +  line.getBytes(CharsetNames.UTF_8)+  1;	  len    =    actualLength    *    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
324	[BUG]  [BUGGY]  Len  =  aLen  +  4;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  aLen  +  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  aLen  +  4;	  Len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
325	[BUG]  [BUGGY]  Len  =  currName  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  currName  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  currName  +  1;	  Len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
326	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8)-  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8)-  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharsetNames.UTF_8)-  1;	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
327	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  value);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  value);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  value);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
328	[BUG]  [BUGGY]  String  key  =  w.getBytes(CharsetNames.UTF_8);  w.write(key);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  w.getBytes(CharsetNames.UTF_8);  w.write(key);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  w.getBytes(CharsetNames.UTF_8);  w.write(key);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
329	[BUG]  [BUGGY]  len  =  len  -  1L;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  len  -  1L;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  len  -  1L;	  len    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
330	[BUG]  [BUGGY]  len  =  len  -  2;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  len  -  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  len  -  2;	  len    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
331	[BUG]  [BUGGY]  len  =  currName  -  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName  -  1;	  len    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
332	[BUG]  [BUGGY]  if(w!=  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(w!=  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(w!=  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
333	[BUG]  [BUGGY]  if(w  ==  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(w  ==  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(w  ==  null)  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
334	[BUG]  [BUGGY]  w.write(len);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(len);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(len);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
335	[BUG]  [BUGGY]  len  =  aLength  +  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  aLength  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  aLength  +  1;	  len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
336	[BUG]  [BUGGY]  len  =  len  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  len  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  len  +  1;	  len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
337	[BUG]  [BUGGY]  Len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  /  2  +  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
338	[BUG]  [BUGGY]  Len  =  actualLength  /  2  +  line.getChars(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  /  2  +  line.getChars(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  /  2  +  line.getChars(CharsetNames.UTF_8).length;	  Len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
339	[BUG]  [BUGGY]  len  -=  currName.length();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  currName.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  currName.length();	  len    =    currName.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
340	[BUG]  [BUGGY]  len  =  line.length  -  1;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.length  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.length  -  1;	  len    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
341	[BUG]  [BUGGY]  len  =  length  -  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  length  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  length  -  1;	  len    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
342	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
343	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  line.length();  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  line.length();  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  line.length();  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
344	[BUG]  [BUGGY]  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
345	[BUG]  [BUGGY]  len  =  actualLength  *  3;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  3;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  3;	  len    =    actualLength    +    3;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
346	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  2;  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
347	[BUG]  [BUGGY]  Len  -=  actualLength  *  2;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  actualLength  *  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  actualLength  *  2;	  Len    -=    actualLength;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
348	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(pex);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
349	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(pex);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(pex);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
350	[BUG]  [BUGGY]  len  =  aLen  /  actualLength;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  aLen  /  actualLength;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  aLen  /  actualLength;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
351	[BUG]  [BUGGY]  len  =  1  *  actualLength;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  1  *  actualLength;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  1  *  actualLength;	  len    =    aLen    *    actualLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
352	[BUG]  [BUGGY]  char  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  char  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	char  len  =  line.getBytes(CharsetNames.UTF_8).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
353	[BUG]  [BUGGY]  len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;	  len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
354	[BUG]  [BUGGY]  len  -=  actualLength  /  2;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  actualLength  /  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength  /  2;	  len    -=    actualLength    +    2;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
355	[BUG]  [BUGGY]  len  -=  LONGFILE_TRUNCATE  +  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  LONGFILE_TRUNCATE  +  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  LONGFILE_TRUNCATE  +  2;	  len    -=    actualLength    +    2;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
356	[BUG]  [BUGGY]  Len  =  line.length()  -  4;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.length()  -  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.length()  -  4;	  Len    =    line.length();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
357	[BUG]  [BUGGY]  Len  =  line.length()  *  2;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  line.length()  *  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  line.length()  *  2;	  Len    =    line.length();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
358	[BUG]  [BUGGY]  long  len  =  line.getBytes(CharacterNames.UTF_8);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  long  len  =  line.getBytes(CharacterNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	long  len  =  line.getBytes(CharacterNames.UTF_8);	  int    len    =    line.getBytes(CharacterNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
359	[BUG]  [BUGGY]  Len  =  aLen  *  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  aLen  *  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  aLen  *  1;	  Len    =    aLen    +    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
360	[BUG]  [BUGGY]  len  =  line.getLength();  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getLength();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getLength();	  len    =    LONGFILE_GNU;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
361	[BUG]  [BUGGY]  len  =  line.trim();  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.trim();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.trim();	  len    =    line.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
362	[BUG]  [BUGGY]  Len  -=  len  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  len  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  len  +  1;	  Len    -=    actualLength    +    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
363	[BUG]  [BUGGY]  Len  -=  assemLen  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  -=  assemLen  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  -=  assemLen  +  1;	  len    -=    assemLen;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
364	[BUG]  [BUGGY]  len  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  w.getBytes(CharsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
365	[BUG]  [BUGGY]  if(w.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(w.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(w.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
366	[BUG]  [BUGGY]  if(w.isEmpty())  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(w.isEmpty())  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(w.isEmpty())  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  }	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
367	[BUG]  [BUGGY]  Len  =  actualLength  -  1  +  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  -  1  +  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  -  1  +  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    actualLength    -    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
368	[BUG]  [BUGGY]  Len  =  actualLength  -  1  +  line.length();  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  actualLength  -  1  +  line.length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  actualLength  -  1  +  line.length();	  Len    =    actualLength    -    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
369	[BUG]  [BUGGY]  len  =  actualLength  *  2  +  line.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  2  +  line.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  2  +  line.toString().getBytes(CharsetNames.UTF_8).length;	  len    =    actualLength    *    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
370	[BUG]  [BUGGY]  len  =  actualLength  *  2  +  line.getChars(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  2  +  line.getChars(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  2  +  line.getChars(CharsetNames.UTF_8).length;	  len    =    actualLength    *    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
371	[BUG]  [BUGGY]  len  =  assemBuf.length  -  2;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  assemBuf.length  -  2;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  assemBuf.length  -  2;	  len    =    assemBuf.length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
372	[BUG]  [BUGGY]  len  -=  actualLength  /  4;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  actualLength  /  4;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength  /  4;	  len    -=    actualLength    +    4;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
373	[BUG]  [BUGGY]  len  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(charsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
374	[BUG]  [BUGGY]  len  =  LONGFILE_TRUNCATE.length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  LONGFILE_TRUNCATE.length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  LONGFILE_TRUNCATE.length;	  len    =    0L;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
375	[BUG]  [BUGGY]  len  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.getBytes(CharacterEncodingNames.UTF_8).length;	  len    =    LONGFILE_GNU.length;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
376	[BUG]  [BUGGY]  len  =  line.trim().length();  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  line.trim().length();  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  line.trim().length();	  len    =    line.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
377	[BUG]  [BUGGY]  byte  len  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  byte  len  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	byte  len  =  line.getBytes(CharsetNames.UTF_8);	  int    len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
378	[BUG]  [BUGGY]  w.write(line,  'n');  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(line,  'n');  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(line,  'n');	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	37	None	replace
379	[BUG]  [BUGGY]  len  =  actualLength  /  2  +  line.getChars(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  /  2  +  line.getChars(CharsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  /  2  +  line.getChars(CharsetNames.UTF_8).length;	  len    =    actualLength    /    2;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
380	[BUG]  [BUGGY]  char  key  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  char  key  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	char  key  =  line.getBytes(CharsetNames.UTF_8);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
381	[BUG]  [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  currName);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  currName);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(CharsetNames.UTF_8);  w.write(key,  currName);	  String    key    =    line.getBytes(CharsetNames.UTF_8);    w.write(key);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
382	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  1;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
383	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  4;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  4;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  4;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
384	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
385	[BUG]  [BUGGY]  if(len  <  actualLength)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(len  <  actualLength)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(len  <  actualLength)  {  len  -=  actualLength;  }  else  {  writePaxHeadersForNonAsciiNames(line,  true);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(line,    true);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
386	[BUG]  [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(actualLength  >  0)  {  len  -=  2;  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  if(actualLength    >    0)    {    len    -=    actualLength;    }    else    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
387	[BUG]  [BUGGY]  String  key  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  String  key  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	String  key  =  line.getBytes(charsetNames.UTF_8).length;	  String    key    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
388	[BUG]  [BUGGY]  len  -=  actualLength  /  1;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  -=  actualLength  /  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  -=  actualLength  /  1;	  len    =    actualLength    /    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
389	[BUG]  [BUGGY]  len  =  currName  + "n ";  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  currName  + "n ";  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  currName  + "n ";	  len    =    currName;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
390	[BUG]  [BUGGY]  if(w.isEmpty())  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  if(w.isEmpty())  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  }  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	if(w.isEmpty())  {  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  }	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
391	[BUG]  [BUGGY]  Len  =  LONGFILE_TRUNCATE  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  Len  =  LONGFILE_TRUNCATE  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	Len  =  LONGFILE_TRUNCATE  +  1;	  len    =    LONGFILE_TRUNCATE    +    1;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
392	[BUG]  [BUGGY]  w.write(currName);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  w.write(currName);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	w.write(currName);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
393	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  LONGFILE_TRUNCATE);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  LONGFILE_TRUNCATE);  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  LONGFILE_TRUNCATE);	  int    len    =    w.toString().lastIndexOf('.');    	non-compiled	[CE]  <identifier>  expected	53	None	replace
394	[BUG]  [BUGGY]  len  =  actualLength  *  6;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  len  =  actualLength  *  6;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	len  =  actualLength  *  6;	  len    =    actualLength    +    6;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
395	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.')/  2  +  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.')/  2  +  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.')/  2  +  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
396	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  LONGFILE_TRUNCATE)+  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  LONGFILE_TRUNCATE)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  LONGFILE_TRUNCATE)+  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
397	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  len)+  1;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  len)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  len)+  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
398	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  MAX_VALUE)+  1;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  MAX_VALUE)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  MAX_VALUE)+  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
399	[BUG]  [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  MAX_LENGTH)+  1;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {            [BUGGY]  int  len  =  w.toString().lastIndexOf('.',  MAX_LENGTH)+  1;  [BUGGY]      line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	int  len  =  w.toString().lastIndexOf('.',  MAX_LENGTH)+  1;	  int    len    =    w.toString().lastIndexOf('.')+    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
