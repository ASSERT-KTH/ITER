bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
8	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
15	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
16	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
17	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
21	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  true);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  true);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
22	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  false);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  false);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
24	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  1);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  1);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
26	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  headers);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
27	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  1);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  1);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
28	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
32	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
33	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
35	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next();  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                              IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
44	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
45	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
46	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  headers);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
50	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
51	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
53	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
54	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
61	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
62	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
63	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  1);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  1);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
64	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
65	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  headers);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  headers);  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
66	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
67	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    Map<String,  String>  headers)  throws  IOException  {  String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }    [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  [BUGGY]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
