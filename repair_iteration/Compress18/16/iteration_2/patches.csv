bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LP_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
2	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LP_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
3	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LP_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
4	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
5	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
6	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLIENT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
7	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  line);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  line);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  line);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    w);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
8	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  paxHeaders);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  paxHeaders);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  paxHeaders);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    w);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
9	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  4);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  4);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  4);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    w);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
10	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  cache);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  cache);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  cache);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    w);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
11	[BUG]  [BUGGY]  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
12	[BUG]  [BUGGY]  String  name  =  name.substring(0,  name.length()  -  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  String  name  =  name.substring(0,  name.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	String  name  =  name.substring(0,  name.length()  -  1);	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
13	[BUG]  [BUGGY]  Name  name  =  headers.keySet().substring(0,  name.length()  -  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Name  name  =  headers.keySet().substring(0,  name.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Name  name  =  headers.keySet().substring(0,  name.length()  -  1);	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
14	[BUG]  [BUGGY]  Name  name  =  name.substring(0,  name.length()  -  1);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Name  name  =  name.substring(0,  name.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Name  name  =  name.substring(0,  name.length()  -  1);	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
15	[BUG]  [BUGGY]  Name  name  =  headers.substring(0,  name.length()  -  1);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Name  name  =  headers.substring(0,  name.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Name  name  =  headers.substring(0,  name.length()  -  1);	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
16	[BUG]  [BUGGY]  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length());  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length());  }	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
17	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.SECOND);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.SECOND);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.SECOND);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
18	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND,  name);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.BIGINT);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.BIGINT);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.BIGINT);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND,  headers);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  entryName);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  entryName);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  entryName);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    name);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
22	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  encoding);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  encoding);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  encoding);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    name);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
23	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  0);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  0);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  0);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    name);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
24	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
25	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
26	[BUG]  [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
27	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('N');  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('N');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('N');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
28	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "null ");  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "null ");  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "null ");  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
29	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "n ");  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "n ");  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
30	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
31	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
32	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
33	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
34	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
35	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HARD_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
36	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HARD_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
37	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HARD_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HARD_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
38	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
39	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
40	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  line);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  line);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  line);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
41	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    headers);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
42	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    headers);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
43	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  line);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  line);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  line);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    headers);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
44	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  false);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    headers);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
45	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  buffer);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    headers);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
46	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  true);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  true);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    headers);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
48	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LT_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
49	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
50	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
51	[BUG]  [BUGGY]  name  =  entry.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  name  =  entry.substring(0,  entry.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	name  =  entry.substring(0,  entry.length()  -  1);	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
52	[BUG]  [BUGGY]  Name  name  =  entry.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Name  name  =  entry.substring(0,  entry.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Name  name  =  entry.substring(0,  entry.length()  -  1);	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
53	[BUG]  [BUGGY]  String  name  =  entry.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  String  name  =  entry.substring(0,  entry.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	String  name  =  entry.substring(0,  entry.length()  -  1);	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
54	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  name  =  entry.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  name  =  entry.substring(0,  entry.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  name  =  entry.substring(0,  entry.length()  -  1);	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
55	[BUG]  [BUGGY]  String  line  =  name.substring(0,  name.length()  -  1);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  String  line  =  name.substring(0,  name.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	String  line  =  name.substring(0,  name.length()  -  1);	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
56	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.keySet().iterator().next();  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.keySet().iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.keySet().iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
57	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.get(name).iterator().next();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.get(name).iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.get(name).iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
58	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
59	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next(),  name);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next(),  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next(),  name);	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
60	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.get(0).iterator().next();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.get(0).iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.get(0).iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
61	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.iterator().next();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
62	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length()  -  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length()  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
63	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  2);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  2);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  2);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
64	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers  -  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
65	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  4);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  4);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  -  4);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
66	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  paxHeaders);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  paxHeaders);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  paxHeaders);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name,    headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
67	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName,  headers);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name,    headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
68	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  buffer);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name,    headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
69	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
70	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
71	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
72	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
73	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
74	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
75	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    header);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
76	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header  +  1);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    header);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
77	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    header);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
78	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    header);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
79	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
80	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
81	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer,  headers);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    buffer);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
82	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer,  name);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    buffer);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
83	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer,  line);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer,  line);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  buffer,  line);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    buffer);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
84	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FOR);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FOR);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FOR);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
85	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
86	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
87	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
88	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECEMBER);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECEMBER);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECEMBER);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
89	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT,  name);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
90	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT,  headers);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_LC);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_KEY);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_KEY);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_KEY);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
94	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
95	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
96	[BUG]  [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
97	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('/');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('/');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
98	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( ", ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( ", ");  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( ", ");  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
99	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "/PaxHeaders.X/ ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "/PaxHeaders.X/ ");  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "/PaxHeaders.X/ ");  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
100	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NAMELEN,  headers);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NAMELEN,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NAMELEN,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN,    headers);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
101	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  headers,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN,    headers);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
102	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX,  headers);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN,    headers);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
103	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
104	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
105	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
106	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
107	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.NON_ASCII);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.NON_ASCII);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.NON_ASCII);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
108	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.NON_ASCII);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.NON_ASCII);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.NON_ASCII);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
109	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
110	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  name);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
111	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(headers,  TarConstants.NON_ASCII);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(headers,  TarConstants.NON_ASCII);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(headers,  TarConstants.NON_ASCII);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
112	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII,  name);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.NON_ASCII,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
113	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LP_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LP_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LP_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LP_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
114	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    buffer);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
115	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer,  name);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    buffer);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
116	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer,  headers);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  buffer,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    buffer);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
117	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  paxHeaders);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  paxHeaders);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  paxHeaders);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    buffer);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
118	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FT_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FT_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FT_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
119	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
120	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
121	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
122	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
123	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
124	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LLOW_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LLOW_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LLOW_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
125	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
126	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    name);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
127	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    name);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
128	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    name);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
129	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name  -  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  name  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    name);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
130	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  line);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  line);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  line);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    name);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
131	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LEFT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
132	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LFT_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LFT_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LFT_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LEFT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
133	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LEFT_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LEFT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
134	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLOAT_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLOAT_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLOAT_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LEFT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
135	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  -  1);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
136	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  2);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  2);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  2);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
137	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  /  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  /  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  /  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
138	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1,  name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
139	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  3);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  3);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  3);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
140	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.PREFIX);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
141	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX,  name);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
142	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
143	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
144	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
145	[BUG]  [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
146	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
147	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
148	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getValue());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
149	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
150	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
151	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
152	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLUSH_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLUSH_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLUSH_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FLUSH_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
153	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.LONG_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LONG_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
154	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
155	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
156	[BUG]  [BUGGY]  Name  name  =  entryName.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Name  name  =  entryName.substring(0,  entry.length()  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Name  name  =  entryName.substring(0,  entry.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
157	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
158	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
159	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet();	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
160	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.F_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
161	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.F_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.F_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
162	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.F_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.F_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.F_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.F_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
163	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
164	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
165	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
166	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LLOW_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LLOW_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LLOW_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
167	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
168	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
169	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
170	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
171	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(addPaxHeadersForNonAsciiNames  ||  headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
172	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsci  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsci  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsci	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
173	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(addPaxHeadersForNonAsciiNames)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
174	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
175	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLOSE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
176	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
177	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
178	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLAG_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLAG_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FLAG_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
179	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
180	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
181	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DECIMAL);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DECIMAL);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DECIMAL);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DECIMAL);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
182	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DECIMAL);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
183	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECIMAL);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECIMAL);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECIMAL);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DECIMAL);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
184	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL,  headers);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DECIMAL);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
185	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
186	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name  +  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
187	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  2);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  2);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  2);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    +    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
188	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  3);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  3);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  3);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    +    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
189	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  4);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  4);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  4);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    +    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
190	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers  +  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    +    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
191	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  true);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  true);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
192	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  false);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
193	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName,  false);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
194	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer,  false);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  buffer,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
195	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  this.headers,  false);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  this.headers,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  this.headers,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
196	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
202	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
203	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
204	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC  +  1);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC    +    1);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
205	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  false);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
206	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  true);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  true);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
207	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  0,  false);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  0,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  0,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
208	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  this.headers,  true);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  this.headers,  true);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  this.headers,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
209	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  equals,  true);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  equals,  true);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  equals,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
210	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.PREFIX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.PREFIX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(path,  TarConstants.PREFIX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.PREFIX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
211	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLIENT_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
212	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR,  headers);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLIENT_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
213	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLIENT_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
214	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PREFIX);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
215	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  headers);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PREFIX);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
216	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PREFIX);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
217	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT_PREFIX);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT_PREFIX);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT_PREFIX);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PREFIX);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
218	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
219	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
220	[BUG]  [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
221	[BUG]  [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
222	[BUG]  [BUGGY]  if(entryName.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName.length()  ==  TarConstants.FOR_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
223	[BUG]  [BUGGY]  if(entryName.length()  ==  TarConstants.FUNCTION)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName.length()  ==  TarConstants.FUNCTION)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName.length()  ==  TarConstants.FUNCTION)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
224	[BUG]  [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
225	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  headers);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(Name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
226	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  buffer);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(Name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
227	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  1);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(Name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
228	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
229	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
230	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
231	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
232	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
233	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
234	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
235	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
236	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
237	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
238	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
239	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.get(name).iterator().next();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.get(name).iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.get(name).iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
240	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.get(0).iterator().next();  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.get(0).iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.get(0).iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
241	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next(),  name);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next(),  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next(),  name);	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
242	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.keySet().iterator().next();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.keySet().iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.keySet().iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
243	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.iterator().next();  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
244	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.size().iterator().next();  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.size().iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.size().iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
245	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
246	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(entryName,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
247	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
248	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.PREFIX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.PREFIX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.PREFIX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.PREFIX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
249	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValu  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValu  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValu	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
250	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
251	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getVal  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getVal  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getVal	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
252	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
253	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LAST_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LAST_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LAST_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LEFT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
254	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append(name);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
255	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('/');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('/');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
256	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "n ");  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "n ");  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
257	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  -  1);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC    +    1);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
258	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  2);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  2);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  2);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC    +    1);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
259	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  *  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  *  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  *  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC    +    1);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
260	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  4);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  4);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC  +  4);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC    +    1);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
261	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
262	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX  +  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX  +  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX  +  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PREFIX);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
263	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length  -  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
264	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name  -  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
265	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name  -  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  name  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
266	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.FOR_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
267	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
268	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  +  1);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  +  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  +  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
269	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
270	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
271	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length();  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
272	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  0,  true);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  0,  true);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  0,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
273	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  -  1);  }	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
274	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(1,  name.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(1,  name.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(1,  name.length()  -  1);  }	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
275	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.values())  {  name  =  name.substring(0,  name.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.values())  {  name  =  name.substring(0,  name.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(String  key  :  headers.values())  {  name  =  name.substring(0,  name.length()  -  1);  }	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
276	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  +  1);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  +  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length()  +  1);  }	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
277	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
278	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(headers,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(headers,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(headers,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  entryName);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
279	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(length,  TarConstants.NON_ASCII);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(length,  TarConstants.NON_ASCII);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(length,  TarConstants.NON_ASCII);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
280	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.NON_ASCII,  name);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.NON_ASCII,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(TarConstants.NON_ASCII,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
281	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    header);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
282	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    header);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
283	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header  -  1);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    header);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
284	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  buffer);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    buffer);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
285	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
286	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
287	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
288	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
289	[BUG]  [BUGGY]  if(headers.length  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers.length  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers.length  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
290	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
291	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
292	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().first();  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().first();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().first();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
293	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.values().iterator().next();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.values().iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.values().iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
294	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND  +  1);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SECOND  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
295	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LONG);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
296	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SOURCE);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SOURCE);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.SOURCE);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
297	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name  -  1);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  name  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
298	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    name);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
299	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    name);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
300	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,  headers,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
301	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name  -  1);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  name  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
302	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
303	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
304	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(name);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(name);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(name);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
305	[BUG]  [BUGGY]  final  Map.Entry  <  String,  String>  headers  =  headers.entrySet();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  final  Map.Entry  <  String,  String>  headers  =  headers.entrySet();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	final  Map.Entry  <  String,  String>  headers  =  headers.entrySet();	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
306	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeaderForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeaderForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeaderForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
307	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT  +  1);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
308	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name,  headers);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name,    headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
309	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  name,  headers);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  name,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  name,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name,    headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
310	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name  +  1);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  name  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    +    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
311	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.values().iterator().next();  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.values().iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.values().iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
312	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().first();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().first();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator().first();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
313	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.size().iterator().next();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entry  =  headers.size().iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entry  =  headers.size().iterator().next();	  Entry    <    String,    String>    entry    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
314	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
315	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
316	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
317	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
318	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length();  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
319	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
320	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
321	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL_KEY);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL_KEY);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL_KEY);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DECIMAL);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
322	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL  +  1);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DECIMAL);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
323	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
324	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
325	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
326	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w  +  1);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    w);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
327	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
328	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
329	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
330	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NONAsciiNames,  headers);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NONAsciiNames,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NONAsciiNames,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN,    headers);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
331	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PADDING_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PADDING_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PADDING_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN,    headers);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
332	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NAMELEN,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NAMELEN,    headers);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
333	[BUG]  [BUGGY]  if(headers.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
334	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
335	[BUG]  [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
336	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR  +  1);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR  +  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT_SEPARATOR  +  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.CLIENT_SEPARATOR);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
337	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getKey());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
338	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  buffer.append(entry.getKey());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  buffer.append(entry.getKey());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
339	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_DEFAULT);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_DEFAULT);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_DEFAULT);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
340	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII)+  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII)+  1;  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII)+  1;	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
341	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  4);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  4);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  4);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
342	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
343	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name  -  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  name  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
344	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  wBuffer);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  wBuffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  wBuffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    buffer);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
345	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    buffer);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
346	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers,  false);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.ALLOW_PAX_EXTENDED_HEADER_LC,  headers,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
347	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  false);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LP_PAX_EXTENDED_HEADER_LC,  headers,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
348	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  buffer);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FT_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
349	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers  -  1);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers  -  1);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers  -  1);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
350	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIELD_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIELD_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIELD_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
351	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
352	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  encoding);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  encoding);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  encoding);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    headers);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
353	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
354	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  buffer);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  buffer);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST_PAX_EXTENDED_HEADER_LC,  buffer);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FIRST_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
355	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(headers!=  null);  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Preconditions.checkState(headers!=  null);  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Preconditions.checkState(headers!=  null);  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('n');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
357	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.keySet())  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.keySet())  {  buffer.append('n');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.keySet())  {  buffer.append('n');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
358	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('N');  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('N');  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append('N');  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
359	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.sentrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.sentrySet().iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.sentrySet().iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
360	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next()  :  name;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next()  :  name;  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next()  :  name;	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
361	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  name);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
362	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PREFIX,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT_PREFIX);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
363	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  this);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  this);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  this);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    name);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
364	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
365	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length());  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length());  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.length());	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
366	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.charAt(0));  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.charAt(0));  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  name.charAt(0));	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name    -    1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
367	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PADDING);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PADDING);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PADDING);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
368	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_SPACE);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_SPACE);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_SPACE);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
369	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PLAIN);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PLAIN);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DEFAULT_PLAIN);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DEFAULT);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
370	[BUG]  [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
371	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  name  =  entry.substring(0,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  name  =  entry.substring(0,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Preconditions.checkState(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  name  =  entry.substring(0,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
373	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValu  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValu  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValu	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
374	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HeADER_LC,  headers,  false);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HeADER_LC,  headers,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HeADER_LC,  headers,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
375	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers,  true);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers,  true);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    true);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
376	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
377	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
378	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w,  w);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w,  w);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  w,  w);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    w);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
379	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  headers.entrySet();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  final  Map  <  String,  String>  headers  =  headers.entrySet();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	final  Map  <  String,  String>  headers  =  headers.entrySet();	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
380	[BUG]  [BUGGY]  Entry  <  String,  String>  headers  =  headers.entrySet();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  headers  =  headers.entrySet();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  headers  =  headers.entrySet();	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
381	[BUG]  [BUGGY]  if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
382	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
383	[BUG]  [BUGGY]  if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
384	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
385	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
386	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  this.headers);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  this.headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  headers,  this.headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    buffer);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
387	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  headers);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII,  headers,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII,    headers);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
388	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getName());  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getName());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  buffer.append(entry.getName());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    buffer.append(entry.getKey());    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
389	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(title,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(title,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(title,  TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
390	[BUG]  [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
391	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
392	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  headers);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.WRITE_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
393	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_ENTRY);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_ENTRY);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_ENTRY);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
394	[BUG]  [BUGGY]  headers!=  null  &&  headers.entrySet().containsKey(name))  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  headers!=  null  &&  headers.entrySet().containsKey(name))  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	headers!=  null  &&  headers.entrySet().containsKey(name))  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
395	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
396	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers,  false);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers,  false);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FT_PAX_EXTENDED_HEADER_LC,  headers,  false);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
397	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HeADER_LC,  headers,  true);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HeADER_LC,  headers,  true);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HeADER_LC,  headers,  true);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    headers,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
398	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_DELAYED);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_DELAYED);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FOR_DELAYED);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.FOR);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
399	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLIENT);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
400	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.FIRST);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.SECOND);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
401	[BUG]  [BUGGY]  headers!=  null  &&  headers.entrySet().containsKey(entryName))  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  headers!=  null  &&  headers.entrySet().containsKey(entryName))  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	headers!=  null  &&  headers.entrySet().containsKey(entryName))  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
402	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(Name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(Name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    name);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
403	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NEW_ASCII);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NEW_ASCII);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NEW_ASCII);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.NON_ASCII);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
404	[BUG]  [BUGGY]  if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
405	[BUG]  [BUGGY]  if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
406	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
407	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLONG_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLONG_PAX_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.CLONG_PAX_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LONG_PAX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
408	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers,  name);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers,  name);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_EXTENDED_HEADER_LC,  headers,  name);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.PREFIX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
409	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL_CLOSE);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL_CLOSE);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DECIMAL_CLOSE);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.DECIMAL);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
410	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  headers);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.HALF_PAX_EXTENDED_HEADER_LC,  headers,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.HALF_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
411	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
412	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
413	[BUG]  [BUGGY]  if(headers.containsKey(name))  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers.containsKey(name))  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers.containsKey(name))  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
414	[BUG]  [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entry.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
415	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length());  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  name.substring(0,  name.length());  }	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
416	[BUG]  [BUGGY]  Entry  <  String,  String>  headers  =  headers.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  Entry  <  String,  String>  headers  =  headers.entrySet().iterator().next();  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	Entry  <  String,  String>  headers  =  headers.entrySet().iterator().next();	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
417	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.getKeySet())  {  name  =  name.substring(0,  name.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.getKeySet())  {  name  =  name.substring(0,  name.length()  -  1);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(String  key  :  headers.getKeySet())  {  name  =  name.substring(0,  name.length()  -  1);  }	  if(headers!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    name.substring(0,    name.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
418	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(name.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(name.length()  >=  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
419	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
420	[BUG]  [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length();  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length();  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(entryName.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length();  }	  if(name.length()    ==    TarConstants.LF_PAX_EXTENDED_HEADER_LC)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
421	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1,  headers);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1,  headers);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.NON_ASCII  +  1,  headers);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.NON_ASCII    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
422	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  w);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  w);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.TAG_PAX_EXTENDED_HEADER_LC,  headers,  w);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.TAG_PAX_EXTENDED_HEADER_LC,    headers);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
423	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "/PaxHeaders.X/ "  +  stripTo7Bits(entryName);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "/PaxHeaders.X/ "  +  stripTo7Bits(entryName);  }  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  pex  :  headers.entrySet())  {  buffer.append( "/PaxHeaders.X/ "  +  stripTo7Bits(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    pex    :    headers.entrySet())    {    buffer.append(name);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
424	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.RP_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.RP_EXTENDED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.RP_EXTENDED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.PREFIX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
425	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_ED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_ED_HEADER_LC);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.PREFIX_ED_HEADER_LC);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(entryName,    TarConstants.PREFIX_EXTENDED_HEADER_LC);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
426	[BUG]  [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  header);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }      [BUGGY]  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  header);  [BUGGY]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.DL_PAX_EXTENDED_HEADER_LC,  header);	  TarArchiveEntry    pex    =    new    TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC,    header);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
