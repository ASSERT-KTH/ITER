bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    empty,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
2	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    empty,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
3	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    empty,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
4	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    empty,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
5	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    empty,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
6	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
7	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  10  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
8	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
9	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
10	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
11	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
12	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  name.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  name.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  name.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
13	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
14	[BUG]  [BUGGY]  Name  name  =  key.substring(0,  value.length()  -  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Name  name  =  key.substring(0,  value.length()  -  1);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Name  name  =  key.substring(0,  value.length()  -  1);	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
15	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
16	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
17	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(String  name  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
18	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  1  /*  guess  10  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
24	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
25	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
26	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
27	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
28	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  width  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  width  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  width  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
29	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
30	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
31	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
32	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
33	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
34	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
35	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
36	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
37	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
38	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
39	[BUG]  [BUGGY]  int  len  =  headers.size()  -  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  headers.size()  -  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.size()  -  1;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	101	None	replace
40	[BUG]  [BUGGY]  int  len  =  headers.size()  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  headers.size()  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.size()  +  1;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	101	None	replace
41	[BUG]  [BUGGY]  int  len  =  headers.size()  -  2;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  headers.size()  -  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.size()  -  2;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	101	None	replace
42	[BUG]  [BUGGY]  int  len  =  headers.size()  -  4;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  headers.size()  -  4;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.size()  -  4;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	101	None	replace
43	[BUG]  [BUGGY]  int  len  =  headers.size()  +  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  headers.size()  +  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.size()  +  2;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	101	None	replace
44	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
45	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
46	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	91	None	replace
47	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
48	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
49	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
50	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
51	[BUG]  [BUGGY]  int  len  =  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
52	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
53	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
54	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
55	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
56	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
57	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
58	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
59	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
60	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
61	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
62	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
63	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
64	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
65	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
66	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
67	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
68	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
69	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
70	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
71	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
72	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
73	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
74	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
75	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
76	[BUG]  [BUGGY]  int  len  =  value.length()  *  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  *  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  *  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
77	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
78	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
79	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
80	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  10  +  2  /*  guess  10  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  10  +  2  /*  guess  10  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  10  +  2  /*  guess  10  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
81	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
82	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
83	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
84	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
85	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
86	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	89	None	replace
87	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
88	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
89	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
90	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
94	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
95	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
96	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  guess  9  +  length  */  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  guess  9  +  length  */  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  guess  9  +  length  */  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
97	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
98	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
99	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
100	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
101	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
102	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
103	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
104	[BUG]  [BUGGY]  int  len  =  value.length()  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
105	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
106	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
107	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
108	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
109	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
110	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
111	[BUG]  [BUGGY]  Integer  len  =  headers.size()  -  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.size()  -  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.size()  -  1;	  Integer    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
112	[BUG]  [BUGGY]  Integer  len  =  headers.size()  +  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.size()  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.size()  +  1;	  Integer    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
113	[BUG]  [BUGGY]  Integer  len  =  headers.size()  -  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.size()  -  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.size()  -  2;	  Integer    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
114	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
115	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
116	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
117	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
118	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
119	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
120	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
121	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
122	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
123	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
124	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
125	[BUG]  [BUGGY]  int  len  =  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
126	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
127	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
128	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
129	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
130	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
131	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    w.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	99	None	replace
132	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    w.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	99	None	replace
133	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    w.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	99	None	replace
134	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    w.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	99	None	replace
135	[BUG]  [BUGGY]  Integer  len  =  headers.getLength()  +  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.getLength()  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.getLength()  +  1;	  Integer    len    =    headers.getLength();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
136	[BUG]  [BUGGY]  Integer  len  =  headers.getLength()  -  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.getLength()  -  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.getLength()  -  1;	  Integer    len    =    headers.getLength();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
137	[BUG]  [BUGGY]  Integer  len  =  headers.getLength()  +  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.getLength()  +  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.getLength()  +  2;	  Integer    len    =    headers.getLength();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
138	[BUG]  [BUGGY]  Integer  len  =  w.getLength();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  w.getLength();  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  w.getLength();	  Integer    len    =    headers.getLength();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
139	[BUG]  [BUGGY]  Integer  len  =  headers.getLength()  *  2;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.getLength()  *  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.getLength()  *  2;	  Integer    len    =    headers.getLength();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
140	[BUG]  [BUGGY]  Integer  len  =  headers.getLength()  -  2;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.getLength()  -  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.getLength()  -  2;	  Integer    len    =    headers.getLength();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
141	[BUG]  [BUGGY]  Integer  len  =  headers.getLength()  +  4;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.getLength()  +  4;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.getLength()  +  4;	  Integer    len    =    headers.getLength();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
142	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
143	[BUG]  [BUGGY]  w.write(value);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.write(value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.write(value);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
144	[BUG]  [BUGGY]  w.write(key,  value);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.write(key,  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.write(key,  value);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
145	[BUG]  [BUGGY]  w.write(value,  value);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.write(value,  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.write(value,  value);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
146	[BUG]  [BUGGY]  w.write(value,  key);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.write(value,  key);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.write(value,  key);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
147	[BUG]  [BUGGY]  w.write(Value.valueOf(value));  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.write(Value.valueOf(value));  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.write(Value.valueOf(value));	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
148	[BUG]  [BUGGY]  w.write('n');  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.write('n');  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.write('n');	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
149	[BUG]  [BUGGY]  w.write(Value.toString());  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.write(Value.toString());  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.write(Value.toString());	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
150	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
151	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
152	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
153	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
154	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
155	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
156	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
157	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
158	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
159	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
160	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
161	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
162	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
163	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
164	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
165	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
166	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
167	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
168	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
169	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  +  length  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  +  length  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  +  length  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
170	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
171	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
172	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
173	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
174	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
175	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
176	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
177	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
178	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
179	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
180	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
181	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
182	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
183	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
184	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
185	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
186	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
187	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
188	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
189	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
190	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
191	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
192	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
193	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
194	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
195	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
196	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
197	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	116	None	replace
198	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	116	None	replace
199	[BUG]  [BUGGY]  int  len  =  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	116	None	replace
200	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	116	None	replace
201	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	116	None	replace
202	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	116	None	replace
203	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
204	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
205	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
206	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
207	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
208	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
209	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
210	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  root,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  root,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  root,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
211	[BUG]  [BUGGY]  Integer  len  =  headers.get(value);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.get(value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(value);	  Integer    len    =    headers.get(key);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
212	[BUG]  [BUGGY]  Integer  len  =  headers.get(key,  value);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.get(key,  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(key,  value);	  Integer    len    =    headers.get(key);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
213	[BUG]  [BUGGY]  Integer  len  =  headers.get(key  +  1);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.get(key  +  1);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(key  +  1);	  Integer    len    =    headers.get(key);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
214	[BUG]  [BUGGY]  Integer  len  =  headers.get(key,  0);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.get(key,  0);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(key,  0);	  Integer    len    =    headers.get(key);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
215	[BUG]  [BUGGY]  Integer  len  =  headers.get(key  -  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.get(key  -  1);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(key  -  1);	  Integer    len    =    headers.get(key);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
216	[BUG]  [BUGGY]  Integer  len  =  headers.get(key).intValue();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.get(key).intValue();  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(key).intValue();	  Integer    len    =    headers.get(key);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
217	[BUG]  [BUGGY]  int  len  =  value.length();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length();  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length();	  int    len    =    key.length();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
218	[BUG]  [BUGGY]  int  len  =  key.length()  -  1;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  -  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  -  1;	  int    len    =    key.length();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
219	[BUG]  [BUGGY]  int  len  =  key.length()  +  1;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  1;	  int    len    =    key.length();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
220	[BUG]  [BUGGY]  int  len  =  name.length();  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length();  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length();	  int    len    =    key.length();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
221	[BUG]  [BUGGY]  int  len  =  key.length()  -  2;  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  -  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  -  2;	  int    len    =    key.length();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
222	[BUG]  [BUGGY]  int  len  =  w.length();  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length();  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length();	  int    len    =    key.length();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
223	[BUG]  [BUGGY]  int  len  =  key.length()  +  2;  [CE]  <identifier>  expected  [FE]                                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  2;	  int    len    =    key.length();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
224	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  10  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
225	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
226	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  10  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
227	[BUG]  [BUGGY]  int  len  =  value.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
228	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
229	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
230	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
231	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
232	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
233	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
234	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
235	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
236	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
237	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
238	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
239	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
240	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
241	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
242	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  */  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  */  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  */  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
243	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
244	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  empty,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  empty,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  empty,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
245	[BUG]  [BUGGY]  int  len  =  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
246	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
247	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
248	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
249	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
250	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
251	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    4    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
252	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  4,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  4,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  4,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    4    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
253	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    4    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
254	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    4    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
255	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  4  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  4  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  4  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    4    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
256	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    4    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
257	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
258	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
259	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
260	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
261	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
262	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
263	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
264	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
265	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
266	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
267	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
268	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
269	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
270	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
271	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
272	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
274	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(entryName,  key,  value);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  WritePaxHeadersForNonAsciiNames(entryName,  key,  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	WritePaxHeadersForNonAsciiNames(entryName,  key,  value);	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
276	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value  +  1);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value  +  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value  +  1);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
277	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(header,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(header,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(header,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
278	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
279	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
280	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
281	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
282	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
283	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  w,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  w,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  w,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
284	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */,  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */,  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */,  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
285	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  width,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  width,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  width,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
286	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */,  w,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */,  w,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */,  w,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
287	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
288	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	100	None	replace
289	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	100	None	replace
290	[BUG]  [BUGGY]  int  len  =  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	100	None	replace
291	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	100	None	replace
292	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	100	None	replace
293	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
294	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
295	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
296	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
297	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
298	[BUG]  [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
299	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
300	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
301	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
302	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
303	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
304	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(key,  value);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.indexOf(key,  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.indexOf(key,  value);	  Integer    len    =    headers.indexOf(key);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
305	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(value);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.indexOf(value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.indexOf(value);	  Integer    len    =    headers.indexOf(key);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
306	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(key,  0);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.indexOf(key,  0);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.indexOf(key,  0);	  Integer    len    =    headers.indexOf(key);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
307	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(key)+  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.indexOf(key)+  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.indexOf(key)+  1;	  Integer    len    =    headers.indexOf(key);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
308	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(key  +  1);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.indexOf(key  +  1);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.indexOf(key  +  1);	  Integer    len    =    headers.indexOf(key);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
309	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(key,  MAX_VALUE);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.indexOf(key,  MAX_VALUE);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.indexOf(key,  MAX_VALUE);	  Integer    len    =    headers.indexOf(key);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
310	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
311	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
312	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
313	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
314	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
315	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
317	[BUG]  [BUGGY]  if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
318	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  headers[i]);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  headers[i]);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
320	[BUG]  [BUGGY]  if(key!=  null  ||  value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(key!=  null  ||  value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(key!=  null  ||  value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
321	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
322	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
323	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
324	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
325	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
326	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  2  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
327	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  */*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
328	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
329	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
330	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
331	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
332	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
333	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
334	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
335	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
336	[BUG]  [BUGGY]  w.append('n');  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.append('n');  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append('n');	  w.append(value);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
337	[BUG]  [BUGGY]  w.append(key).append(value);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.append(key).append(value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append(key).append(value);	  w.append(value);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
338	[BUG]  [BUGGY]  w.append(key).append('n');  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.append(key).append('n');  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append(key).append('n');	  w.append(value);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
339	[BUG]  [BUGGY]  w.append(key,  value);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.append(key,  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append(key,  value);	  w.append(value);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
340	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */,  equals  and  newline  */  +  2  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */,  equals  and  newline  */  +  2  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */,  equals  and  newline  */  +  2  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
341	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
342	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
343	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
344	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
345	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
346	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
347	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
348	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
349	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
350	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
351	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
352	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
353	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
354	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
355	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newlines  */  +  2  *  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newlines  */  +  2  *  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newlines  */  +  2  *  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
356	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    8    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	76	None	replace
357	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    8    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	76	None	replace
358	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
360	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
361	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
362	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value  +  1);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value  +  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value  +  1);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
363	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  value,  key);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  value,  key);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  value,  key);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
364	[BUG]  [BUGGY]  int  len  =  key.length()  +  1  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  1  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  1  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
365	[BUG]  [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
366	[BUG]  [BUGGY]  int  len  =  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
367	[BUG]  [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
368	[BUG]  [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
369	[BUG]  [BUGGY]  Integer  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
370	[BUG]  [BUGGY]  Integer  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
371	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
372	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
373	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
374	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
375	[BUG]  [BUGGY]  Integer  len  =  key.length()  *  value.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  *  value.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  *  value.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
376	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
377	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
378	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  3  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  3  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  3  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
379	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    w.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
380	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    w.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
381	[BUG]  [BUGGY]  int  len  =  w.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    w.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
382	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
383	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
384	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
385	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
386	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    4    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
387	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    4    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
388	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    4    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
389	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
390	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
391	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    blank,    equals    and    newline    */    +    2    *    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
392	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  blank,  equals  and  newline  */  +  2  *  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    blank,    equals    and    newline    */    +    2    *    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
393	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    blank,    equals    and    newline    */    +    2    *    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
394	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    blank,    equals    and    newline    */    +    2    *    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
395	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  3  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    blank,    equals    and    newline    */    +    2    *    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
396	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  8  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  8  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  8  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    blank,    equals    and    newline    */    +    2    *    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
397	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
398	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
399	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
400	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
401	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
402	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
403	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
404	[BUG]  [BUGGY]  Integer  len  =  value.length()  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
405	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  10  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
406	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
407	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
408	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
409	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  10  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
410	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
411	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
412	[BUG]  [BUGGY]  if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
413	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
414	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
415	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
416	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
417	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(key,  value);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  WritePaxHeadersForNonAsciiNames(key,  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	WritePaxHeadersForNonAsciiNames(key,  value);	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
418	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value  +  1);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value  +  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value  +  1);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
419	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(value,  key);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(value,  key);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(value,  key);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
420	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
421	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
422	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
423	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
424	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
425	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
426	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
427	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
428	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
429	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
430	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
431	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
432	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
433	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
434	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
435	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
436	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
437	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
438	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
439	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    8    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	113	None	replace
440	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    8    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	113	None	replace
441	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
442	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
443	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
444	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
445	[BUG]  [BUGGY]  int  len  =  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
446	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
447	[BUG]  [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    name.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
448	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  value,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    name.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
449	[BUG]  [BUGGY]  int  len  =  key.length()  +  name.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  name.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  name.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    name.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
450	[BUG]  [BUGGY]  w.setLength(value);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.setLength(value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.setLength(value);	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
451	[BUG]  [BUGGY]  w.setLength(0);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.setLength(0);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.setLength(0);	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
452	[BUG]  [BUGGY]  w.append(entryName);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.append(entryName);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append(entryName);	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
453	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    6    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
454	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    6    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
455	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    6    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
456	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
457	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
458	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
459	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
460	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
461	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
462	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
463	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
464	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
465	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
466	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	115	None	replace
467	[BUG]  [BUGGY]  int  len  =  headers.length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  headers.length;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.length;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	101	None	replace
468	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
469	[BUG]  [BUGGY]  int  len  =  headers.length();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  headers.length();  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.length();	  int    len    =    key.length();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
470	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
471	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
472	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
473	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
474	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
475	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
476	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
477	[BUG]  [BUGGY]  int  len  =  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
478	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
479	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    w.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
480	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
481	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
482	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
483	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
484	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
485	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
486	[BUG]  [BUGGY]  int  len  =  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
487	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
488	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
489	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
490	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
491	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    w.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	99	None	replace
492	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
493	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
494	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  4  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	116	None	replace
495	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
496	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
497	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  2  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  2  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  2  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
498	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
499	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    name.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
500	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    name.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
501	[BUG]  [BUGGY]  w.verifyValueWrite(value);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.verifyValueWrite(value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.verifyValueWrite(value);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
502	[BUG]  [BUGGY]  w.verifyValueWrite( "write  key  value ");  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.verifyValueWrite( "write  key  value ");  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.verifyValueWrite( "write  key  value ");	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
503	[BUG]  [BUGGY]  int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
504	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
505	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
506	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
507	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  3  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
508	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
509	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
510	[BUG]  [BUGGY]  int  len  =  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    blank,    equals    and    newline    */    +    2    *    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
511	[BUG]  [BUGGY]  Integer  len  =  headers.getLength()  +  3;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.getLength()  +  3;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.getLength()  +  3;	  Integer    len    =    headers.getLength();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
512	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
513	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
514	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  this  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  this  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  this  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
515	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
516	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
517	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
518	[BUG]  [BUGGY]  if(value  ==  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value  ==  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value  ==  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
519	[BUG]  [BUGGY]  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
520	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
521	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
522	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
523	[BUG]  [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
524	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
525	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals,  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals,  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals,  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
526	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
527	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
528	[BUG]  [BUGGY]  int  len  =  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
529	[BUG]  [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
530	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
531	[BUG]  [BUGGY]  int  len  =  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
532	[BUG]  [BUGGY]  int  len  =  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
533	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
534	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    8    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	113	None	replace
535	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    8    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	113	None	replace
536	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  7  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  7  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  7  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    6    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
537	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    6    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
538	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(value,  key);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(value,  key);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(value,  key);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
539	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
540	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    4    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
541	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
542	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
543	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
544	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
545	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
546	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  */  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  */  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  */  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
547	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
548	[BUG]  [BUGGY]  int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
549	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
550	[BUG]  [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  name);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  name);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  name);  }	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
551	[BUG]  [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(value);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(value);  }	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
552	[BUG]  [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  value);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  value);  }	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
553	[BUG]  [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames);  }	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
554	[BUG]  [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  pex);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  pex);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(paxHeadersForNonAsciiNames,  pex);  }	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
555	[BUG]  [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(name,  value);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(name,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  w.append(key);  }  else  {  writePaxHeadersForNonAsciiNames(name,  value);  }	  w.append(key);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
556	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
557	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  this  line  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  this  line  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  this  line  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
558	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
559	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
560	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
561	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
562	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
563	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  8  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  8  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  8  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
564	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  */  guess  9  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  */  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  */  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
565	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
566	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
567	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
568	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
569	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
570	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
571	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
572	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  //*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  //*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  //*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
573	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
574	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
575	[BUG]  [BUGGY]  Integer  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
576	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
577	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
578	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
579	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
580	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  3  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
581	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  2  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  2  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  2  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
582	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
583	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  +  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  +  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  +  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
584	[BUG]  [BUGGY]  Integer  len  =  headers.get(key  +  value);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.get(key  +  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(key  +  value);	  Integer    len    =    headers.get(key);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
585	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
586	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
587	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
588	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  +  10  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  +  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  +  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
589	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  10  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
590	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(key  +  value);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.indexOf(key  +  value);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.indexOf(key  +  value);	  Integer    len    =    headers.indexOf(key);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
591	[BUG]  [BUGGY]  Integer  len  =  headers.lastIndexOf(key);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.lastIndexOf(key);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.lastIndexOf(key);	  Integer    len    =    headers.indexOf(key);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
592	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
593	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
594	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
595	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  b,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  b,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  b,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
596	[BUG]  [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
597	[BUG]  [BUGGY]  int  len  =  key.length()  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
598	[BUG]  [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
599	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    white    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
600	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
601	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
602	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  10  +  2  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  10  +  2  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  10  +  2  /*  guess  10  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
603	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
604	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
605	[BUG]  [BUGGY]  int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
606	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  1000  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  1000  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  1000  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
607	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	89	None	replace
608	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
609	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
610	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
611	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  3  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
612	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
613	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
614	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
615	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  3  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
616	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
617	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
618	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    empty,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
619	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    empty,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
620	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
621	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
622	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
623	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i],  key);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i],  key);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i],  key);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
624	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
625	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
626	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
627	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
628	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
629	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
630	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
631	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  2  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
632	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  10  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
633	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
634	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
635	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
636	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
637	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
638	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  5  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
639	[BUG]  [BUGGY]  w.append(Key);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.append(Key);  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append(Key);	  w.append(value);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
640	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
641	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  2  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
642	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  10  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
643	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
644	[BUG]  [BUGGY]  int  len  =  value.length()  /*  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  /*  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  /*  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
645	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
646	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
647	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
648	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	111	None	replace
649	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
650	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
651	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  5  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
652	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	100	None	replace
653	[BUG]  [BUGGY]  if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
654	[BUG]  [BUGGY]  if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
655	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
656	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    fill    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
657	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
658	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  2  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  2  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  2  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
659	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
660	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    bucket    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
661	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  10  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
662	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
663	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
664	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  white  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  white  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  white  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
665	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  */  +  2  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
666	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(entryName!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
667	[BUG]  [BUGGY]  if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
668	[BUG]  [BUGGY]  if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
669	[BUG]  [BUGGY]  if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
670	[BUG]  [BUGGY]  if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  value,  key);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  value,  key);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(key!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  value,  key);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(entryName,    key,    value);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
671	[BUG]  [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
672	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    blank,    equals    and    newline    */    +    2    *    guess    9    */;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
673	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
674	[BUG]  [BUGGY]  int  len  =  name.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
675	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  8  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  8  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  8  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    guess    9    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
676	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  value  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  value  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  value  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    w.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	99	None	replace
677	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  3  *  blank,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
678	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  -*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  -*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  3  -*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
679	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  10  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    10    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	114	None	replace
680	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
681	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  10  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  10  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  10  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	112	None	replace
682	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
683	[BUG]  [BUGGY]  if(value!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
684	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
685	[BUG]  [BUGGY]  if(value!=  null  &&  headers.containsKey(key))  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  headers.containsKey(key))  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  headers.containsKey(key))  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(headers[i]);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
686	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  4  *  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  4  *  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  4  *  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	89	None	replace
687	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	89	None	replace
688	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
689	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
690	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  10  +  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  10  +  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  10  +  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
691	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
692	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket    */,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
693	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
694	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  white  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
695	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
696	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
697	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
698	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    4    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
699	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  *  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  *  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  *  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
700	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
701	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
702	[BUG]  [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
703	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    +    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
704	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
705	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  whitespace,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  whitespace,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  whitespace,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
706	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    */;    	non-compiled	[CE]  <identifier>  expected	88	None	replace
707	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
708	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
709	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
710	[BUG]  [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
711	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  *  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	116	None	replace
712	[BUG]  [BUGGY]  if(value!=  null  &&  key.length()  >  0)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  key.length()  >  0)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  key.length()  >  0)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
713	[BUG]  [BUGGY]  if(key!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(key!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(key!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  value.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
714	[BUG]  [BUGGY]  if(key!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(key!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(key!=  null)  {  for(String  value  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
715	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length());  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length());  }	  if(value!=    null)    {    for(String    key    :    headers.keySet())    {    name    =    key.substring(0,    value.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
716	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  -  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  -  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  -  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
717	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  guess  10  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  guess  10  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  guess  10  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
718	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  guess  9  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
719	[BUG]  [BUGGY]  Integer  len  =  headers.get(key).length();  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.get(key).length();  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(key).length();	  Integer    len    =    headers.get(key);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
720	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
721	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
722	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  wBuf,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  wBuf,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  wBuf,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
723	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
724	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  */  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  10  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    */    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
725	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  */  +  1  /*  guess  10  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10  */  +  1  /*  guess  10  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
726	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
727	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
728	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  check  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  check  blank,  equals  and  newline  */  +  1;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  check  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
729	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(h);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
730	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  value);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
731	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  w);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  w);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  w);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(w);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
732	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
733	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
734	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
735	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  buckets  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  buckets  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  buckets  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
736	[BUG]  [BUGGY]  if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  key.length()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
737	[BUG]  [BUGGY]  if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null  &&  key.length()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
738	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(header,  value);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(header,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(header,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
739	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  value);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  value);  }  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers,  value);  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    writePaxHeadersForNonAsciiNames(key,    value);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
740	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  w.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
741	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  w.length()  +  key.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
742	[BUG]  [BUGGY]  int  len  =  bucket.length()  +  key.length()  /*  value  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  bucket.length()  +  key.length()  /*  value  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  bucket.length()  +  key.length()  /*  value  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
743	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  8  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    8    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
744	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
745	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  blank,  equals  and  newline  */  +  3  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  blank,  equals  and  newline  */  +  3  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  blank,  equals  and  newline  */  +  3  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
746	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  white,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  white,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  *  white,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
747	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
748	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  white,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  white,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  white,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
749	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
750	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
751	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
752	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
753	[BUG]  [BUGGY]  w.append(key).append( "n ");  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  w.append(key).append( "n ");  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append(key).append( "n ");	  w.append(value);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
754	[BUG]  [BUGGY]  Integer  len  =  key.length()  *  value.length()  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  key.length()  *  value.length()  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  *  value.length()  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
755	[BUG]  [BUGGY]  Integer  len  =  headers.size()  -  4;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  Integer  len  =  headers.size()  -  4;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.size()  -  4;	  Integer    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
756	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
757	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    guess    9    */    +    1    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
758	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  empty,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  empty,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  *  empty,  equals  and  newline  */  +  2  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    empty,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	97	None	replace
759	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  3  *  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  3  *  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  3  *  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
760	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  -*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  -*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  -*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
761	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  3  *  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  3  *  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  *  *  blank,  equals  and  newline  */  +  3  *  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /    2    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
762	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
763	[BUG]  [BUGGY]  int  len  =  key.length()  *  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  *  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  *  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
764	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  10  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  10  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    last    line    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
765	[BUG]  [BUGGY]  int  len  =  headers.size()  -  3;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();      [BUGGY]  int  len  =  headers.size()  -  3;  [BUGGY]      +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.size()  -  3;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	101	None	replace
