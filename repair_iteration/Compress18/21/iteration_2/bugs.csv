bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
4	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
5	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
6	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
7	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  Guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    Guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  1  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
12	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1;  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  blank,  equals  and  newline  */  +  2  *  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
32	[BUG]  [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
34	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
35	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
37	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
38	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
39	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
40	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
41	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  4  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
42	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  w.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
44	[BUG]  [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  name.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
46	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
49	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
50	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  9  */;  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  9  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  2  /*  guess  9  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
51	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
52	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
53	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
54	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
56	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
57	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(headers[i]);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(String  key  :  headers.keySet())  {  name  =  key.substring(0,  value.length()  -  1);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
60	[BUG]  [BUGGY]  w.write(key);  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  w.write(key);  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.write(key);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
61	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(w,  key,  value);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
62	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [CE]  <identifier>  expected  [FE]                              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(entryName,  key,  value);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
63	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [CE]  <identifier>  expected  [FE]                                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  writePaxHeadersForNonAsciiNames(key,  value);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
66	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
67	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
68	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9,  equals  and  newlines  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
69	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
70	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  */  white,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
71	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  4  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
73	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  +  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
74	[BUG]  [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
75	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
77	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
78	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  6  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    4    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
79	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
80	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
81	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
82	[BUG]  [BUGGY]  Integer  len  =  headers.get(key);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  headers.get(key);  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.get(key);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
83	[BUG]  [BUGGY]  Integer  len  =  headers.size();  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  headers.size();  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.size();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
84	[BUG]  [BUGGY]  Integer  len  =  headers.getLength();  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  headers.getLength();  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.getLength();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
85	[BUG]  [BUGGY]  w.append(value);  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  w.append(value);  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append(value);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
86	[BUG]  [BUGGY]  w.append(key);  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  w.append(key);  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	w.append(key);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
87	[BUG]  [BUGGY]  int  len  =  key.length();  [CE]  <identifier>  expected  [FE]                              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length();  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
88	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
89	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
90	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
93	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
94	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    value.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
95	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  4  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
96	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */  +  2  /*  guess  8  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
97	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2  /*  empty,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
98	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /  2,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    2    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
99	[BUG]  [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  w.length()  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    value.length()    +    key.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
100	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newlines    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
101	[BUG]  [BUGGY]  int  len  =  headers.size();  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  headers.size();  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  headers.size();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
102	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(key);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  headers.indexOf(key);  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  headers.indexOf(key);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
103	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  fill  blank,  equals  and  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
104	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  newline  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
105	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  last  line  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    1    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
106	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	Integer  len  =  key.length()  +  value.length()  /*  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  Integer    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
107	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  2  /*  bucket  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
108	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  1  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
109	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  bucket  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
110	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  guess  9  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
111	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    bucket,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
112	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */  +  3  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    3    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
113	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  white,  equals  and  newline  */  +  8  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    white,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
114	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  *  10  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    *    3    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
115	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  100  */;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  100  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  <  actual  length  <  100  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    100    */;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
116	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();    [BUGGY]  int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;  [BUGGY]    +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	int  len  =  key.length()  +  value.length()  /*  guess  9  */  +  2  /*  guess  9  <  actual  length  <  10  */;	  int    len    =    key.length()    +    value.length()    /*    blank,    equals    and    newline    */    +    2    /*    guess    9    <    actual    length    <    10    */;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
