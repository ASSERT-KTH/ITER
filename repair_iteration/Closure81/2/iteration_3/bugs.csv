bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  irNode.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  irNode.getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild(),  irNode.getString());	  irNode.setCharno(irNode.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]  irNode.setCharno(irNode,  irNode.getLastChild().getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode,  irNode.getLastChild().getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode,  irNode.getLastChild().getString());	  irNode.setCharno(irNode.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
3	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getCharno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getCharno());	  irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
4	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getAbsolutePosition());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getAbsolutePosition());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getAbsolutePosition());	  irNode.setLineno(irNode.getFirstChild().getLineno());    node.setCharno(irNode.getAbsolutePosition());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
5	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getAbsolutePosition());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getAbsolutePosition());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	node.setLineno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getAbsolutePosition());	  irNode.setLineno(irNode.getFirstChild().getLineno());    node.setCharno(irNode.getAbsolutePosition());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
6	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());  node.setCharno(irNode.getAbsolutePosition());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());  node.setCharno(irNode.getAbsolutePosition());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());  node.setCharno(irNode.getAbsolutePosition());	  irNode.setLineno(irNode.getFirstChild().getLineno());    node.setCharno(irNode.getAbsolutePosition());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
7	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getAbsolutePosition());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getAbsolutePosition());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getAbsolutePosition());	  irNode.setLineno(irNode.getFirstChild().getLineno());    node.setCharno(irNode.getAbsolutePosition());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
8	[BUG]  [BUGGY]  irNode.setCharno(irNode,  jsDocInfo.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode,  jsDocInfo.getLastChild().getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode,  jsDocInfo.getLastChild().getCharno());	  irNode.setCharno(jsDocInfo.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
9	[BUG]  [BUGGY]  irNode.setCharno(jsDocInfo.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(jsDocInfo.getLastChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(jsDocInfo.getLastChild().getLineno());	  irNode.setCharno(jsDocInfo.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
10	[BUG]  [BUGGY]  irNode.setCharno(irInfo.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irInfo.getLastChild().getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irInfo.getLastChild().getCharno());	  irNode.setCharno(jsDocInfo.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
11	[BUG]  [BUGGY]  jsDocInfo.setCharno(irNode.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  jsDocInfo.setCharno(irNode.getLastChild().getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	jsDocInfo.setCharno(irNode.getLastChild().getCharno());	  irNode.setCharno(jsDocInfo.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
12	[BUG]  [BUGGY]  irNode.setCharno(irNode,  node.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode,  node.getLastChild().getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode,  node.getLastChild().getCharno());	  irNode.setCharno(irNode,    irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
13	[BUG]  [BUGGY]  irNode.setCharno(irNode,  irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode,  irNode.getLastChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode,  irNode.getLastChild().getLineno());	  irNode.setCharno(irNode,    irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
14	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild(),  irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	jsDocInfo.setLineno(irNode.getFirstChild(),  irNode.getLineno());	  jsDocInfo.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
15	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode,  irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  jsDocInfo.setLineno(irNode,  irNode.getFirstChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	jsDocInfo.setLineno(irNode,  irNode.getFirstChild().getLineno());	  jsDocInfo.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
16	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild(),  node.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	jsDocInfo.setLineno(irNode.getFirstChild(),  node.getLineno());	  jsDocInfo.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
17	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getSourceName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getSourceName());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getSourceName());	  irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
18	[BUG]  [BUGGY]  irNode.setCharno(irNode,  irNode.getFirstChild().getSourceName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode,  irNode.getFirstChild().getSourceName());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode,  irNode.getFirstChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
19	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getSourceName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild().getSourceName());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
20	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getSourceName());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getSourceName());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getSourceName());	  irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
21	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  node.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild(),  node.getLineno());	  irNode.setCharno(irNode.getLastChild(),    node.getCharno());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
22	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild(),  irNode.getLineno());	  irNode.setCharno(irNode.getLastChild(),    node.getCharno());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
23	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  node.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  node.getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild(),  node.getString());	  irNode.setCharno(irNode.getLastChild(),    node.getCharno());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
24	[BUG]  [BUGGY]  irNode.setString(irNode.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setString(irNode.getFirstChild().getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setString(irNode.getFirstChild().getString());	  irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
25	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild);	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
26	[BUG]  [BUGGY]  irNode.setFirstChild(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setFirstChild(irNode.getFirstChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setFirstChild(irNode.getFirstChild().getLineno());	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
27	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getFirstChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getFirstChild());	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
28	[BUG]  [BUGGY]  irNode.setLineno(irNode,  irNode.getLastChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode,  irNode.getLastChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode,  irNode.getLastChild());	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
29	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLastChild());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLastChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getLastChild());	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
30	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(jsDocInfo.getLastChild());	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
31	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLineno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
32	[BUG]  [BUGGY]  irNode.setLineno(irNode,  jsDocInfo.getLineno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode,  jsDocInfo.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode,  jsDocInfo.getLineno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
33	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  jsDocInfo.setLineno(irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	jsDocInfo.setLineno(irNode.getLineno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
34	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
35	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  jsDocInfo.getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  jsDocInfo.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild(),  jsDocInfo.getLineno());	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
36	[BUG]  [BUGGY]  irNode.setLineno(irNode,  irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode,  irNode.getFirstChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode,  irNode.getFirstChild().getLineno());	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
37	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild(),  irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(jsDocInfo.getFirstChild(),  irNode.getLineno());	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
38	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  jsDocInfo.getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  jsDocInfo.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild(),  jsDocInfo.getLineno());	  irNode.setCharno(irNode.getFirstChild(),    irNode.getLineno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
39	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getString());	  irNode.setLineno(irNode.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
40	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild(),  node.getString());	  irNode.setLineno(irNode.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
41	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  node.getCharno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  node.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild().getLineno(),  node.getCharno());	  irNode.setLineno(irNode.getLastChild().getLineno(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
42	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  irNode.getString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  irNode.getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild().getLineno(),  irNode.getString());	  irNode.setLineno(irNode.getLastChild().getLineno(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
43	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getCharno());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getCharno());	  irNode.setLineno(irNode.getLastChild().getLineno(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
44	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getString());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
45	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChilil);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChilil);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChilil);	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
46	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno()  +  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getLineno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
47	[BUG]  [BUGGY]  irNode.setLineno(irNode,  irNode.getLastChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode,  irNode.getLastChild().getLineno()  +  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode,  irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
48	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getCharno());	  irNode.setCharno(irNode.getLastChild(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
49	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno()  +  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
50	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getLineno()  +  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
51	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getLastChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getLastChild().getLineno()  +  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno(),  irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
52	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild(),  irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	jsDocInfo.setLineno(irNode.getLastChild(),  irNode.getLineno());	  jsDocInfo.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
53	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode,  irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  jsDocInfo.setLineno(irNode,  irNode.getLastChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	jsDocInfo.setLineno(irNode,  irNode.getLastChild().getLineno());	  jsDocInfo.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
54	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild(),  node.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	jsDocInfo.setLineno(irNode.getLastChild(),  node.getLineno());	  jsDocInfo.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
55	[BUG]  [BUGGY]  irNode.setLineno(irNode,  jsDocInfo.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode,  jsDocInfo.getLastChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode,  jsDocInfo.getLastChild().getLineno());	  irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
56	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild(),  irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(jsDocInfo.getLastChild(),  irNode.getLineno());	  irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
57	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());	  irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
58	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().get  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().get  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().get	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  ')'  expected	20	None	replace
59	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  ')'  expected	20	None	replace
60	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
61	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
62	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild(),  node.getLineno());	  irNode.setCharno(irNode.getFirstChild(),    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
63	[BUG]  [BUGGY]  irNode.setCharno(irNode,  irNode.getFirstChild().getLineno());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode,  irNode.getFirstChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode,  irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode,    node.getFirstChild().getLineno());    	non-compiled	[CE]  orphaned  case	17	None	replace
64	[BUG]  [BUGGY]  irNode.setCharno(node.getLastChild(),  irNode.getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(node.getLastChild(),  irNode.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(node.getLastChild(),  irNode.getCharno());	  irNode.setCharno(irNode.getLastChild(),    node.getCharno());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
65	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  NodeUtil.getCharno(node.getCharno()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  NodeUtil.getCharno(node.getCharno()));  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild(),  NodeUtil.getCharno(node.getCharno()));	  irNode.setCharno(irNode.getLastChild(),    node.getCharno());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
66	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getLineno(),  irNode.getCharno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getLineno(),  irNode.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  node.getLineno(),  irNode.getCharno());	  irNode.setLineno(irNode.getLastChild().getLineno(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
67	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
68	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().get  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().get  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().get	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  ')'  expected	20	None	replace
69	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  jsDocInfo.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  jsDocInfo.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild(),  jsDocInfo.getCharno());	  irNode.setCharno(irNode.getLastChild(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
70	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChild  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChild  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChild	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  ')'  expected	21	None	replace
71	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChild);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChild);  }  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChild);  }	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
72	[BUG]  [BUGGY]  irNode.setCharno(node.getFirstChild(),  irNode.getLineno());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(node.getFirstChild(),  irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(node.getFirstChild(),  irNode.getLineno());	  irNode.setCharno(irNode.getFirstChild(),    node.getLineno());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  irNode.setCharno(jsDocInfo.getLastChild(),  irNode.getCharno());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(jsDocInfo.getLastChild(),  irNode.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(jsDocInfo.getLastChild(),  irNode.getCharno());	  irNode.setCharno(jsDocInfo.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
74	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChilil());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChilil());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChilil());	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
75	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChililil());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChililil());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChililil());	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
76	[BUG]  [BUGGY]  Node.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  Node.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	Node.setLineno(irNode.getFirstChild().getLineno());	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
77	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChilild());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChilild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChilild());	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
78	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getLineno()  +  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  node.getLineno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
79	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  /  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  /  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild().getLineno()  /  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
80	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(!irNode.getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(!irNode.getLineno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
81	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getSourceName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(jsDocInfo.getSourceName());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(jsDocInfo.getSourceName());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
82	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getCharno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  node.getCharno());	  irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
83	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode);	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
84	[BUG]  [BUGGY]  irNode.setLineno(irNode,  node.getLastChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode,  node.getLastChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode,  node.getLastChild());	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
85	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild());	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
86	[BUG]  [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild();  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	IRIrNode  irNode  =  irNode.getLastChild();	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
87	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild(),  node.getString());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
88	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getLineno()  +  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild(),  node.getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
89	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  /  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  /  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  /  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
90	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  NodeUtil.getLineno(irNode.getFirstChild()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  NodeUtil.getLineno(irNode.getFirstChild()));  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild(),  NodeUtil.getLineno(irNode.getFirstChild()));	  irNode.setCharno(irNode.getFirstChild(),    irNode.getLineno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
91	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  NodeUtil.getLineno(irNode));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  NodeUtil.getLineno(irNode));  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild(),  NodeUtil.getLineno(irNode));	  irNode.setCharno(irNode.getFirstChild(),    irNode.getLineno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
92	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno()	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  ')'  expected	20	None	replace
93	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLine  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLine  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLine	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  ')'  expected	20	None	replace
94	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getLastChild  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getLastChild  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getLastChild	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  ')'  expected	21	None	replace
95	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  charno,  irNode.getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  charno,  irNode.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild(),  charno,  irNode.getCharno());	  irNode.setCharno(irNode.getLastChild(),    node.getCharno());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
96	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  null,  irNode.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  null,  irNode.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getLastChild(),  null,  irNode.getCharno());	  irNode.setCharno(irNode.getLastChild(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
97	[BUG]  [BUGGY]  irNode.setCharno(jsDocInfo.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(jsDocInfo.getFirstChild().getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(jsDocInfo.getFirstChild().getCharno());	  irNode.setCharno(jsDocInfo.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
98	[BUG]  [BUGGY]  irNode.setCharno(irDocInfo.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irDocInfo.getLastChild().getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irDocInfo.getLastChild().getCharno());	  irNode.setCharno(jsDocInfo.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
99	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getCharno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(jsDocInfo.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(jsDocInfo.getCharno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
100	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLastChild());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLastChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getLastChild());	  irNode.setCharno(irNode.getFirstChild(),    irNode.getLineno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
101	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getString());	  irNode.setCharno(irNode.getFirstChild(),    irNode.getLineno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
102	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getSourceString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getSourceString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode.getFirstChild().getSourceString());	  irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
103	[BUG]  [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getSourceName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getSourceName());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode,  node.getFirstChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
104	[BUG]  [BUGGY]  irNode.setLineno(IrNode.getLastChild());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(IrNode.getLastChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(IrNode.getLastChild());	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
105	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getLastChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(!irNode.getLastChild());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(!irNode.getLastChild());	  irNode.setLineno(irNode.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
106	[BUG]  [BUGGY]  irNode.setCharno(jsDocInfo.getLastChild().getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(jsDocInfo.getLastChild().getString());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(jsDocInfo.getLastChild().getString());	  irNode.setCharno(irNode.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
107	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  *  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  *  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild().getLineno()  *  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
108	[BUG]  [BUGGY]  irNode.setCharno(irNode,  irNode.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setCharno(irNode,  irNode.getFirstChild().getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setCharno(irNode,  irNode.getFirstChild().getCharno());	  irNode.setCharno(irNode,    irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
109	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	node.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    node.setCharno(irNode.getAbsolutePosition());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
110	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChil  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChil  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  irNode.setLineno(irNode.getLastChil	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  ')'  expected	18	None	replace
111	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getLastChil  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getLastChil  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  irNode.setLineno(irNode.getLastChil	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  ')'  expected	18	None	replace
112	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastChil  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastChil  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.SCRIPT)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastChil	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  ')'  expected	18	None	replace
113	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastCh  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastCh  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	if(irNode.getType()  ==  Token.SCRIPT)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastCh	  if(irNode.getType()    ==    Token.FUNCTION)    {    irNode.setLineno(irNode.getFirstChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChil    	non-compiled	[CE]  ')'  expected	18	None	replace
114	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  jsDocInfo.getCharno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  jsDocInfo.getCharno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild().getLineno(),  jsDocInfo.getCharno());	  irNode.setLineno(irNode.getLastChild().getLineno(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
115	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  charno);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  charno);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode.getLastChild().getLineno(),  charno);	  irNode.setLineno(irNode.getLastChild().getLineno(),    irNode.getCharno());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
116	[BUG]  [BUGGY]  irNode.setLineno(irNode,  irNode.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(irNode,  irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(irNode,  irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
117	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());      [BUGGY]  irNode.setLineno(!irNode.getLastChild().getLineno());  [BUGGY]      }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	216	216	1	replace	irNode.setLineno(!irNode.getLastChild().getLineno());	  irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
