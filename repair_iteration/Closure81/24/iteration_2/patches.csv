bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  node  =  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.cloneTree();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.cloneTree();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
2	[BUG]  [BUGGY]  Node  node  =  irNode.removeFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.removeFirstChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.removeFirstChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
3	[BUG]  [BUGGY]  Node  node  =  irNode.getAncestor(1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.getAncestor(1);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.getAncestor(1);	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
4	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  irNode.getSourceName(),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  irNode.getSourceName(),  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  irNode.getSourceName(),  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
5	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  irNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  irNode);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
6	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getName(),  config,  irNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getName(),  config,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getName(),  config,  irNode);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
7	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter,  irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter,  irNode);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
8	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getRelativeName(),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getRelativeName(),  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getRelativeName(),  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
9	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(node.getSourceName(),  config,  irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(node.getSourceName(),  config,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(node.getSourceName(),  config,  irNode);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
10	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  irNode.getName().equals(sourceString))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  irNode.getName().equals(sourceString))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  irNode.getName().equals(sourceString))  {	  if(irNode.getComments()!=    null    &&    irNode.getName().equals(sourceString))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
11	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  ||  irNode.getName().equals(sourceString))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  ||  irNode.getName().equals(sourceString))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  ||  irNode.getName().equals(sourceString))  {	  if(irNode.getComments()!=    null    &&    irNode.getName().equals(sourceString))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
12	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  &&  irNode.getName().equals(sourceString))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  &&  irNode.getName().equals(sourceString))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  &&  irNode.getName().equals(sourceString))  {	  if(irNode.getComments()!=    null    &&    irNode.getName().equals(sourceString))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
13	[BUG]  [BUGGY]  if(irNode.getName()!=  null  &&  irNode.getComments().equals(sourceString))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getName()!=  null  &&  irNode.getComments().equals(sourceString))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getName()!=  null  &&  irNode.getComments().equals(sourceString))  {	  if(irNode.getComments()!=    null    &&    irNode.getName().equals(sourceString))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
14	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  node.getName().equals(sourceString))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  node.getName().equals(sourceString))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  node.getName().equals(sourceString))  {	  if(irNode.getComments()!=    null    &&    irNode.getName().equals(sourceString))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
15	[BUG]  [BUGGY]  if  (node.getComments()  ==  null  ||  irNode.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node.getComments()  ==  null  ||  irNode.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node.getComments()  ==  null  ||  irNode.getComments()!=  null)  {	  if    (irNode.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
16	[BUG]  [BUGGY]  Node  node  =  irNode.getPrevious();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.getPrevious();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.getPrevious();	  Node    node    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
17	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getName().startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getName().startsWith( "/ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getName().startsWith( "/ "))  {	  if(node.getComments()!=    null    &&    node.getName().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
18	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ".js "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().startsWith( ".js "))  {	  if(node.getComments()!=    null    &&    node.getName().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().startsWith( "/ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getName().startsWith( "/ "))  {	  if(node.getComments()!=    null    &&    node.getName().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( "./ "))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( "./ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().startsWith( "./ "))  {	  if(node.getComments()!=    null    &&    node.getName().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ".java "))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ".java "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().startsWith( ".java "))  {	  if(node.getComments()!=    null    &&    node.getName().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  if(node.getComments()  ==  null  ||  node.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  ||  node.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  ||  node.getComments().length  >  0)  {	  if(node.getComments()!=    null    ||    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
23	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getComments().length  <  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getComments().length  <  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getComments().length  <  0)  {	  if(node.getComments()!=    null    ||    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
24	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getComments().length  >  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getComments().length  >  1)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getComments().length  >  1)  {	  if(node.getComments()!=    null    ||    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
25	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getComments()!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
26	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getComments()!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
27	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getComments()!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
28	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getComments()!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
29	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getComments()!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
30	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  node.getComments().length  >  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  node.getComments().length  >  1)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  node.getComments().length  >  1)  {	  if(node.getComments()!=    null    &&    node.getComments().length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
31	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getComments().length  >  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getComments().length  >  1)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getComments().length  >  1)  {	  if(node.getComments()!=    null    &&    node.getComments().length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
32	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  >  2)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  >  2)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getComments().length  >  2)  {	  if(node.getComments()!=    null    &&    node.getComments().length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
33	[BUG]  [BUGGY]  if  (node  ==  null  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node  ==  null  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node  ==  null  ||  node.getComments()!=  null)  {	  if    (node!=    null    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
34	[BUG]  [BUGGY]  if(node.getComments()  ==  null  ||  NodeUtil.isFunction(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  ||  NodeUtil.isFunction(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  ||  NodeUtil.isFunction(node.getParentNode()))  {	  if(node.getComments()!=    null    ||    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
35	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  ||  NodeUtil.isFunction(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  ||  NodeUtil.isFunction(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  ||  NodeUtil.isFunction(node.getParentNode()))  {	  if(node.getComments()!=    null    ||    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
36	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getNextNode()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getNextNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getNextNode()))  {	  if(node.getComments()!=    null    ||    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
37	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getFirstChild()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getFirstChild()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isExpressionNode(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
38	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getNextNode()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getNextNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getNextNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isExpressionNode(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
39	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isExpressionNode(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isExpressionNode(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  NodeUtil.isExpressionNode(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isExpressionNode(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
40	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isExpressionNode(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
41	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isExpressionNode(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
42	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getStringNode()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getStringNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getStringNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isExpressionNode(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
43	[BUG]  [BUGGY]  if  (node!=  null  ||  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node!=  null  ||  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node!=  null  ||  node.getComments()  ==  null)  {	  if    (node!=    null    &&    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
44	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getParent()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getParent()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getParent()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
45	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isName(node.getNext()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isName(node.getNext()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  NodeUtil.isName(node.getNext()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
46	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getFirstChild()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getFirstChild()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
47	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isName(node.getNext()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isName(node.getNext()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  NodeUtil.isName(node.getNext()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
48	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNext()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNext()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNext()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
49	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getPrevious()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getPrevious()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getPrevious()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  rootNodeJsDocHolder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  rootNodeJsDocHolder);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  node);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  node);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rootNodeJsDocHolder,  irNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rootNodeJsDocHolder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  rootNodeJsDocHolder,  irNode);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  errorReporter,  fileLevelJsDocBuilder,  irNode);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  errorReporter,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  errorReporter,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
57	[BUG]  [BUGGY]  if  (irNode!=  null  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (irNode!=  null  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (irNode!=  null  ||  node.getComments()!=  null)  {	  if    (irNode!=    null    &&    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
58	[BUG]  [BUGGY]  if  (irNode  ==  null  &&  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (irNode  ==  null  &&  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (irNode  ==  null  &&  node.getComments()!=  null)  {	  if    (irNode!=    null    &&    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
59	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getParentNode())||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getParentNode())||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getParentNode())||  node.getType()  ==  Token.FUNCTION)  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode())||    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
60	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getFirstChild())||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getFirstChild())||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getFirstChild())||  node.getType()  ==  Token.FUNCTION)  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode())||    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
61	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNextNode())||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNextNode())||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNextNode())||  node.getType()  ==  Token.FUNCTION)  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode())||    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
62	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNext())||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNext())||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNext())||  node.getType()  ==  Token.FUNCTION)  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode())||    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
63	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getParentNode())||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getParentNode())||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getParentNode())||  node.getType()  ==  Token.FUNCTION)  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode())||    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
64	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNameNode())||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNameNode())||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getNameNode())||  node.getType()  ==  Token.FUNCTION)  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode())||    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
65	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getComments()  ==  null)  {	  if(node.getComments()!=    null    ||    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
66	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  ||  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  ||  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  ||  node.getComments()  ==  null)  {	  if(node.getComments()!=    null    ||    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
67	[BUG]  [BUGGY]  if(node.getComments()  ==  null  ||  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  ||  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  ||  node.getComments()  ==  null)  {	  if(node.getComments()!=    null    ||    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getNextNode()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getNextNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getNextNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNextNode()))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
69	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getNextNode()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getNextNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getNextNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNextNode()))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
70	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getPreviousNode()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getPreviousNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getPreviousNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNextNode()))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
71	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/.js "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/.js "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "/.js "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
72	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".js "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".js "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getName().endsWith( ".js "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "- "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "- "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  ||  node.getComments()!=  null)  {	  if(node.getComments()    ==    null    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
75	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getParent()!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getParent()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getParent()!=  null)  {	  if(node.getComments()    ==    null    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
76	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  node.getComments()!=  null)  {	  if(irNode.getComments()!=    null    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
77	[BUG]  [BUGGY]  if(node.isParsed()  &&  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.isParsed()  &&  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.isParsed()  &&  node.getComments()!=  null)  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
78	[BUG]  [BUGGY]  if(node.isCommented()  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.isCommented()  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.isCommented()  ||  node.getComments()!=  null)  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
79	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.isParsed())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.isParsed())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.isParsed())  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
80	[BUG]  [BUGGY]  if(node.isComsed()  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.isComsed()  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.isComsed()  ||  node.getComments()!=  null)  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
81	[BUG]  [BUGGY]  if(node.getParsed()  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getParsed()  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getParsed()  ||  node.getComments()!=  null)  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
82	[BUG]  [BUGGY]  if(node.isName()  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.isName()  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.isName()  ||  node.getComments()!=  null)  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
83	[BUG]  [BUGGY]  if(node.getComments()  ==  null  ||  node.getName().endsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  ||  node.getName().endsWith( "/ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  ||  node.getName().endsWith( "/ "))  {	  if(node.getComments()    ==    null    &&    node.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
84	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  &&  node.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  &&  node.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  &&  node.getComments().length  >  0)  {	  if(node.getComments()    ==    null    &&    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
85	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "prototype. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "prototype. "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "prototype. "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
86	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( ".prototype "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( ".prototype "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( ".prototype "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
87	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "prototype "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "prototype "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "prototype "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
88	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "Prototype. "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "Prototype. "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "Prototype. "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
89	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".prototype. "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".prototype. "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getName().endsWith( ".prototype. "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
90	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( "prototype. "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( "prototype. "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getName().endsWith( "prototype. "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
91	[BUG]  [BUGGY]  Node  node  =  irNode.getNext()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.getNext()  +  1;  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.getNext()  +  1;	  Node    node    =    irNode.getNext();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  errorReporter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  errorReporter);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  errorReporter);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  errorReporter);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  null);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  null);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  false);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  false);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  errorsReporter);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  errorsReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  errorsReporter);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  node);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  node);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  node);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  errorReporter);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  errorReporter);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  errorReporter);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  errorReporter);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  rootNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  rootNodeJsDocBuilder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  rootNodeJsDocBuilder);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  rootNodeJsDocHolder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  rootNodeJsDocHolder);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  irNode);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
104	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "jpg "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "jpg "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "jpg "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
105	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".jpg "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".jpg "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getName().endsWith( ".jpg "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
106	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/.jpg "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/.jpg "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "/.jpg "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
107	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "_jpg "))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "_jpg "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "_jpg "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
108	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getName().equals( "/ "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getName().equals( "/ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getName().equals( "/ "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
109	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().equals( "/ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().equals( "/ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getName().equals( "/ "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
110	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( ". "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( ". "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( ". "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
111	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "/* "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "/* "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "/* "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
112	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "* "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "* "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "* "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
113	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "/> "))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "/> "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "/> "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  errorReporter);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  errorReporter);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter,  fileLevelJsDocBuilder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  errorReporter,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  rootNodeJsDocHolder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  irNode,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  irNode,  rootNodeJsDocHolder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  irNode,  rootNodeJsDocHolder);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  templateNode,  irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  templateNode,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  templateNode,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
124	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(irNode.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(irNode.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(irNode.getParentNode()))  {	  if(irNode.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
125	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getFirstChild()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getFirstChild()))  {	  if(irNode.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
126	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  NodeUtil.isFunction(node.getNameNode()))  {	  if(irNode.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
127	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  &&  NodeUtil.isFunction(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  &&  NodeUtil.isFunction(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  &&  NodeUtil.isFunction(node.getParentNode()))  {	  if(irNode.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
128	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  <=  1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  <=  1)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getComments().length  <=  1)  {	  if(node.getComments()!=    null    &&    node.getComments().length    <=    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
129	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getComments().length  <=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getComments().length  <=  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getComments().length  <=  0)  {	  if(node.getComments()!=    null    &&    node.getComments().length    <=    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
130	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  <=  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  <=  2)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getComments().length  <=  2)  {	  if(node.getComments()!=    null    &&    node.getComments().length    <=    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
131	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irNode);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
132	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node,  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node,  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
133	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  errorReporter,  irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  errorReporter,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  errorReporter,  irNode);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
134	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(node,  sourceString,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(node,  sourceString,  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(node,  sourceString,  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
135	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irReporter);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
136	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  errorReporter,  config);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  errorReporter,  config);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  errorReporter,  config);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
137	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".java "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".java "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getName().endsWith( ".java "))  {	  if(node.getComments()!=    null    ||    node.getName().endsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
138	[BUG]  [BUGGY]  if(node  ==  null  &&  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node  ==  null  &&  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node  ==  null  &&  node.getComments()  ==  null)  {	  if(node    ==    null    ||    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
139	[BUG]  [BUGGY]  if(irNode  ==  null  ||  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode  ==  null  ||  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode  ==  null  ||  node.getComments()  ==  null)  {	  if(node    ==    null    ||    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  TransformDispatcher());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  TransformDispatcher());  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  new  TransformDispatcher());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  new  TransformDispatcher());  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  new  TransformTree());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  new  TransformTree());  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  new  TransformTree());	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  new  TransformDispatcher(config));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  new  TransformDispatcher(config));  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  new  TransformDispatcher(config));	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  new  TransformDispatcher(node));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  new  TransformDispatcher(node));  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  new  TransformDispatcher(node));	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  null,  new  TransformDispatcher());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  null,  new  TransformDispatcher());  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  null,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
146	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "java "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "java "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "java "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
147	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/.java "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/.java "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "/.java "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
148	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "java. "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "java. "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "java. "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
149	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "java/ "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "java/ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "java/ "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
150	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
151	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
152	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
153	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
154	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(irNode.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(irNode.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(irNode.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
155	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getStringNode()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getStringNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getStringNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
156	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getNextNode()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getNextNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getNextNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
157	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isName(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isName(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  NodeUtil.isName(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
158	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getLineno()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getLineno()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getLineno()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
159	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getSourceName()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getSourceName()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getSourceName()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
160	[BUG]  [BUGGY]  Node  templateNode  =  irNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  irNode.getFirstChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  irNode.getFirstChild();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
161	[BUG]  [BUGGY]  Node  templateNode  =  node.getLastChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  node.getLastChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  node.getLastChild();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
162	[BUG]  [BUGGY]  Node  templateNode  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  node.getFirstChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  node.getFirstChild();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
163	[BUG]  [BUGGY]  Node  templateNode  =  rootNodeJsDocHolder.getLastChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  rootNodeJsDocHolder.getLastChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  rootNodeJsDocHolder.getLastChild();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
164	[BUG]  [BUGGY]  Node  templateNode  =  irNode.getNext();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  irNode.getNext();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  irNode.getNext();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
165	[BUG]  [BUGGY]  Node  templateNode  =  irNode.getParent();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  irNode.getParent();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  irNode.getParent();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
166	[BUG]  [BUGGY]  if  (node.getComments()  ==  null  ||  node.getComments().length!=  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node.getComments()  ==  null  ||  node.getComments().length!=  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node.getComments()  ==  null  ||  node.getComments().length!=  0)  {	  if    (node.getComments()    ==    null    ||    node.getComments().length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
167	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&!irNode.isParsed())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&!irNode.isParsed())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&!irNode.isParsed())  {	  if(irNode.getComments()!=    null    &&!irNode.isParsed())    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
168	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  ||!irNode.isParsed())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  ||!irNode.isParsed())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  ||!irNode.isParsed())  {	  if(irNode.getComments()!=    null    &&!irNode.isParsed())    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
169	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  &&!irNode.isParsed())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  &&!irNode.isParsed())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  &&!irNode.isParsed())  {	  if(irNode.getComments()!=    null    &&!irNode.isParsed())    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
170	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||!irNode.isParsed())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||!irNode.isParsed())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||!irNode.isParsed())  {	  if(irNode.getComments()!=    null    &&!irNode.isParsed())    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
171	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getLastChild()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getLastChild()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getLastChild()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getFirstChild()))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
172	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getFirstChild()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  NodeUtil.isFunction(node.getFirstChild()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getFirstChild()))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
173	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getFirstChild()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  NodeUtil.isFunction(node.getFirstChild()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getFirstChild()))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
174	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( "./ "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( "./ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getName().endsWith( "./ "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   "./   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
175	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  ||  irNode.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  ||  irNode.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  ||  irNode.getComments().length  >  0)  {	  if(irNode.getComments()!=    null    &&    irNode.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
176	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  irNode.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  irNode.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  irNode.getComments().length  >  0)  {	  if(irNode.getComments()!=    null    &&    irNode.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
177	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  &&  irNode.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  &&  irNode.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  &&  irNode.getComments().length  >  0)  {	  if(irNode.getComments()!=    null    &&    irNode.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
178	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  irNode.getComments().length  >  1)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  irNode.getComments().length  >  1)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  irNode.getComments().length  >  1)  {	  if(irNode.getComments()!=    null    &&    irNode.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
179	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode!=  null  &&  irNode.getComments()!=  null)  {	  if(node!=    null    &&    irNode.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
180	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode  ==  null  &&  irNode.getComments()!=  null)  {	  if(node!=    null    &&    irNode.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
181	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode!=  null  &&  irNode.getComments()  ==  null)  {	  if(node!=    null    &&    irNode.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
182	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  node.getComments()  ==  null)  {	  if(node.getComments()!=    null    &&    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
183	[BUG]  [BUGGY]  Node  irNode  =  node.getParent();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  irNode  =  node.getParent();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  irNode  =  node.getParent();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
184	[BUG]  [BUGGY]  Node  irNode  =  irNode.getNext();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  irNode  =  irNode.getNext();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  irNode  =  irNode.getNext();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
185	[BUG]  [BUGGY]  Node  irNode  =  node.getNext();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  irNode  =  node.getNext();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  irNode  =  node.getNext();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
186	[BUG]  [BUGGY]  Node  irNode  =  irNode.getLastChild();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  irNode  =  irNode.getLastChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  irNode  =  irNode.getLastChild();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
187	[BUG]  [BUGGY]  Node  irNode  =  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  irNode  =  irNode.cloneTree();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  irNode  =  irNode.cloneTree();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
188	[BUG]  [BUGGY]  Node  irNode  =  rootNodeJsDocBuilder.getParent();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  irNode  =  rootNodeJsDocBuilder.getParent();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  irNode  =  rootNodeJsDocBuilder.getParent();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
189	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  ||  node.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  ||  node.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  ||  node.getComments().length  >  0)  {	  if(irNode.getComments()!=    null    &&    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
190	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  &&  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  &&  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  &&  node.getComments()!=  null)  {	  if(node.getComments()    ==    null    &&    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
191	[BUG]  [BUGGY]  if  (node.getComments()!=  null  &&  irNode.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node.getComments()!=  null  &&  irNode.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node.getComments()!=  null  &&  irNode.getComments()!=  null)  {	  if    (node.getComments()!=    null    ||    irNode.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
192	[BUG]  [BUGGY]  if  (irNode.getComments()!=  null  ||  irNode.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (irNode.getComments()!=  null  ||  irNode.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (irNode.getComments()!=  null  ||  irNode.getComments()!=  null)  {	  if    (node.getComments()!=    null    ||    irNode.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
193	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( ".doc "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( ".doc "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( ".doc "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".   "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
194	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( ".* "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( ".* "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( ".* "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".   "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
195	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceName,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceName,  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceName,  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
196	[BUG]  [BUGGY]  if  (node.getComments()!=  null  &&  node.getComments().isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node.getComments()!=  null  &&  node.getComments().isEmpty())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node.getComments()!=  null  &&  node.getComments().isEmpty())  {	  if    (node.getComments()!=    null    ||    node.getComments().isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
197	[BUG]  [BUGGY]  if  (node.getComments()  ==  null  &&  node.getComments().isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node.getComments()  ==  null  &&  node.getComments().isEmpty())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node.getComments()  ==  null  &&  node.getComments().isEmpty())  {	  if    (node.getComments()!=    null    ||    node.getComments().isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
198	[BUG]  [BUGGY]  if  (node.getComments()  ==  null  ||  node.getComments().isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node.getComments()  ==  null  ||  node.getComments().isEmpty())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node.getComments()  ==  null  ||  node.getComments().isEmpty())  {	  if    (node.getComments()!=    null    ||    node.getComments().isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
199	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getFirstChild()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getFirstChild()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
200	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNextNode()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNextNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNextNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
201	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isAssignmentOp(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  NodeUtil.isAssignmentOp(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  NodeUtil.isAssignmentOp(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
202	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
203	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
204	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNext()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNext()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNext()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
205	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getParent(),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getParent(),  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getParent(),  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
206	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getLineno(),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getLineno(),  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getLineno(),  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
207	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isName(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  NodeUtil.isName(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  NodeUtil.isName(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
208	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getComments().length  >=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getComments().length  >=  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getComments().length  >=  0)  {	  if(node.getComments()!=    null    &&    node.getComments().length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
209	[BUG]  [BUGGY]  if(node.getComments()  >=  null  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  >=  null  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  >=  null  ||  node.getComments()!=  null)  {	  if(node.getComments()    ==    null    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
210	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getString()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getString()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getString()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getNext()))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
211	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  NodeUtil.getSourceName(node),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  NodeUtil.getSourceName(node),  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  NodeUtil.getSourceName(node),  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
212	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "- "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "- "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
213	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( ".prototype. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( ".prototype. "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( ".prototype. "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
214	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getSourceName()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getSourceName()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getSourceName()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isExpressionNode(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
215	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  <  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  <  1)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getComments().length  <  1)  {	  if(node.getComments()!=    null    &&    node.getComments().length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
216	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  ==  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  ==  1)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getComments().length  ==  1)  {	  if(node.getComments()!=    null    &&    node.getComments().length    >    1)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  errorReporter);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  errorReporter);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  sourceString);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  sourceString);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  sourceString);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
219	[BUG]  [BUGGY]  if(node!=  null  &&  irNode.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node!=  null  &&  irNode.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node!=  null  &&  irNode.getComments()  ==  null)  {	  if(node!=    null    &&    irNode.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
220	[BUG]  [BUGGY]  if(node  ==  null  &&  irNode.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node  ==  null  &&  irNode.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node  ==  null  &&  irNode.getComments()!=  null)  {	  if(node!=    null    &&    irNode.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
221	[BUG]  [BUGGY]  if  (node.getComments()  ==  null  ||  node.getComments().length  >=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if  (node.getComments()  ==  null  ||  node.getComments().length  >=  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if  (node.getComments()  ==  null  ||  node.getComments().length  >=  0)  {	  if    (node.getComments()!=    null    ||    node.getComments().length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
223	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getParent()!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getParent()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getParent()!=  null)  {	  if(node.getComments()    ==    null    &&    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
224	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getSourceName())||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getSourceName())||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getSourceName())||  node.getType()  ==  Token.FUNCTION)  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode())||    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
225	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getComments().length  <=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getComments().length  <=  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getComments().length  <=  0)  {	  if(node.getComments()!=    null    &&    node.getComments().length    <=    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
226	[BUG]  [BUGGY]  if(node.getParentNode()!=  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getParentNode()!=  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getParentNode()!=  null  &&  NodeUtil.isAssignmentOp(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
227	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isAssignmentOp(node.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
229	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ".jpg "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ".jpg "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().startsWith( ".jpg "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
230	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( ".jpg "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( ".jpg "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getName().endsWith( ".jpg "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
231	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/.* "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/.* "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "/.* "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   "./   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
232	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/. "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "/. "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "/. "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   "./   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
233	[BUG]  [BUGGY]  if(node.isParsed()  ||  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.isParsed()  ||  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.isParsed()  ||  node.getComments()  ==  null)  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
234	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.mayHaveSideEffects(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.mayHaveSideEffects(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.mayHaveSideEffects(node.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
235	[BUG]  [BUGGY]  if(node.getParentNode()!=  null  &&  NodeUtil.isFunction(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getParentNode()!=  null  &&  NodeUtil.isFunction(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getParentNode()!=  null  &&  NodeUtil.isFunction(node.getParentNode()))  {	  if(node.getComments()!=    null    ||    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
236	[BUG]  [BUGGY]  if(node.getParent()!=  null  &&  NodeUtil.isFunction(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getParent()!=  null  &&  NodeUtil.isFunction(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getParent()!=  null  &&  NodeUtil.isFunction(node.getParentNode()))  {	  if(node.getComments()!=    null    ||    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  sourceString,  fileLevelJsDocBuilder,  irNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  sourceString,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  sourceString,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  rootNodeJsDocHolder);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  rootNodeJsDocHolder);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  sourceString);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  sourceString);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  sourceString);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
240	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( ".java "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( ".java "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getName().endsWith( ".java "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
241	[BUG]  [BUGGY]  Node  irNode  =  rootNodeJsDocHolder.getParent();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  irNode  =  rootNodeJsDocHolder.getParent();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  irNode  =  rootNodeJsDocHolder.getParent();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
242	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getType()  ==  Token.FUNCTION)  {	  if(irNode.getComments()!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
243	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  node.getType()  ==  Token.FUNCTION)  {	  if(irNode.getComments()!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
244	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getParent()  ==  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getParent()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getParent()  ==  null)  {	  if(node.getComments()!=    null    &&    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
245	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getComments()  >=  null)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getComments()  >=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getComments()  >=  null)  {	  if(node.getComments()!=    null    &&    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
246	[BUG]  [BUGGY]  Node  node  =  rootNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  rootNode.getFirstChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  rootNode.getFirstChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
247	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getParent()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getParent()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getParent()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getFirstChild()))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
248	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getChildCount()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getChildCount()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getChildCount()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getFirstChild()))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
249	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ".prototype "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ".prototype "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().startsWith( ".prototype "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
250	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( "prototype "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( "prototype "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().startsWith( "prototype "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
251	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".prototype "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getName().endsWith( ".prototype "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getName().endsWith( ".prototype "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
252	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( ".prototype "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( ".prototype "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getName().endsWith( ".prototype "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
253	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( ".jar "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( ".jar "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( ".jar "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".   "))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
254	[BUG]  [BUGGY]  Node  node  =  rootNode.getLastChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  rootNode.getLastChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  rootNode.getLastChild();	  Node    node    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
255	[BUG]  [BUGGY]  Node  node  =  irNode.getfirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.getfirstChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.getfirstChild();	  Node    node    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
256	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  null,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  null,  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  null,  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
257	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals(sourceString))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals(sourceString))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals(sourceString))  {	  if(irNode.getComments()!=    null    &&    irNode.getName().equals(sourceString))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
258	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  irNode.getName().equals(sourceString))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  irNode.getName().equals(sourceString))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  irNode.getName().equals(sourceString))  {	  if(irNode.getComments()!=    null    &&    irNode.getName().equals(sourceString))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
259	[BUG]  [BUGGY]  Node  templateNode  =  rootNode.getLastChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  rootNode.getLastChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  rootNode.getLastChild();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
260	[BUG]  [BUGGY]  Node  templateNode  =  rootNodeJsDocHolder.getFirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  rootNodeJsDocHolder.getFirstChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  rootNodeJsDocHolder.getFirstChild();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
261	[BUG]  [BUGGY]  Node  node  =  irNode.getAncestor(2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.getAncestor(2);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.getAncestor(2);	  Node    node    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
262	[BUG]  [BUGGY]  if(node  >=  null  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node  >=  null  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node  >=  null  ||  node.getComments()!=  null)  {	  if(node    ==    null    ||    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
263	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&!irNode.isParsed())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&!irNode.isParsed())  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&!irNode.isParsed())  {	  if(irNode.getComments()!=    null    &&!irNode.isParsed())    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
264	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ". "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( ". "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().startsWith( ". "))  {	  if(node.getComments()!=    null    &&    node.getName().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  errorReporter,  new  TransformDispatcher());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  errorReporter,  new  TransformDispatcher());  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  errorReporter,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  new  TransformReporter());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  new  TransformReporter());  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  new  TransformReporter());	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  false,  new  TransformDispatcher());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  false,  new  TransformDispatcher());  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  false,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
268	[BUG]  [BUGGY]  if(node.getParentNode()!=  null  &&  NodeUtil.isName(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getParentNode()!=  null  &&  NodeUtil.isName(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getParentNode()!=  null  &&  NodeUtil.isName(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isName(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
269	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  <  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getComments().length  <  2)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getComments().length  <  2)  {	  if(node.getComments()!=    null    &&    node.getComments().length    <=    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
270	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getComments()!=  null  &&  NodeUtil.isExpressionNode(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
271	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  irNode.getName().equals( " "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  irNode.getName().equals( " "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  irNode.getName().equals( " "))  {	  if(irNode.getComments()!=    null    &&    irNode.getName().equals(sourceString))    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
272	[BUG]  [BUGGY]  if(node.getParentNode()  ==  null  ||  NodeUtil.isFunction(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getParentNode()  ==  null  ||  NodeUtil.isFunction(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getParentNode()  ==  null  ||  NodeUtil.isFunction(node.getParentNode()))  {	  if(node.getComments()!=    null    ||    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
273	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "java/lang/Object "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "java/lang/Object "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "java/lang/Object "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
274	[BUG]  [BUGGY]  Node  templateNode  =  irNode.removeFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  irNode.removeFirstChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  irNode.removeFirstChild();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
275	[BUG]  [BUGGY]  Node  templateNode  =  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  templateNode  =  irNode.cloneTree();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  templateNode  =  irNode.cloneTree();	  Node    templateNode    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
276	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  irNode.getName(),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  irNode.getName(),  config,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  irNode.getName(),  config,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
277	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config.getSourceName(),  irNode,  errorReporter);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config.getSourceName(),  irNode,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  config.getSourceName(),  irNode,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    node.getSourceName(),    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
278	[BUG]  [BUGGY]  Node  node  =  irNode.removeChild(node);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.removeChild(node);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.removeChild(node);	  Node    node    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
279	[BUG]  [BUGGY]  Node  node  =  irNode.removeChild(sourceString);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.removeChild(sourceString);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.removeChild(sourceString);	  Node    node    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
280	[BUG]  [BUGGY]  Node  node  =  irNode.next();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  node  =  irNode.next();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  node  =  irNode.next();	  Node    node    =    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
281	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getParent()  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getParent()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getParent()  ==  null)  {	  if(node.getComments()!=    null    ||    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
282	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getParentNode())&&  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getParentNode())&&  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getParentNode())&&  node.getType()  ==  Token.FUNCTION)  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode())||    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
283	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "js "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().endsWith( "js "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().endsWith( "js "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  config);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  config);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  config);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
285	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getComments()!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
286	[BUG]  [BUGGY]  if(node.getComments()  >=  null  &&  node.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  >=  null  &&  node.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  >=  null  &&  node.getComments().length  >  0)  {	  if(node.getComments()    ==    null    &&    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
287	[BUG]  [BUGGY]  if(node.isParsed()  ||  node.getComments()  ==  null  ||  node.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.isParsed()  ||  node.getComments()  ==  null  ||  node.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.isParsed()  ||  node.getComments()  ==  null  ||  node.getComments().length  >  0)  {	  if(node.getComments()    ==    null    &&    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
288	[BUG]  [BUGGY]  if(irNode.getComments()  ==  null  ||  node.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()  ==  null  ||  node.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()  ==  null  ||  node.getComments().length  >  0)  {	  if(node.getComments()    ==    null    &&    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
289	[BUG]  [BUGGY]  if(node!=  null  &&  node.getComments().length  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node!=  null  &&  node.getComments().length  >  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node!=  null  &&  node.getComments().length  >  0)  {	  if(node.getComments()    ==    null    &&    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
290	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  irNode.getComments().length  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  irNode.getComments().length  ==  0)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  irNode.getComments().length  ==  0)  {	  if(irNode.getComments()!=    null    &&    irNode.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
291	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isImmutableValue(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isImmutableValue(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isImmutableValue(node.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
292	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getSourceName()))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getSourceName()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isFunction(node.getSourceName()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
293	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isVar(node.getNameNode()))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isVar(node.getNameNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isVar(node.getNameNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getNameNode()))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
294	[BUG]  [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isName(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(irNode.getComments()!=  null  &&  NodeUtil.isName(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(irNode.getComments()!=  null  &&  NodeUtil.isName(node.getParentNode()))  {	  if(irNode.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
295	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getParentNode())||  NodeUtil.isFunction(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isName(node.getParentNode())||  NodeUtil.isFunction(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isName(node.getParentNode())||  NodeUtil.isFunction(node.getParentNode()))  {	  if(irNode.getComments()!=    null    &&    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
296	[BUG]  [BUGGY]  if(node.isComment()  ||  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.isComment()  ||  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.isComment()  ||  node.getComments()!=  null)  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
297	[BUG]  [BUGGY]  if(node.getParsed()!=  null  &&  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getParsed()!=  null  &&  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getParsed()!=  null  &&  node.getComments()!=  null)  {	  if(node.isParsed()    ||    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
298	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isImmutableValue(node.getFirstChild()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isImmutableValue(node.getFirstChild()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isImmutableValue(node.getFirstChild()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isFunction(node.getFirstChild()))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
299	[BUG]  [BUGGY]  Node  irNode  =  irNode.removeFirstChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  Node  irNode  =  irNode.removeFirstChild();  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	Node  irNode  =  irNode.removeFirstChild();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
300	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "/ ")||  node.getName().equals( "/ "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "/ ")||  node.getName().equals( "/ "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "/ ")||  node.getName().equals( "/ "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
301	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().equals( "/.* "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().equals( "/.* "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getName().equals( "/.* "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
302	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "/ ")||  node.getName().equals( "* "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "/ ")||  node.getName().equals( "* "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "/ ")||  node.getName().equals( "* "))  {	  if(node.getComments()!=    null    &&    node.getName().equals(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  irNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
304	[BUG]  [BUGGY]  if(node.getComments()!=  null  ||  node.getComments().length  <  2)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  ||  node.getComments().length  <  2)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  ||  node.getComments().length  <  2)  {	  if(node.getComments()!=    null    ||    node.getComments().length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  errorsReporter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  errorsReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  errorsReporter);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  new  TransformDispatcher());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  new  TransformDispatcher());  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  rootNode,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    irNode,    new    TransformDispatcher());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  rootNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  rootNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode,  rootNode);	  NodeTraversal.traverse(compiler,    node,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
308	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isForIn(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isForIn(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isForIn(node.getParentNode()))  {	  if(node.getComments()!=    null    &&    NodeUtil.isAssignmentOp(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
309	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( "jpg "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().startsWith( "jpg "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().startsWith( "jpg "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
310	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "jpg "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "jpg "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "jpg "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  irNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  rootNode,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  rootNode,  irNode);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  sourceString);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  sourceString);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  irNode,  sourceString);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  this);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  this);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
314	[BUG]  [BUGGY]  if(node  >=  null  ||  node.getComments()  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node  >=  null  ||  node.getComments()  ==  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node  >=  null  ||  node.getComments()  ==  null)  {	  if(node    ==    null    ||    node.getComments()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
315	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irNode,  errorReporter);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irNode,  errorReporter);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  config,  irNode,  errorReporter);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
316	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceString,  config,  irNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceString,  config,  irNode);  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceString,  config,  irNode);	  IRFactory    irFactory    =    new    IRFactory(sourceString,    sourceString,    config,    errorReporter);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
317	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  node.getName().equals( "prototype "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  node.getName().equals( "prototype "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
318	[BUG]  [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( ".prototype. "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()  ==  null  &&  node.getName().endsWith( ".prototype. "))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()  ==  null  &&  node.getName().endsWith( ".prototype. "))  {	  if(node.getComments()!=    null    &&    node.getName().endsWith(   ".prototype.   "))    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
319	[BUG]  [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isVar(node.getParentNode()))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getComments()!=  null  &&  NodeUtil.isVar(node.getParentNode()))  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getComments()!=  null  &&  NodeUtil.isVar(node.getParentNode()))  {	  if(node.getComments()    ==    null    &&    NodeUtil.isFunction(node.getParentNode()))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
320	[BUG]  [BUGGY]  if(node.getCommentType()  ==  JSDOC  &&  node.getComments()!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  Node  irNode  =  irFactory.transform(node);      [BUGGY]  if(node.getCommentType()  ==  JSDOC  &&  node.getComments()!=  null)  {  [BUGGY]      for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	132	132	1	replace	if(node.getCommentType()  ==  JSDOC  &&  node.getComments()!=  null)  {	  if(node.getComments()    ==    null    &&    node.getComments()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
