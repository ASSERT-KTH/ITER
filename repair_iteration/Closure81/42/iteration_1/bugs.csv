bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  node;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  node;  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  node;	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
2	[BUG]  [BUGGY]  return  irNode.cloneTree();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.cloneTree();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.cloneTree();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
3	[BUG]  [BUGGY]  return  irNode.getLineno();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.getLineno();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.getLineno();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
4	[BUG]  [BUGGY]  return  irNode.getParent();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.getParent();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.getParent();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
5	[BUG]  [BUGGY]  return  irNode.clone();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.clone();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.clone();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
6	[BUG]  [BUGGY]  return  irNode.getSourceName();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.getSourceName();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.getSourceName();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
7	[BUG]  [BUGGY]  return  irNode.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.getNext();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.getNext();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]    [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	  	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
9	[BUG]  [BUGGY]  return  irNode.getAstRootNode();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.getAstRootNode();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.getAstRootNode();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
10	[BUG]  [BUGGY]  return  irNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.getFirstChild();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.getFirstChild();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
11	[BUG]  [BUGGY]  return  irNode.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  [BUGGY]  return  irNode.getLastChild();  [BUGGY]  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	228	228	1	replace	return  irNode.getLastChild();	return  irNode;  	non-compiled	[CE]  illegal  start  of  type	83	None	replace
