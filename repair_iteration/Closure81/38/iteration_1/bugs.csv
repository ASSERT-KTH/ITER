bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  lineno  =  irNode.getLineno();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {      [BUGGY]  int  lineno  =  irNode.getLineno();  [BUGGY]  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	222	222	1	replace	int  lineno  =  irNode.getLineno();	int  lineno  =  node.getLineno();  	non-compiled	[CE]  illegal  start  of  type	75	None	replace
2	[BUG]  [BUGGY]  int  lineno  =  node.getLineno()  -  1;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]    if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {      [BUGGY]  int  lineno  =  node.getLineno()  -  1;  [BUGGY]  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	222	222	1	replace	int  lineno  =  node.getLineno()  -  1;	int  lineno  =  node.getLineno();  	non-compiled	[CE]  illegal  start  of  type	75	None	replace
3	[BUG]  [BUGGY]  int  lineno  =  node.getLineno()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]    if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {      [BUGGY]  int  lineno  =  node.getLineno()  +  1;  [BUGGY]  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	222	222	1	replace	int  lineno  =  node.getLineno()  +  1;	int  lineno  =  node.getLineno();  	non-compiled	[CE]  illegal  start  of  type	75	None	replace
4	[BUG]  [BUGGY]  int  lineno  =  position2charno(node.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]    if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {      [BUGGY]  int  lineno  =  position2charno(node.getAbsolutePosition());  [BUGGY]  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	222	222	1	replace	int  lineno  =  position2charno(node.getAbsolutePosition());	int  lineno  =  node.getLineno();  	non-compiled	[CE]  illegal  start  of  type	75	None	replace
5	[BUG]  [BUGGY]  int  lineno  =  node.getLineno()  -  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]    if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {      [BUGGY]  int  lineno  =  node.getLineno()  -  2;  [BUGGY]  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	222	222	1	replace	int  lineno  =  node.getLineno()  -  2;	int  lineno  =  node.getLineno();  	non-compiled	[CE]  illegal  start  of  type	75	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              AssertionFailedError  [CONTEXT]    if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {      [BUGGY]    [BUGGY]  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	222	222	1	replace	  	int  lineno  =  node.getLineno();  	non-compiled	[CE]  illegal  start  of  type	75	None	replace
7	[BUG]  [BUGGY]  int  lineno  =  node.getLineno()  *  2;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {      [BUGGY]  int  lineno  =  node.getLineno()  *  2;  [BUGGY]  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	222	222	1	replace	int  lineno  =  node.getLineno()  *  2;	int  lineno  =  node.getLineno();  	non-compiled	[CE]  illegal  start  of  type	75	None	replace
