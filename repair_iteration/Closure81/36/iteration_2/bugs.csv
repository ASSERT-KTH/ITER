bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getCharno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getCharno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getCharno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getCharno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getCharno());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getCharno());  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	irNode.setCharno(irNode.getFirstChild().getCharno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  irNode.setCharno(irNode.getLastChild().getCharno());  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	irNode.setCharno(irNode.getLastChild().getCharno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  Node  charno  =  node.getCharno();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  Node  charno  =  node.getCharno();  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	Node  charno  =  node.getCharno();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild().getCharno();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  Node  charno  =  node.getFirstChild().getCharno();  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	Node  charno  =  node.getFirstChild().getCharno();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getCharno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()!=  Token.VAR  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()!=  Token.VAR  &&  irNode.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()  ==  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(node.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()  ==  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()  ==  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getCharno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  node.getFirstChild().getCharno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getCharno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getLineno()  ==  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode);  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  Node  charno  =  node.getFirstChild();  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	Node  charno  =  node.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  Node  charno  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  Node  charno  =  node.getLastChild();  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	Node  charno  =  node.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(node.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(node.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getLineno()  ==  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getLineno()  ==  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(node.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(node.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {	  if(irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLineno());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }      [BUGGY]  irNode.setLineno(jsDocInfo.getLineno());  [BUGGY]    irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	213	214	1	replace	irNode.setLineno(jsDocInfo.getLineno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
