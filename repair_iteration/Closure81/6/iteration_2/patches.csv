bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(value)+  1;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(value)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(value)+  1;	  return    Node.newString(type,    value).cloneFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	46	None	replace
2	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.lp);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.lp);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.lp);	  return    Node.newString(type,    value).cloneFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	46	None	replace
3	[BUG]  [BUGGY]  return  Node.newString(type,  value).getPropsFrom(node);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).getPropsFrom(node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).getPropsFrom(node);	  return    Node.newString(type,    value).removePropsFrom(node);    	non-compiled	[CE]  ')'  expected	24	None	replace
4	[BUG]  [BUGGY]  return  Node.newString(type,  value).getReturnCode();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).getReturnCode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).getReturnCode();	  return    Node.newString(type,    value).removePropsFrom(node);    	non-compiled	[CE]  ')'  expected	24	None	replace
5	[BUG]  [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  transformDispatcher.newStringNode(type,  value,  null);	  return    transformDispatcher.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	41	None	replace
6	[BUG]  [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  transformDispatcher.newStringNode(type,  value,  false);	  return    transformDispatcher.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	41	None	replace
7	[BUG]  [BUGGY]  return  this.transformDispatcher.newStringNode(type,  value);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  this.transformDispatcher.newStringNode(type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  this.transformDispatcher.newStringNode(type,  value);	  return    transformDispatcher.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	41	None	replace
8	[BUG]  [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  true);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  transformDispatcher.newStringNode(type,  value,  true);	  return    transformDispatcher.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	41	None	replace
9	[BUG]  [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  0);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  transformDispatcher.newStringNode(type,  value,  0);	  return    transformDispatcher.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	41	None	replace
10	[BUG]  [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  fileOverviewInfo);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  transformDispatcher.newStringNode(type,  value,  fileOverviewInfo);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  transformDispatcher.newStringNode(type,  value,  fileOverviewInfo);	  return    transformDispatcher.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	41	None	replace
11	[BUG]  [BUGGY]  return  Node.newString(type,  value),  true,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  true,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  true,  null);	  return    Node.newString(type,    value),    false,    null);    	non-compiled	[CE]  ')'  expected	39	None	replace
12	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value),  true,  null);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value),  true,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value),  true,  null);	  return    Node.newString(type,    value),    false,    null);    	non-compiled	[CE]  ')'  expected	39	None	replace
13	[BUG]  [BUGGY]  return  Node.newString(type,  value)&&  false,  null);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)&&  false,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)&&  false,  null);	  return    Node.newString(type,    value),    false,    null);    	non-compiled	[CE]  ')'  expected	39	None	replace
14	[BUG]  [BUGGY]  return  Node.newString(type,  value),  true,  null;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  true,  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  true,  null;	  return    Node.newString(type,    value),    false,    null);    	non-compiled	[CE]  ')'  expected	39	None	replace
15	[BUG]  [BUGGY]  return  Node.newString(type,  value)||  false,  null);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)||  false,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)||  false,  null);	  return    Node.newString(type,    value),    false,    null);    	non-compiled	[CE]  ')'  expected	39	None	replace
16	[BUG]  [BUGGY]  return  Node.newString(type,  value),  false,  null,  null);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  false,  null,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  false,  null,  null);	  return    Node.newString(type,    value),    false,    null);    	non-compiled	[CE]  ')'  expected	39	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformDispatcher(value));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformDispatcher(value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  TransformDispatcher(value));	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	93	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  value,  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  value,  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  value,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	93	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformDispatcher(),  value);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformDispatcher(),  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  TransformDispatcher(),  value);	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	93	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  value,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	93	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformReporter());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformReporter());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  TransformReporter());	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	93	None	replace
22	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
23	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
24	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  value);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
25	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock,  value);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(parent,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
26	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  value);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
27	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(msgNode,  newBlock,  value);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(msgNode,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(msgNode,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
28	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(null,  newBlock,  value);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(null,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(null,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
29	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneTransformDispatcher(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneTransformDispatcher(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneTransformDispatcher(this);	  return    Node.newString(type,    value).cloneIRFactory(this);    	non-compiled	[CE]  ')'  expected	11	None	replace
30	[BUG]  [BUGGY]  return  Node.newString(type,  value),  transformDispatcher.cloneIRFactory(this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  transformDispatcher.cloneIRFactory(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  transformDispatcher.cloneIRFactory(this);	  return    Node.newString(type,    value).cloneIRFactory(this);    	non-compiled	[CE]  ')'  expected	11	None	replace
31	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneIRFactory();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneIRFactory();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneIRFactory();	  return    Node.newString(type,    value).cloneIRFactory(this);    	non-compiled	[CE]  ')'  expected	11	None	replace
32	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneIRFactory(false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneIRFactory(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneIRFactory(false);	  return    Node.newString(type,    value).cloneIRFactory(this);    	non-compiled	[CE]  ')'  expected	11	None	replace
33	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(this,  type,  value);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(this,  type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(this,  type,  value);	  return    NodeUtil.newStringNode(null,    type,    value);    	non-compiled	[CE]  ')'  expected	77	None	replace
34	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(null,  type,  value,  null);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(null,  type,  value,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(null,  type,  value,  null);	  return    NodeUtil.newStringNode(null,    type,    value);    	non-compiled	[CE]  ')'  expected	77	None	replace
35	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(null,  type,  value,  false);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(null,  type,  value,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(null,  type,  value,  false);	  return    NodeUtil.newStringNode(null,    type,    value);    	non-compiled	[CE]  ')'  expected	77	None	replace
36	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(null,  type,  value,  true);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(null,  type,  value,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(null,  type,  value,  true);	  return    NodeUtil.newStringNode(null,    type,    value);    	non-compiled	[CE]  ')'  expected	77	None	replace
37	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(parent,  type,  value);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(parent,  type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(parent,  type,  value);	  return    NodeUtil.newStringNode(null,    type,    value);    	non-compiled	[CE]  ')'  expected	77	None	replace
38	[BUG]  [BUGGY]  return  Node.newString(type,  value).getPropsFrom(this);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).getPropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).getPropsFrom(this);	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
39	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(this);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(this);	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
40	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeChild(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeChild(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeChild(this);	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
41	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(null);	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
42	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(bodyNode,  newBlock,  value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(bodyNode,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(bodyNode,  newBlock,  value);	  return    Node.newString(value,    type).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	57	None	replace
43	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(node,  newBlock);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(node,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(node,  newBlock);	  return    Node.newString(value,    type).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	57	None	replace
44	[BUG]  [BUGGY]  return  Node.newString(value,  newBlock).replaceChild(bodyNode,  type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  newBlock).replaceChild(bodyNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  newBlock).replaceChild(bodyNode,  type);	  return    Node.newString(value,    type).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	57	None	replace
45	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(bodyNode,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(bodyNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(bodyNode,  value);	  return    Node.newString(value,    type).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	57	None	replace
46	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(parent,  newBlock);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(parent,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(parent,  newBlock);	  return    Node.newString(value,    type).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	57	None	replace
47	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(bufferNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(bufferNode);	  return    Node.newString(type,    value).cloneFlagsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	74	None	replace
48	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(bufferNode,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(bufferNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(bufferNode,  value);	  return    Node.newString(type,    value).cloneFlagsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	74	None	replace
49	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bufferNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.bufferNode);	  return    Node.newString(type,    value).cloneFlagsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	74	None	replace
50	[BUG]  [BUGGY]  return  Node.newString(type,  value).addFlagsFrom(bufferNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addFlagsFrom(bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addFlagsFrom(bufferNode);	  return    Node.newString(type,    value).cloneFlagsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	74	None	replace
51	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value,  false);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value,  false);	  return    Node.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	44	None	replace
52	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value,  null);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value,  null);	  return    Node.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	44	None	replace
53	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value,  true);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value,  true);	  return    Node.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	44	None	replace
54	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value,  0);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value,  0);	  return    Node.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	44	None	replace
55	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value,  this);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value,  this);	  return    Node.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	44	None	replace
56	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value,  transformTokens);  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value,  transformTokens);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value,  transformTokens);	  return    Node.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	44	None	replace
57	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value)+  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value)+  1;	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  ')'  expected	35	None	replace
58	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value),  null);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value),  null);	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  ')'  expected	35	None	replace
59	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value),  null,  null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value),  null,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value),  null,  null);	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  ')'  expected	35	None	replace
60	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value),  false,  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value),  false,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value),  false,  null);	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  ')'  expected	35	None	replace
61	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value),  false,  true;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value),  false,  true;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value),  false,  true;	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  ')'  expected	35	None	replace
62	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(this);	  return    Node.newString(type,    value).cloneFlagsFrom(this);    	non-compiled	[CE]  ')'  expected	10	None	replace
63	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(false);	  return    Node.newString(type,    value).cloneFlagsFrom(this);    	non-compiled	[CE]  ')'  expected	10	None	replace
64	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this,  newBlock);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this,  newBlock);	  return    Node.newString(type,    value).cloneFlagsFrom(this);    	non-compiled	[CE]  ')'  expected	10	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  this);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  this);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    value));    	non-compiled	[CE]  ')'  expected	42	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  errorReporter);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  errorReporter);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    value));    	non-compiled	[CE]  ')'  expected	42	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  false);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  false);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    value));    	non-compiled	[CE]  ')'  expected	42	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  config);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  config);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    value));    	non-compiled	[CE]  ')'  expected	42	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  true);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  value),  true);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    value));    	non-compiled	[CE]  ')'  expected	42	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  value),  this);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  value),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  value),  this);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    value));    	non-compiled	[CE]  ')'  expected	42	None	replace
71	[BUG]  [BUGGY]  Node  newStringNode  =  Node.newString(type,  value).clone();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newStringNode  =  Node.newString(type,  value).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newStringNode  =  Node.newString(type,  value).clone();	  return    Node.newString(value,    type).clone();    	non-compiled	[CE]  ')'  expected	15	None	replace
72	[BUG]  [BUGGY]  return  node.newString(type,  value).clone();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  node.newString(type,  value).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  node.newString(type,  value).clone();	  return    Node.newString(value,    type).clone();    	non-compiled	[CE]  ')'  expected	15	None	replace
73	[BUG]  [BUGGY]  return  newStringNode(type,  value).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value).clone();	  return    Node.newString(value,    type).clone();    	non-compiled	[CE]  ')'  expected	15	None	replace
74	[BUG]  [BUGGY]  return  Node.newString(value,  type,  value.clone());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type,  value.clone());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type,  value.clone());	  return    Node.newString(value,    type).clone();    	non-compiled	[CE]  ')'  expected	15	None	replace
75	[BUG]  [BUGGY]  Node  newStringNode  =  Node.newString(type,  value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newStringNode  =  Node.newString(type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newStringNode  =  Node.newString(type,  value);	  return    Node.newString(value,    type).clone();    	non-compiled	[CE]  ')'  expected	15	None	replace
76	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('n',  'r',  '-');  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('n',  'r',  '-');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('n',  'r',  '-');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
77	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('n',  'r',  ')';  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('n',  'r',  ')';  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('n',  'r',  ')';	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
78	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('n',  'r',  '_');  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('n',  'r',  '_');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('n',  'r',  '_');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
79	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('0',  'r');  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('0',  'r');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('0',  'r');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
80	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('n',  'r',  '/');  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('n',  'r',  '/');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('n',  'r',  '/');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
81	[BUG]  [BUGGY]  return  Node.newString(type,  value).transform(null);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).transform(null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).transform(null);	  return    Node.newString(type,    value).transform(this);    	non-compiled	[CE]  ')'  expected	9	None	replace
82	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).transform(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).transform(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).transform(this);	  return    Node.newString(type,    value).transform(this);    	non-compiled	[CE]  ')'  expected	9	None	replace
83	[BUG]  [BUGGY]  return  Node.newString(type,  value),  transform(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  transform(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  transform(this);	  return    Node.newString(type,    value).transform(this);    	non-compiled	[CE]  ')'  expected	9	None	replace
84	[BUG]  [BUGGY]  return  Node.newString(value,  type).transform(this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).transform(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).transform(this);	  return    Node.newString(type,    value).transform(this);    	non-compiled	[CE]  ')'  expected	9	None	replace
85	[BUG]  [BUGGY]  return  Node.newString(type,  value).transform(false);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).transform(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).transform(false);	  return    Node.newString(type,    value).transform(this);    	non-compiled	[CE]  ')'  expected	9	None	replace
86	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(value);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).clonePropsFrom(value);	  return    Node.newStringNode(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	18	None	replace
87	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).clonePropsFrom(this.bodyNode);	  return    Node.newStringNode(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	18	None	replace
88	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(this.assign);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).clonePropsFrom(this.assign);	  return    Node.newStringNode(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	18	None	replace
89	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).removePropsFrom(templateNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).removePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).removePropsFrom(templateNode);	  return    Node.newStringNode(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	18	None	replace
90	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(ret);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).clonePropsFrom(ret);	  return    Node.newStringNode(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	18	None	replace
91	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  newBlock);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.assign,  newBlock);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
92	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.assign,  null);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
93	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  values);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  values);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.assign,  values);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
94	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  this.sourceName);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  this.sourceName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.assign,  this.sourceName);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
95	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  new  String(value));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  new  String(value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.assign,  new  String(value));	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
96	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  this.value);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  this.value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.assign,  this.value);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
97	[BUG]  [BUGGY]  return  Node.newString(type,  value)/  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)/  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)/  1;	  return    Node.newString(type,    value)+    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
98	[BUG]  [BUGGY]  return  Node.newString(type,  value)+  2;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)+  2;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)+  2;	  return    Node.newString(type,    value)+    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
99	[BUG]  [BUGGY]  return  Node.newString(type,  value)-  1;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)-  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)-  1;	  return    Node.newString(type,    value)+    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
100	[BUG]  [BUGGY]  return  Node.newString(type,  value)+  0;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)+  0;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)+  0;	  return    Node.newString(type,    value)+    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
101	[BUG]  [BUGGY]  return  Node.newString(type,  value)+  3;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)+  3;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)+  3;	  return    Node.newString(type,    value)+    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
102	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceAll( ".s.IFJDCS ".charAt(0));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceAll( ".s.IFJDCS ".charAt(0));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceAll( ".s.IFJDCS ".charAt(0));	  return    Node.newString(type,    value).replaceAll(   "n   ",   "n   ");    	non-compiled	[CE]  ')'  expected	72	None	replace
103	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceAll( "node ",   "node ");  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceAll( "node ",   "node ");  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceAll( "node ",   "node ");	  return    Node.newString(type,    value).replaceAll(   "n   ",   "n   ");    	non-compiled	[CE]  ')'  expected	72	None	replace
104	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceAll( ".s.IFJDCS ", "s.IFJDCS ");  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceAll( ".s.IFJDCS ", "s.IFJDCS ");  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceAll( ".s.IFJDCS ", "s.IFJDCS ");	  return    Node.newString(type,    value).replaceAll(   "n   ",   "n   ");    	non-compiled	[CE]  ')'  expected	72	None	replace
105	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceAll( "[node] ",   "node ");  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceAll( "[node] ",   "node ");  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceAll( "[node] ",   "node ");	  return    Node.newString(type,    value).replaceAll(   "n   ",   "n   ");    	non-compiled	[CE]  ')'  expected	72	None	replace
106	[BUG]  [BUGGY]  Node  templateNode  =  Node.newString(type,  value).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  templateNode  =  Node.newString(type,  value).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  templateNode  =  Node.newString(type,  value).clonePropsFrom(templateNode);	  return    Node.newString(value,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	68	None	replace
107	[BUG]  [BUGGY]  return  node.newString(type,  value).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  node.newString(type,  value).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  node.newString(type,  value).clonePropsFrom(templateNode);	  return    Node.newString(value,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	68	None	replace
108	[BUG]  [BUGGY]  return  newStringNode(type,  value).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value).clonePropsFrom(templateNode);	  return    Node.newString(value,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	68	None	replace
109	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(scope);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(scope);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(scope);	  return    Node.newString(value,    type).clonePropsFrom(value);    	non-compiled	[CE]  ')'  expected	53	None	replace
110	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(target);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(target);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(target);	  return    Node.newString(value,    type).clonePropsFrom(value);    	non-compiled	[CE]  ')'  expected	53	None	replace
111	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bufferNode);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bufferNode);	  return    Node.newString(type,    value).clonePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	86	None	replace
112	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  value,  null);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  value,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type,  value,  null);	  return    NodeUtil.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	40	None	replace
113	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  value,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  value,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type,  value,  false);	  return    NodeUtil.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	40	None	replace
114	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  value,  true);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  value,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type,  value,  true);	  return    NodeUtil.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	40	None	replace
115	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  value,  newBlock);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  value,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type,  value,  newBlock);	  return    NodeUtil.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	40	None	replace
116	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  value,  0);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  value,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type,  value,  0);	  return    NodeUtil.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	40	None	replace
117	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneParametersFrom(this.report);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneParametersFrom(this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneParametersFrom(this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  ')'  expected	66	None	replace
118	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.report);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  ')'  expected	66	None	replace
119	[BUG]  [BUGGY]  return  Node.newString(type,  value),  this.report);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  ')'  expected	66	None	replace
120	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReport(this.report);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReport(this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReport(this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  ')'  expected	66	None	replace
121	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneTransformsFrom(this.report);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneTransformsFrom(this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneTransformsFrom(this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  ')'  expected	66	None	replace
122	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeChild(this,  newStringNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeChild(this,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeChild(this,  newStringNode);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
123	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  errorReporter);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this,  newStringNode,  errorReporter);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
124	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this,  newStringNode,  false);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
125	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  message);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  message);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this,  newStringNode,  message);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
126	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this,  newStringNode,  null);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
127	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  reportError);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  reportError);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this,  newStringNode,  reportError);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
128	[BUG]  [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(parent,  value);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(parent,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  newBlock).replaceChild(parent,  value);	  return    Node.newString(type,    value).replaceChild(parent,    newBlock);    	non-compiled	[CE]  ')'  expected	7	None	replace
129	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(null,  newBlock);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(null,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(null,  newBlock);	  return    Node.newString(type,    value).replaceChild(parent,    newBlock);    	non-compiled	[CE]  ')'  expected	7	None	replace
130	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock,  null);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(parent,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(parent,    newBlock);    	non-compiled	[CE]  ')'  expected	7	None	replace
131	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.parent,  newBlock);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.parent,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.parent,  newBlock);	  return    Node.newString(type,    value).replaceChild(parent,    newBlock);    	non-compiled	[CE]  	7	None	replace
132	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock,  0);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(parent,  newBlock,  0);	  return    Node.newString(type,    value).replaceChild(parent,    newBlock);    	non-compiled	[CE]  	7	None	replace
133	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(fnNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(fnNode);	  return    Node.newString(type,    value).clonePropsFrom(fnNode);    	non-compiled	[CE]  	33	None	replace
134	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(irNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(irNode);	  return    Node.newString(type,    value).clonePropsFrom(fnNode);    	non-compiled	[CE]  	33	None	replace
135	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).reset();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).reset();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).reset();	  return    Node.newString(type,    value).reset();    	non-compiled	[CE]  	14	None	replace
136	[BUG]  [BUGGY]  return  Node.newString(type,  value).set();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).set();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).set();	  return    Node.newString(type,    value).reset();    	non-compiled	[CE]  	14	None	replace
137	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFirstChild();	  return    Node.newString(type,    value).reset();    	non-compiled	[CE]  	14	None	replace
138	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeChild(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeChild(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeChild(value);	  return    Node.newString(type,    value).reset();    	non-compiled	[CE]  	14	None	replace
139	[BUG]  [BUGGY]  return  newStringNode(type,  value,  this);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value,  this);	  return    newStringNode(type,    value,    null);    	non-compiled	[CE]  ')'  expected	45	None	replace
140	[BUG]  [BUGGY]  return  newStringNode(type,  value,  null,  false);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value,  null,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value,  null,  false);	  return    newStringNode(type,    value,    null);    	non-compiled	[CE]  ')'  expected	45	None	replace
141	[BUG]  [BUGGY]  return  newStringNode(type,  value,  null,  null);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value,  null,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value,  null,  null);	  return    newStringNode(type,    value,    null);    	non-compiled	[CE]  ')'  expected	45	None	replace
142	[BUG]  [BUGGY]  return  newStringNode(type,  value,  null,  true);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value,  null,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value,  null,  true);	  return    newStringNode(type,    value,    null);    	non-compiled	[CE]  ')'  expected	45	None	replace
143	[BUG]  [BUGGY]  return  newStringNode(type,  value,  false);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value,  false);	  return    newStringNode(type,    value,    null);    	non-compiled	[CE]  	45	None	replace
144	[BUG]  [BUGGY]  return  newStringNode(type,  value,  true);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value,  true);	  return    newStringNode(type,    value,    null);    	non-compiled	[CE]  	45	None	replace
145	[BUG]  [BUGGY]  return  Node.newString(this.assign,  type).clonePropsFrom(value);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(this.assign,  type).clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(this.assign,  type).clonePropsFrom(value);	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  	27	None	replace
146	[BUG]  [BUGGY]  return  Node.newString(type,  this.assign).clone();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.assign).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.assign).clone();	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  	27	None	replace
147	[BUG]  [BUGGY]  return  Node.newString(type,  this.assign).removePropsFrom(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.assign).removePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.assign).removePropsFrom(value);	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  	27	None	replace
148	[BUG]  [BUGGY]  return  Node.newString(type,  this.assign).clonePropsFrom(value,  value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.assign).clonePropsFrom(value,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.assign).clonePropsFrom(value,  value);	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
149	[BUG]  [BUGGY]  return  Node.newString(type,  this.assign).clonePropsFrom(this.sourceName);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.assign).clonePropsFrom(this.sourceName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.assign).clonePropsFrom(this.sourceName);	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
150	[BUG]  [BUGGY]  return  Node.newString(type,  value).getValue();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).getValue();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).getValue();	  return    Node.newString(type,    value).removeValue();    	non-compiled	[CE]  ')'  expected	85	None	replace
151	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).removeValue();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).removeValue();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).removeValue();	  return    Node.newString(type,    value).removeValue();    	non-compiled	[CE]  ')'  expected	85	None	replace
152	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeLastChild();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeLastChild();	  return    Node.newString(type,    value).removeValue();    	non-compiled	[CE]  ')'  expected	85	None	replace
153	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeLast();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeLast();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeLast();	  return    Node.newString(type,    value).removeValue();    	non-compiled	[CE]  ')'  expected	85	None	replace
154	[BUG]  [BUGGY]  return  Node.newString(type,  value).addValue();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addValue();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addValue();	  return    Node.newString(type,    value).removeValue();    	non-compiled	[CE]  ')'  expected	85	None	replace
155	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.reporter,  errorReporter);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.reporter,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.reporter,  errorReporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
156	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReporter(this.reporter);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReporter(this.reporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReporter(this.reporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
157	[BUG]  [BUGGY]  return  Node.newString(type,  value).transform(this.reporter);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).transform(this.reporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).transform(this.reporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
158	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.errorReporter);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.errorReporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
159	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.reporter);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.reporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.reporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
160	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(reason);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(reason);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(reason);	  return    Node.newString(value,    type).clonePropsFrom(ret);    	non-compiled	[CE]  ')'  expected	62	None	replace
161	[BUG]  [BUGGY]  return  newStringNode(type,  value).clonePropsFrom(ret);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value).clonePropsFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value).clonePropsFrom(ret);	  return    Node.newString(value,    type).clonePropsFrom(ret);    	non-compiled	[CE]  ')'  expected	62	None	replace
162	[BUG]  [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(node,  value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(node,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  newBlock).replaceChild(node,  value);	  return    Node.newString(type,    newBlock).replaceChild(bodyNode,    value);    	non-compiled	[CE]  ')'  expected	3	None	replace
163	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).replaceChild(bodyNode,  newBlock);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).replaceChild(bodyNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).replaceChild(bodyNode,  newBlock);	  return    Node.newString(type,    newBlock).replaceChild(bodyNode,    value);    	non-compiled	[CE]  ')'  expected	3	None	replace
164	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  this);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  this);	  return    Node.newString(type,    newBlock).replaceChild(bodyNode,    value);    	non-compiled	[CE]  ')'  expected	3	None	replace
165	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  n);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  n);	  return    Node.newString(type,    newBlock).replaceChild(bodyNode,    value);    	non-compiled	[CE]  ')'  expected	3	None	replace
166	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(bufferNode,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(bufferNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(bufferNode,  value);	  return    Node.newString(type,    value).removePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
167	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(this.bodyNode);	  return    Node.newString(type,    value).removePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
168	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(bufferNode,  message);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(bufferNode,  message);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(bufferNode,  message);	  return    Node.newString(type,    value).removePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
169	[BUG]  [BUGGY]  return  newStringNode(type,  value.toString()  +  1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value.toString()  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value.toString()  +  1);	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  ')'  expected	94	None	replace
170	[BUG]  [BUGGY]  return  newStringNode(type,  value.toString(),  null);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value.toString(),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value.toString(),  null);	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  ')'  expected	94	None	replace
171	[BUG]  [BUGGY]  return  newStringNode(type,  value.toString(),  false);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value.toString(),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value.toString(),  false);	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  ')'  expected	94	None	replace
172	[BUG]  [BUGGY]  return  newStringNode(type,  value.toString(),  true);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value.toString(),  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value.toString(),  true);	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  ')'  expected	94	None	replace
173	[BUG]  [BUGGY]  if(value!=  null)  {  return  newStringNode(type,  value.toString());  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  if(value!=  null)  {  return  newStringNode(type,  value.toString());  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	if(value!=  null)  {  return  newStringNode(type,  value.toString());  }	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  ')'  expected	94	None	replace
174	[BUG]  [BUGGY]  return  newStringNode(type,  value.toString(),  this);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value.toString(),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value.toString(),  this);	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  ')'  expected	94	None	replace
175	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  value);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
176	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  message);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  message);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  message);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
177	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  false);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
178	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  errorReporter);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  errorReporter);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
179	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  errorReporter);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  errorReporter);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
180	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  size);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  size);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  size);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
181	[BUG]  [BUGGY]  return  Node.newString(type,  value).addFlagsFrom(value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addFlagsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addFlagsFrom(value);	  return    Node.newString(type,    value).removeFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	75	None	replace
182	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(value  +  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(value  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(value  +  1);	  return    Node.newString(type,    value).removeFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	75	None	replace
183	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(fnNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(fnNode);	  return    Node.newString(type,    value).removeFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	75	None	replace
184	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(value)+  1;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(value)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(value)+  1;	  return    Node.newString(type,    value).removeFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	75	None	replace
185	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(ret,  value);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(ret,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(ret,  value);	  return    Node.newString(type,    value).cloneFlagsFrom(ret);    	non-compiled	[CE]  ')'  expected	52	None	replace
186	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(msgNode);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(msgNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(msgNode);	  return    Node.newString(type,    value).cloneFlagsFrom(ret);    	non-compiled	[CE]  ')'  expected	52	None	replace
187	[BUG]  [BUGGY]  return  Node.newString(type,  value).getPropsFrom(templateNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).getPropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).getPropsFrom(templateNode);	  return    Node.newString(value,    type).removePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	60	None	replace
188	[BUG]  [BUGGY]  return  Node.newString(type,  value).replacePropsFrom(templateNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replacePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replacePropsFrom(templateNode);	  return    Node.newString(value,    type).removePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	60	None	replace
189	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(type);	  return    Node.newString(value,    type).removePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	60	None	replace
190	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.apply);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.apply);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(this.apply);	  return    Node.newString(type,    value).clonePropsFrom(this.apply);    	non-compiled	[CE]  ')'  expected	65	None	replace
191	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.applyNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.applyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.applyNode);	  return    Node.newString(type,    value).clonePropsFrom(this.apply);    	non-compiled	[CE]  ')'  expected	65	None	replace
192	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneParametersFrom(this.apply);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneParametersFrom(this.apply);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneParametersFrom(this.apply);	  return    Node.newString(type,    value).clonePropsFrom(this.apply);    	non-compiled	[CE]  ')'  expected	65	None	replace
193	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.apply  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.apply  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.apply  +  1);	  return    Node.newString(type,    value).clonePropsFrom(this.apply);    	non-compiled	[CE]  ')'  expected	65	None	replace
194	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.apply);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.apply);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.apply);	  return    Node.newString(type,    value).clonePropsFrom(this.apply);    	non-compiled	[CE]  ')'  expected	65	None	replace
195	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).remove();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).remove();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).remove();	  return    Node.newString(type,    value).remove();    	non-compiled	[CE]  ')'  expected	17	None	replace
196	[BUG]  [BUGGY]  return  Node.newString(type,  value).get();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).get();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).get();	  return    Node.newString(type,    value).remove();    	non-compiled	[CE]  ')'  expected	17	None	replace
197	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeChild();	  return    Node.newString(type,    value).remove();    	non-compiled	[CE]  ')'  expected	17	None	replace
198	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(null,  null);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(null,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(null,  null);	  return    Node.newString(type,    value).remove();    	non-compiled	[CE]  ')'  expected	17	None	replace
199	[BUG]  [BUGGY]  return  Node.newString(type,  value).setPropsFrom(value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setPropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setPropsFrom(value);	  return    Node.newString(type,    value).addPropsFrom(value);    	non-compiled	[CE]  ')'  expected	84	None	replace
200	[BUG]  [BUGGY]  return  Node.newString(type,  value).addValue(value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addValue(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addValue(value);	  return    Node.newString(type,    value).addPropsFrom(value);    	non-compiled	[CE]  ')'  expected	84	None	replace
201	[BUG]  [BUGGY]  return  Node.newString(type,  value).addTo(value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addTo(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addTo(value);	  return    Node.newString(type,    value).addPropsFrom(value);    	non-compiled	[CE]  ')'  expected	84	None	replace
202	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(this.assign);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(this.assign);	  return    Node.newString(type,    value).addPropsFrom(value);    	non-compiled	[CE]  ')'  expected	84	None	replace
203	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(null);	  return    Node.newString(type,    value).addPropsFrom(value);    	non-compiled	[CE]  ')'  expected	84	None	replace
204	[BUG]  [BUGGY]  return  Node.newString(type).replaceChild(bodyNode,  newBlock);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type).replaceChild(bodyNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type).replaceChild(bodyNode,  newBlock);	  return    Node.newString(value).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	58	None	replace
205	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(type,  newBlock);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(type,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(type,  newBlock);	  return    Node.newString(value).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	58	None	replace
206	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(node,  newBlock);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(node,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(node,  newBlock);	  return    Node.newString(value).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	58	None	replace
207	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(bodyNode,  type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(bodyNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(bodyNode,  type);	  return    Node.newString(value).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	58	None	replace
208	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(parent,  newBlock);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(parent,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(parent,  newBlock);	  return    Node.newString(value).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	58	None	replace
209	[BUG]  [BUGGY]  return  Node.newString(type).replaceChild(bodyNode,  value);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type).replaceChild(bodyNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type).replaceChild(bodyNode,  value);	  return    Node.newString(value).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	58	None	replace
210	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeValue(value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeValue(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeValue(value);	  return    Node.newString(type,    value).removePropsFrom(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
211	[BUG]  [BUGGY]  return  Node.newString(type,  value).setValue(this);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setValue(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setValue(this);	  return    Node.newString(type,    value).setValue(null);    	non-compiled	[CE]  ')'  expected	55	None	replace
212	[BUG]  [BUGGY]  return  Node.newString(type,  value).addValue(null);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addValue(null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addValue(null);	  return    Node.newString(type,    value).setValue(null);    	non-compiled	[CE]  ')'  expected	55	None	replace
213	[BUG]  [BUGGY]  return  Node.newString(type,  value).setValue(false);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setValue(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setValue(false);	  return    Node.newString(type,    value).setValue(null);    	non-compiled	[CE]  ')'  expected	55	None	replace
214	[BUG]  [BUGGY]  return  Node.newString(type,  value).setValue(null,  null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setValue(null,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setValue(null,  null);	  return    Node.newString(type,    value).setValue(null);    	non-compiled	[CE]  ')'  expected	55	None	replace
215	[BUG]  [BUGGY]  return  Node.newString(type,  value).setValue(0);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setValue(0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setValue(0);	  return    Node.newString(type,    value).setValue(null);    	non-compiled	[CE]  ')'  expected	55	None	replace
216	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  value);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
217	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(this.bodyNode);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
218	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.stringNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.stringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.stringNode);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
219	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  true);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  true);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
220	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  values);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  values);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  values);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
221	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  0);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode,  0);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
222	[BUG]  [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(parentNode,  value);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(parentNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  newBlock).replaceChild(parentNode,  value);	  return    Node.newString(type,    value).replaceChild(parentNode,    newBlock);    	non-compiled	[CE]  ')'  expected	2	None	replace
223	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.parentNode,  newBlock);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.parentNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.parentNode,  newBlock);	  return    Node.newString(type,    value).replaceChild(parentNode,    newBlock);    	non-compiled	[CE]  	2	None	replace
224	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(parentNode,    newBlock);    	non-compiled	[CE]  	2	None	replace
225	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(parentNode,  newBlock,  0);	  return    Node.newString(type,    value).replaceChild(parentNode,    newBlock);    	non-compiled	[CE]  	2	None	replace
226	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  null);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  null);	  return    Node.newString(type,    value).cloneNode();    	non-compiled	[CE]  ')'  expected	88	None	replace
227	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(bodyNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(bodyNode);	  return    Node.newString(type,    value).cloneFlagsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	47	None	replace
228	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(bodyNode,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(bodyNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(bodyNode,  value);	  return    Node.newString(type,    value).cloneFlagsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	47	None	replace
229	[BUG]  [BUGGY]  return  Node.newString(type,  value).reporterFrom(errorReporter);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).reporterFrom(errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).reporterFrom(errorReporter);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
230	[BUG]  [BUGGY]  return  Node.newString(type,  value),  errorReporter.cloneReporterFrom(ret);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  errorReporter.cloneReporterFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  errorReporter.cloneReporterFrom(ret);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
231	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReporterFrom(this);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReporterFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReporterFrom(this);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
232	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReporterFrom(errorReporter);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReporterFrom(errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReporterFrom(errorReporter);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
233	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReporter(this);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReporter(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReporter(this);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
234	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReporter(errorReporter);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReporter(errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReporter(errorReporter);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
235	[BUG]  [BUGGY]  return  Node.newString(type,  value).reporterFrom(null);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).reporterFrom(null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).reporterFrom(null);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
236	[BUG]  [BUGGY]  return  Node.newString(type,  value).setValue(value)+  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setValue(value)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setValue(value)+  1;	  return    Node.newString(type,    value).setValue(value);    	non-compiled	[CE]  ')'  expected	56	None	replace
237	[BUG]  [BUGGY]  return  Node.newString(type,  value).setLineno(value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setLineno(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setLineno(value);	  return    Node.newString(type,    value).setValue(value);    	non-compiled	[CE]  ')'  expected	56	None	replace
238	[BUG]  [BUGGY]  return  Node.newString(type,  value).setValue(fnNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setValue(fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setValue(fnNode);	  return    Node.newString(type,    value).setValue(value);    	non-compiled	[CE]  ')'  expected	56	None	replace
239	[BUG]  [BUGGY]  return  Node.newString(type,  value).setSourceName(value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setSourceName(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setSourceName(value);	  return    Node.newString(type,    value).setValue(value);    	non-compiled	[CE]  ')'  expected	56	None	replace
240	[BUG]  [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(this.node,  value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(this.node,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  newBlock).replaceChild(this.node,  value);	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  ')'  expected	5	None	replace
241	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  null);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  ')'  expected	5	None	replace
242	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  0);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  0);	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  ')'  expected	5	None	replace
243	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  false);	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  ')'  expected	5	None	replace
244	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(this.node,  newBlock);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(this.node,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(this.node,  newBlock);	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  ')'  expected	5	None	replace
245	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  value);	  return    Node.newString(type,    value).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	32	None	replace
246	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.stringNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.stringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.stringNode);	  return    Node.newString(type,    value).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	32	None	replace
247	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.targetNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.targetNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.targetNode);	  return    Node.newString(type,    value).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	32	None	replace
248	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  true);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  true);	  return    Node.newString(type,    value).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	32	None	replace
249	[BUG]  [BUGGY]  return  Node.newString(type,  value),  null,  null,  null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  null,  null,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  null,  null,  null);	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
250	[BUG]  [BUGGY]  return  Node.newString(type,  value),  null,  null,  0);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  null,  null,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  null,  null,  0);	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
251	[BUG]  [BUGGY]  return  Node.newString(type,  value),  null,  null,  false;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  null,  null,  false;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  null,  null,  false;	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
252	[BUG]  [BUGGY]  return  Node.newString(type,  value),  null,  null;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  null,  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  null,  null;	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
253	[BUG]  [BUGGY]  return  Node.newString(type,  value),  null,  null,  false);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  null,  null,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  null,  null,  false);	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuffer(value));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuffer(value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  StringBuffer(value));	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  ')'  expected	92	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuffer(),  value);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuffer(),  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  StringBuffer(),  value);	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  ')'  expected	92	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  value,  new  StringBuffer());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  value,  new  StringBuffer());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  value,  new  StringBuffer());	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  ')'  expected	92	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  StringBuffer());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  StringBuffer());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  value,  new  StringBuffer());	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  ')'  expected	92	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuffer(32));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuffer(32));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  StringBuffer(32));	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  ')'  expected	92	None	replace
259	[BUG]  [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(this.assign,  value);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(this.assign,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  newBlock).replaceChild(this.assign,  value);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
260	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  fnNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  fnNode);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
261	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(this.assign,  newBlock);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(this.assign,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(this.assign,  newBlock);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
262	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  null);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
263	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  0);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  0);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
264	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  reportError);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  reportError);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.assign,  newBlock,  reportError);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    new    StringTraversal());    	non-compiled	[CE]  ')'  expected	78	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  StringTraversal(type));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  StringTraversal(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  StringTraversal(type));	  NodeTraversal.traverse(compiler,    new    StringTraversal());    	non-compiled	[CE]  ')'  expected	78	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringTraversal());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringTraversal());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  StringTraversal());	  NodeTraversal.traverse(compiler,    new    StringTraversal());    	non-compiled	[CE]  ')'  expected	78	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  StringTraversal(),  value);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  StringTraversal(),  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  StringTraversal(),  value);	  NodeTraversal.traverse(compiler,    new    StringTraversal());    	non-compiled	[CE]  ')'  expected	78	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  StringTraversal());  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  value,  new  StringTraversal());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  value,  new  StringTraversal());	  NodeTraversal.traverse(compiler,    new    StringTraversal());    	non-compiled	[CE]  ')'  expected	78	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  Traversal());  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  Traversal());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  Traversal());	  NodeTraversal.traverse(compiler,    new    StringTraversal());    	non-compiled	[CE]  ')'  expected	78	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerTraversal());  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerTraversal());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformerTraversal());	  NodeTraversal.traverse(compiler,    new    StringTraversal());    	non-compiled	[CE]  ')'  expected	78	None	replace
272	[BUG]  [BUGGY]  return  newStringNode(type,  value,  0);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value,  0);	  return    newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	43	None	replace
273	[BUG]  [BUGGY]  return  newStringNode(type,  value,  this.node);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value,  this.node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value,  this.node);	  return    newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	43	None	replace
274	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.relativeNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.relativeNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.relativeNode);	  return    Node.newString(type,    value).clonePropsFrom(relativeNode);    	non-compiled	[CE]  ')'  expected	20	None	replace
275	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(value,  type,  value);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(value,  type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(value,  type,  value);	  return    NodeUtil.newStringNode(value,    type);    	non-compiled	[CE]  ')'  expected	76	None	replace
276	[BUG]  [BUGGY]  NodeUtil.newStringNode(type,  value);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeUtil.newStringNode(type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeUtil.newStringNode(type,  value);	  return    NodeUtil.newStringNode(value,    type);    	non-compiled	[CE]  ')'  expected	76	None	replace
277	[BUG]  [BUGGY]  Node  newBlock  =  NodeUtil.newStringNode(type,  value);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  NodeUtil.newStringNode(type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  NodeUtil.newStringNode(type,  value);	  return    NodeUtil.newStringNode(value,    type);    	non-compiled	[CE]  ')'  expected	76	None	replace
278	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(value,  type,  false);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(value,  type,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(value,  type,  false);	  return    NodeUtil.newStringNode(value,    type);    	non-compiled	[CE]  ')'  expected	76	None	replace
279	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(value,  value);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(value,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(value,  value);	  return    NodeUtil.newStringNode(value,    type);    	non-compiled	[CE]  ')'  expected	76	None	replace
280	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(null,  type);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(null,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(null,  type);	  return    NodeUtil.newStringNode(value,    type);    	non-compiled	[CE]  ')'  expected	76	None	replace
281	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(this);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).clonePropsFrom(this);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
282	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
283	[BUG]  [BUGGY]  return  node.newString(type,  value).clonePropsFrom(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  node.newString(type,  value).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  node.newString(type,  value).clonePropsFrom(this);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
284	[BUG]  [BUGGY]  return  newStringNode(type,  value).clonePropsFrom(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value).clonePropsFrom(this);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
285	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePathFrom(this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePathFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePathFrom(this);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
286	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(templateNode,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(templateNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(templateNode,  value);	  return    Node.newString(type,    value).removeFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	48	None	replace
287	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    null);    	non-compiled	[CE]  ')'  expected	59	None	replace
288	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  errorReporter);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  errorReporter);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    null);    	non-compiled	[CE]  ')'  expected	59	None	replace
289	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  this);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  this);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    null);    	non-compiled	[CE]  ')'  expected	59	None	replace
290	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  errorReporter,  null);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  errorReporter,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  errorReporter,  null);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    null);    	non-compiled	[CE]  ')'  expected	59	None	replace
291	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  false);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  newBlock,  false);	  return    Node.newString(type,    value).replaceChild(node,    newBlock);    	non-compiled	[CE]  ')'  expected	1	None	replace
292	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  newBlock,  this);	  return    Node.newString(type,    value).replaceChild(node,    newBlock);    	non-compiled	[CE]  ')'  expected	1	None	replace
293	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  node);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  newBlock,  node);	  return    Node.newString(type,    value).replaceChild(node,    newBlock);    	non-compiled	[CE]  ')'  expected	1	None	replace
294	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  this);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  this);	  return    Node.newString(type,    value).replaceChild(node,    newBlock);    	non-compiled	[CE]  ')'  expected	1	None	replace
295	[BUG]  [BUGGY]  return  Node.newString(type,  value,  null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value,  null);	  return    Node.newString(type,    value);    	non-compiled	[CE]  ')'  expected	16	None	replace
296	[BUG]  [BUGGY]  return  Node.newString(type,  value,  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value,  false);	  return    Node.newString(type,    value);    	non-compiled	[CE]  ')'  expected	16	None	replace
297	[BUG]  [BUGGY]  return  Node.newString(type,  value,  true);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value,  true);	  return    Node.newString(type,    value);    	non-compiled	[CE]  ')'  expected	16	None	replace
298	[BUG]  [BUGGY]  return  Node.newString(type,  value,  0);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value,  0);	  return    Node.newString(type,    value);    	non-compiled	[CE]  ')'  expected	16	None	replace
299	[BUG]  [BUGGY]  return  Node.newString(value,  type);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type);	  return    Node.newString(type,    value);    	non-compiled	[CE]  ')'  expected	16	None	replace
300	[BUG]  [BUGGY]  Node  newStringNode  =  Node.newString(type,  value).toString();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newStringNode  =  Node.newString(type,  value).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newStringNode  =  Node.newString(type,  value).toString();	  return    Node.newString(value,    type).toString();    	non-compiled	[CE]  ')'  expected	70	None	replace
301	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).toString();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).toString();	  return    Node.newString(value,    type).toString();    	non-compiled	[CE]  ')'  expected	70	None	replace
302	[BUG]  [BUGGY]  return  Node.newString(value,  value).toString();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).toString();	  return    Node.newString(value,    type).toString();    	non-compiled	[CE]  ')'  expected	70	None	replace
303	[BUG]  [BUGGY]  return  node.newString(type,  value).toString();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  node.newString(type,  value).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  node.newString(type,  value).toString();	  return    Node.newString(value,    type).toString();    	non-compiled	[CE]  ')'  expected	70	None	replace
304	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  value);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
305	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.bindNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.bindNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(this.bindNode);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
306	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  null);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  null);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
307	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  newBlock);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  newBlock);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
308	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  true);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  true);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
309	[BUG]  [BUGGY]  Node  assign  =  Node.newString(type,  value).clonePropsFrom(this.assign);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  assign  =  Node.newString(type,  value).clonePropsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  assign  =  Node.newString(type,  value).clonePropsFrom(this.assign);	  return    Node.newString(value,    type).clonePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	64	None	replace
310	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.assign,  value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.assign,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(this.assign,  value);	  return    Node.newString(value,    type).clonePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	64	None	replace
311	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assert);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assert);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.assert);	  return    Node.newString(value,    type).clonePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	64	None	replace
312	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).cloneFlagsFrom(templateNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).cloneFlagsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).cloneFlagsFrom(templateNode);	  return    Node.newString(value,    type).cloneFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	73	None	replace
313	[BUG]  [BUGGY]  return  node.newString(type,  value).cloneFlagsFrom(templateNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  node.newString(type,  value).cloneFlagsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  node.newString(type,  value).cloneFlagsFrom(templateNode);	  return    Node.newString(value,    type).cloneFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	73	None	replace
314	[BUG]  [BUGGY]  return  newStringNode(type,  value).cloneFlagsFrom(templateNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value).cloneFlagsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value).cloneFlagsFrom(templateNode);	  return    Node.newString(value,    type).cloneFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	73	None	replace
315	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.assign,  value);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.assign,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.assign,  value);	  return    Node.newString(type,    value).cloneFlagsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	51	None	replace
316	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(this.assign);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFlagsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFlagsFrom(this.assign);	  return    Node.newString(type,    value).cloneFlagsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	51	None	replace
317	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.target);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.target);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.target);	  return    Node.newString(type,    value).cloneFlagsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	51	None	replace
318	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).cloneFunction(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).cloneFunction(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).cloneFunction(this);	  return    Node.newString(type,    value).cloneFunction(this);    	non-compiled	[CE]  ')'  expected	82	None	replace
319	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFunction(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFunction(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFunction(this);	  return    Node.newString(type,    value).cloneFunction(this);    	non-compiled	[CE]  ')'  expected	82	None	replace
320	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(this,  config);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(this,  config);	  return    Node.newString(type,    value).cloneFunction(this);    	non-compiled	[CE]  ')'  expected	82	None	replace
321	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneTransform(this);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneTransform(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneTransform(this);	  return    Node.newString(type,    value).cloneFunction(this);    	non-compiled	[CE]  ')'  expected	82	None	replace
322	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.sourceNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.sourceNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.sourceNode);	  return    Node.newString(type,    value).clonePropsFrom(sourceNode);    	non-compiled	[CE]  ')'  expected	87	None	replace
323	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(sourceNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(sourceNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(sourceNode);	  return    Node.newString(type,    value).clonePropsFrom(sourceNode);    	non-compiled	[CE]  ')'  expected	87	None	replace
324	[BUG]  [BUGGY]  return  Node.newString(type,  value).getPropsFrom(this.assign);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).getPropsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).getPropsFrom(this.assign);	  return    Node.newString(type,    value).removePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	29	None	replace
325	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.node);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(this.node);	  return    Node.newString(type,    value).removePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	29	None	replace
326	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.target);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.target);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(this.target);	  return    Node.newString(type,    value).removePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	29	None	replace
327	[BUG]  [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(child,  value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  newBlock).replaceChild(child,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  newBlock).replaceChild(child,  value);	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  ')'  expected	91	None	replace
328	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(n,  newBlock);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(n,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(n,  newBlock);	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  	91	None	replace
329	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeChild(child,  newBlock);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeChild(child,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeChild(child,  newBlock);	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  	91	None	replace
330	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clone();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).clone();	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  	19	None	replace
331	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).removePropsFrom(templateNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).removePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).removePropsFrom(templateNode);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  	19	None	replace
332	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(value);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  	19	None	replace
333	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).cloneFlagsFrom(templateNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).cloneFlagsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).cloneFlagsFrom(templateNode);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  	19	None	replace
334	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(fnNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(fnNode);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
335	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this.assign);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this.assign);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
336	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(this.bodyNode);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
337	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value,  false).clone();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value,  false).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value,  false).clone();	  return    Node.newStringNode(type,    value).clone();    	non-compiled	[CE]  ')'  expected	13	None	replace
338	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).removeChild(value);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).removeChild(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).removeChild(value);	  return    Node.newStringNode(type,    value).clone();    	non-compiled	[CE]  ')'  expected	13	None	replace
339	[BUG]  [BUGGY]  Node  newBlock  =  NodeUtil.newStringNode(type);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  NodeUtil.newStringNode(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  NodeUtil.newStringNode(type);	  return    NodeUtil.newStringNode(value);    	non-compiled	[CE]  ')'  expected	79	None	replace
340	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type);	  return    NodeUtil.newStringNode(value);    	non-compiled	[CE]  ')'  expected	79	None	replace
341	[BUG]  [BUGGY]  return  Node.newString(value,  0).clonePropsFrom(type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  0).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  0).clonePropsFrom(type);	  return    Node.newString(value,    value).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	69	None	replace
342	[BUG]  [BUGGY]  return  Node.newString(value,  name).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  name).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  name).clonePropsFrom(type);	  return    Node.newString(value,    value).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	69	None	replace
343	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(false);	  return    Node.newString(type,    value).cloneFunction(value);    	non-compiled	[CE]  ')'  expected	54	None	replace
344	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFunction(value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFunction(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFunction(value);	  return    Node.newString(type,    value).cloneFunction(value);    	non-compiled	[CE]  ')'  expected	54	None	replace
345	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(this.assign);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(this.assign);	  return    Node.newString(type,    value).cloneFunction(value);    	non-compiled	[CE]  ')'  expected	54	None	replace
346	[BUG]  [BUGGY]  return  Node.newString(type,  value),  this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  this);	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
347	[BUG]  [BUGGY]  return  Node.newString(type,  value)&  0xFFFF;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)&  0xFFFF;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)&  0xFFFF;	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
348	[BUG]  [BUGGY]  return  Node.newString(type,  value)&  0x7f;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)&  0x7f;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)&  0x7f;	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
349	[BUG]  [BUGGY]  return  Node.newString(type,  value)||  null;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)||  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)||  null;	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
350	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(config,  value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(config,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(config,  value);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
351	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this,  config,  null);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
352	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  errorReporter);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this,  config,  errorReporter);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
353	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  fileOverviewInfo);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  fileOverviewInfo);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this,  config,  fileOverviewInfo);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
354	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(config,  this);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(config,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(config,  this);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
355	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).append(')');  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).append(')');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).append(')');	  return    Node.newString(type,    value).append(')');    	non-compiled	[CE]  ')'  expected	71	None	replace
356	[BUG]  [BUGGY]  return  Node.newString(type,  value).append('/');  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).append('/');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).append('/');	  return    Node.newString(type,    value).append(')');    	non-compiled	[CE]  ')'  expected	71	None	replace
357	[BUG]  [BUGGY]  return  Node.newString(type,  value).append(':');  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).append(':');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).append(':');	  return    Node.newString(type,    value).append(')');    	non-compiled	[CE]  ')'  expected	71	None	replace
358	[BUG]  [BUGGY]  return  Node.newString(type,  value).append('  ');  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).append('  ');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).append('  ');	  return    Node.newString(type,    value).append(')');    	non-compiled	[CE]  ')'  expected	71	None	replace
359	[BUG]  [BUGGY]  return  Node.newString(type,  value).append(']');  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).append(']');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).append(']');	  return    Node.newString(type,    value).append(')');    	non-compiled	[CE]  ')'  expected	71	None	replace
360	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(msgNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(msgNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(msgNode);	  return    Node.newString(type,    value).clonePropsFrom(msgNode);    	non-compiled	[CE]  ')'  expected	34	None	replace
361	[BUG]  [BUGGY]  Node  bodyNode  =  Node.newString(type,  value).clonePropsFrom(bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  bodyNode  =  Node.newString(type,  value).clonePropsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  bodyNode  =  Node.newString(type,  value).clonePropsFrom(bodyNode);	  return    Node.newString(value,    type).clonePropsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	83	None	replace
362	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(bodyNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).clonePropsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).clonePropsFrom(bodyNode);	  return    Node.newString(value,    type).clonePropsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	83	None	replace
363	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(childNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(childNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(childNode);	  return    Node.newString(value,    type).clonePropsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	83	None	replace
364	[BUG]  [BUGGY]  Node  bodyNode  =  Node.newString(type,  value).clonePropsFrom(this);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  bodyNode  =  Node.newString(type,  value).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  bodyNode  =  Node.newString(type,  value).clonePropsFrom(this);	  return    Node.newString(value,    type).clonePropsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	83	None	replace
365	[BUG]  [BUGGY]  return  Node.newString(type,  this.target).clonePropsFrom(value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.target).clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.target).clonePropsFrom(value);	  return    Node.newString(type,    value).clonePropsFrom(this.target);    	non-compiled	[CE]  ')'  expected	31	None	replace
366	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.target,  config);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.target,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.target,  config);	  return    Node.newString(type,    value).clonePropsFrom(this.target);    	non-compiled	[CE]  ')'  expected	31	None	replace
367	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.target,  newBlock);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.target,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.target,  newBlock);	  return    Node.newString(type,    value).clonePropsFrom(this.target);    	non-compiled	[CE]  ')'  expected	31	None	replace
368	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.fnNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.fnNode);	  return    Node.newString(type,    value).cloneFlagsFrom(fnNode);    	non-compiled	[CE]  	50	None	replace
369	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(irNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(irNode);	  return    Node.newString(type,    value).cloneFlagsFrom(fnNode);    	non-compiled	[CE]  	50	None	replace
370	[BUG]  [BUGGY]  return  newStringNode(value,  type,  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(value,  type,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(value,  type,  null);	  return    newStringNode(type,    value,    null);    	non-compiled	[CE]  	45	None	replace
371	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(bodyNode,  newBlock,  type);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(bodyNode,  newBlock,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(bodyNode,  newBlock,  type);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  	4	None	replace
372	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(childNode,  newBlock,  value);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(childNode,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(childNode,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  	4	None	replace
373	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  0);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  newBlock,  0);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  	4	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.value,  new  TransformDispatcher());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this.value,  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  this.value,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  	93	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter,  new  TransformDispatcher());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter,  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  errorReporter,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  	93	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newStringNode(value),  new  TransformDispatcher());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newStringNode(value),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  newStringNode(value),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  	93	None	replace
377	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(sourceNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(sourceNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(sourceNode);	  return    Node.newString(type,    value).clonePropsFrom(sourceNode);    	non-compiled	[CE]  	87	None	replace
378	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(sourceNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(sourceNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(sourceNode);	  return    Node.newString(type,    value).clonePropsFrom(sourceNode);    	non-compiled	[CE]  	87	None	replace
379	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePathFrom(sourceNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePathFrom(sourceNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePathFrom(sourceNode);	  return    Node.newString(type,    value).clonePropsFrom(sourceNode);    	non-compiled	[CE]  	87	None	replace
380	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceAll( "n ",   "n ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceAll( "n ",   "n ");  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceAll( "n ",   "n ");	  return    Node.newString(type,    value).replaceAll(   "n   ",   "n   ");    	non-compiled	[CE]  	72	None	replace
381	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(bodyNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(bodyNode);	  return    Node.newString(type,    value).cloneFlagsFrom(bodyNode);    	non-compiled	[CE]  	47	None	replace
382	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(bodyNode  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(bodyNode  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(bodyNode  +  1);	  return    Node.newString(type,    value).cloneFlagsFrom(bodyNode);    	non-compiled	[CE]  	47	None	replace
383	[BUG]  [BUGGY]  return  Node.newString(value,  this.assign).clonePropsFrom(type);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  this.assign).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  this.assign).clonePropsFrom(type);	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  	27	None	replace
384	[BUG]  [BUGGY]  return  Node.newString(type,  this.assign).cloneNode(value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.assign).cloneNode(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.assign).cloneNode(value);	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  	27	None	replace
385	[BUG]  [BUGGY]  return  Node.newString(type,  this.assign).cloneNodesFrom(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.assign).cloneNodesFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.assign).cloneNodesFrom(value);	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  	27	None	replace
386	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.report);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  	66	None	replace
387	[BUG]  [BUGGY]  return  Node.newString(this.report,  value).clonePropsFrom(type);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(this.report,  value).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(this.report,  value).clonePropsFrom(type);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  	66	None	replace
388	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReportsFrom(this.report);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReportsFrom(this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReportsFrom(this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  ')'  expected	66	None	replace
389	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneNode(this.report);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneNode(this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneNode(this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  ')'  expected	66	None	replace
390	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(value);	  return    Node.newString(type,    value).removePropsFrom(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
391	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(value,  newStringNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(value,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(value,  newStringNode);	  return    Node.newString(type,    value).removePropsFrom(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
392	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(fnNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(fnNode);	  return    Node.newString(type,    value).clonePropsFrom(fnNode);    	non-compiled	[CE]  ')'  expected	33	None	replace
393	[BUG]  [BUGGY]  return  NodeUtil.newString(value,  type).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newString(value,  type).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newString(value,  type).clonePropsFrom(templateNode);	  return    Node.newString(value,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	68	None	replace
394	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(msgNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(msgNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(msgNode);	  return    Node.newString(type,    value).clonePropsFrom(msgNode);    	non-compiled	[CE]  ')'  expected	34	None	replace
395	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(msgNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(msgNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(msgNode);	  return    Node.newString(type,    value).clonePropsFrom(msgNode);    	non-compiled	[CE]  ')'  expected	34	None	replace
396	[BUG]  [BUGGY]  return  Node.newString(value,  type).setValue(value);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).setValue(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).setValue(value);	  return    Node.newString(type,    value).setValue(value);    	non-compiled	[CE]  ')'  expected	56	None	replace
397	[BUG]  [BUGGY]  return  Node.newString(value,  value).cloneFlagsFrom(templateNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).cloneFlagsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).cloneFlagsFrom(templateNode);	  return    Node.newString(value,    type).cloneFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	73	None	replace
398	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(templateNode,  value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(templateNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(templateNode,  value);	  return    Node.newString(value,    type).cloneFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	73	None	replace
399	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(ret);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(ret);	  return    Node.newString(value,    type).cloneFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	73	None	replace
400	[BUG]  [BUGGY]  return  Node.newString(value,  value).clone();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).clone();	  return    Node.newString(value,    type).clone();    	non-compiled	[CE]  ')'  expected	15	None	replace
401	[BUG]  [BUGGY]  return  Node.newString(value,  type).reset();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).reset();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).reset();	  return    Node.newString(value,    type).clone();    	non-compiled	[CE]  ')'  expected	15	None	replace
402	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(this,  newStringNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(this,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(this,  newStringNode);	  return    Node.newString(value,    type).clone();    	non-compiled	[CE]  ')'  expected	15	None	replace
403	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(prototypeNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(prototypeNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(prototypeNode);	  return    Node.newString(type,    value).removePropsFrom(prototypeNode);    	non-compiled	[CE]  ')'  expected	25	None	replace
404	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(prototypeNode);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(prototypeNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(prototypeNode);	  return    Node.newString(type,    value).removePropsFrom(prototypeNode);    	non-compiled	[CE]  ')'  expected	25	None	replace
405	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(value);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(value);	  return    Node.newString(type,    value).cloneFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	46	None	replace
406	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneTree();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneTree();	  return    Node.newString(type,    value).cloneTree();    	non-compiled	[CE]  ')'  expected	90	None	replace
407	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newStringNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  newStringNode);	  return    Node.newString(type,    value).cloneTree();    	non-compiled	[CE]  ')'  expected	90	None	replace
408	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(this.bodyNode);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
409	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode  +  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.bodyNode  +  1);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
410	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.childNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.childNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.childNode);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
411	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  value)+  1;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  value)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type,  value)+  1;	  return    NodeUtil.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	40	None	replace
412	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  value  +  1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  value  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type,  value  +  1);	  return    NodeUtil.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	40	None	replace
413	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(buffer,  value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(buffer,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(buffer,  value);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
414	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  newStringNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  newStringNode);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
415	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  0);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  0);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
416	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  new  String(value));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  new  String(value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  new  String(value));	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
417	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneReporterFrom(ret);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneReporterFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneReporterFrom(ret);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
418	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReporterFrom(value);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReporterFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReporterFrom(value);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
419	[BUG]  [BUGGY]  return  Node.newString(type,  value).addReporterFrom(ret);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addReporterFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addReporterFrom(ret);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
420	[BUG]  [BUGGY]  return  Node.newString(type,  value).reporterFrom(this);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).reporterFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).reporterFrom(this);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
421	[BUG]  [BUGGY]  return  Node.newString(value,  type).addPropsFrom(templateNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).addPropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).addPropsFrom(templateNode);	  return    Node.newString(type,    value).addPropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	61	None	replace
422	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(bodyNode);	  return    Node.newString(type,    value).addPropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	61	None	replace
423	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(ret);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(ret);	  return    Node.newString(type,    value).addPropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	61	None	replace
424	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(node);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(node);	  return    Node.newString(type,    value).addPropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	61	None	replace
425	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this,  config);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(this,  config);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
426	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneParametersFrom(this,  config);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneParametersFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneParametersFrom(this,  config);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
427	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReporterFrom(this,  config);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReporterFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReporterFrom(this,  config);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
428	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneNodesFrom(this,  config);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneNodesFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneNodesFrom(this,  config);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
429	[BUG]  [BUGGY]  return  Node.newString(value,  null).clonePropsFrom(type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  null).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  null).clonePropsFrom(type);	  return    Node.newString(value,    value).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	69	None	replace
430	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(bufferNode);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(bufferNode);	  return    Node.newString(type,    value).clonePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	86	None	replace
431	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(bufferNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(bufferNode);	  return    Node.newString(type,    value).clonePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	86	None	replace
432	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bufferNode,  newStringNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bufferNode,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bufferNode,  newStringNode);	  return    Node.newString(type,    value).clonePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	86	None	replace
433	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(bufferNode,  value);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(bufferNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(bufferNode,  value);	  return    Node.newString(type,    value).clonePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	86	None	replace
434	[BUG]  [BUGGY]  return  Node.newString(value,  type).removeFlagsFrom(templateNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removeFlagsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removeFlagsFrom(templateNode);	  return    Node.newString(type,    value).removeFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	48	None	replace
435	[BUG]  [BUGGY]  return  Node.newString(type,  value).addFlagsFrom(templateNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addFlagsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addFlagsFrom(templateNode);	  return    Node.newString(type,    value).removeFlagsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	48	None	replace
436	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(this.assign);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(this.assign);	  return    Node.newString(type,    value).cloneFlagsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	51	None	replace
437	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.string);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.string);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.string);	  return    Node.newString(type,    value).cloneFlagsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	51	None	replace
438	[BUG]  [BUGGY]  return  transformDispatcher.newStringNode(value,  type);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  transformDispatcher.newStringNode(value,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  transformDispatcher.newStringNode(value,  type);	  return    transformDispatcher.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	41	None	replace
439	[BUG]  [BUGGY]  return  transformDispatcher.newStringNode(type,  value  +  1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  transformDispatcher.newStringNode(type,  value  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  transformDispatcher.newStringNode(type,  value  +  1);	  return    transformDispatcher.newStringNode(type,    value);    	non-compiled	[CE]  ')'  expected	41	None	replace
440	[BUG]  [BUGGY]  return  Node.newString(value,  type).replace('n',  'r');  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replace('n',  'r');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replace('n',  'r');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
441	[BUG]  [BUGGY]  return  Node.newString(value).replace('n',  'r');  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replace('n',  'r');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replace('n',  'r');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
442	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('n',  'r')+  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('n',  'r')+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('n',  'r')+  1;	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
443	[BUG]  [BUGGY]  return  Node.newString(value).replace('n',  type);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replace('n',  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replace('n',  type);	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  	95	None	replace
444	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('n',  'r'  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('n',  'r'  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('n',  'r'  +  1);	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  	95	None	replace
445	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(bodyNode,  newBlock,  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(bodyNode,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(bodyNode,  newBlock,  value);	  return    Node.newString(value).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  	58	None	replace
446	[BUG]  [BUGGY]  return  Node.newStringNode(value,  type).toString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(value,  type).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(value,  type).toString();	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  	35	None	replace
447	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).returnValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).returnValue();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).returnValue();	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  	35	None	replace
448	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).append('n');  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).append('n');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).append('n');	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  	35	None	replace
449	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(child,  newBlock);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(child,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(child,  newBlock);	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  	91	None	replace
450	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(child,  newBlock)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(child,  newBlock)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(child,  newBlock)+  1;	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  	91	None	replace
451	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(child,  newBlock  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(child,  newBlock  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(child,  newBlock  +  1);	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  	91	None	replace
452	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(child,  newBlock);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(child,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(child,  newBlock);	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  	91	None	replace
453	[BUG]  [BUGGY]  return  newStringNode(type,  value  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value  +  1);	  return    newStringNode(type,    value);    	non-compiled	[CE]  	43	None	replace
454	[BUG]  [BUGGY]  return  newStringNode(value,  type);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(value,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(value,  type);	  return    newStringNode(type,    value);    	non-compiled	[CE]  	43	None	replace
455	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(this,  newStringNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(this,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(this,  newStringNode);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  	81	None	replace
456	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode)+  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this,  newStringNode)+  1;	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  	81	None	replace
457	[BUG]  [BUGGY]  return  Node.newString(type,  newStringNode).replaceChild(this,  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  newStringNode).replaceChild(this,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  newStringNode).replaceChild(this,  value);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  	81	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(value,  type));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(value,  type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(value,  type));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    value));    	non-compiled	[CE]  	42	None	replace
459	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(node);	  return    Node.newString(type,    value).removePropsFrom(node);    	non-compiled	[CE]  	24	None	replace
460	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(node  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(node  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(node  +  1);	  return    Node.newString(type,    value).removePropsFrom(node);    	non-compiled	[CE]  	24	None	replace
461	[BUG]  [BUGGY]  return  Node.newStringNode(value,  type);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(value,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(value,  type);	  return    Node.newStringNode(type,    value);    	non-compiled	[CE]  	44	None	replace
462	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value  +  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value  +  1);	  return    Node.newStringNode(type,    value);    	non-compiled	[CE]  	44	None	replace
463	[BUG]  [BUGGY]  return  Node.newString(value,  type).setValue(null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).setValue(null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).setValue(null);	  return    Node.newString(type,    value).setValue(null);    	non-compiled	[CE]  	55	None	replace
464	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(bodyNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(bodyNode);	  return    Node.newString(type,    value).removePropsFrom(bodyNode);    	non-compiled	[CE]  	23	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter,  new  StringBuffer());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter,  new  StringBuffer());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  errorReporter,  new  StringBuffer());	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  	92	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuilder());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuilder());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  StringBuilder());	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  	92	None	replace
467	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  newStringNode(value));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  newStringNode(value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  newStringNode(value));	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  	92	None	replace
468	[BUG]  [BUGGY]  return  newStringNode(value,  type.toString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(value,  type.toString());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(value,  type.toString());	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  	94	None	replace
469	[BUG]  [BUGGY]  return  newStringNode(type,  value  ==  null?  null  :  value.toString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value  ==  null?  null  :  value.toString());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value  ==  null?  null  :  value.toString());	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  	94	None	replace
470	[BUG]  [BUGGY]  return  newStringNode(type,  value  ==  null? "null "  :  value.toString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value  ==  null? "null "  :  value.toString());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value  ==  null? "null "  :  value.toString());	  return    newStringNode(type,    value.toString());    	non-compiled	[CE]  	94	None	replace
471	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneIRFactory(this);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneIRFactory(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneIRFactory(this);	  return    Node.newString(type,    value).cloneIRFactory(this);    	non-compiled	[CE]  	11	None	replace
472	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneTransformer(this);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneTransformer(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneTransformer(this);	  return    Node.newString(type,    value).cloneIRFactory(this);    	non-compiled	[CE]  	11	None	replace
473	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(value,  type,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(value,  type,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(value,  type,  null);	  return    NodeUtil.newStringNode(value,    type);    	non-compiled	[CE]  	76	None	replace
474	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(this.node,  newBlock);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(this.node,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(this.node,  newBlock);	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  	5	None	replace
475	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  ')');  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  ')');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  ')');	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  	5	None	replace
476	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock)+  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.node,  newBlock)+  1;	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  	5	None	replace
477	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFunction(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFunction(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFunction(value);	  return    Node.newString(type,    value).cloneFunction(value);    	non-compiled	[CE]  	54	None	replace
478	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(fnNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(fnNode);	  return    Node.newString(type,    value).cloneFunction(value);    	non-compiled	[CE]  	54	None	replace
479	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(bufferNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(bufferNode);	  return    Node.newString(type,    value).removePropsFrom(bufferNode);    	non-compiled	[CE]  	22	None	replace
480	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(bufferNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(bufferNode);	  return    Node.newString(type,    value).removePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
481	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(bufferNode  +  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(bufferNode  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(bufferNode  +  1);	  return    Node.newString(type,    value).removePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
482	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock)+  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newBlock)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  newBlock)+  1;	  return    Node.newString(type,    value).replaceChild(node,    newBlock);    	non-compiled	[CE]  ')'  expected	1	None	replace
483	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(this);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(this);	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
484	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeValuesFrom(this);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeValuesFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeValuesFrom(this);	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
485	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  ')');  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  ')');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this,  ')');	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
486	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneNode();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneNode();	  return    Node.newString(type,    value).cloneNode();    	non-compiled	[CE]  ')'  expected	88	None	replace
487	[BUG]  [BUGGY]  return  Node.newString(value,  value).clonePropsFrom(ret);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).clonePropsFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).clonePropsFrom(ret);	  return    Node.newString(value,    type).clonePropsFrom(ret);    	non-compiled	[CE]  ')'  expected	62	None	replace
488	[BUG]  [BUGGY]  return  Node.newString(ret,  type).clonePropsFrom(value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(ret,  type).clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(ret,  type).clonePropsFrom(value);	  return    Node.newString(value,    type).clonePropsFrom(ret);    	non-compiled	[CE]  ')'  expected	62	None	replace
489	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(t);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(t);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(t);	  return    Node.newString(value,    type).clonePropsFrom(ret);    	non-compiled	[CE]  ')'  expected	62	None	replace
490	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(this.node,  type,  value);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(this.node,  type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(this.node,  type,  value);	  return    NodeUtil.newStringNode(value);    	non-compiled	[CE]  ')'  expected	79	None	replace
491	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(this.node,  value);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(this.node,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(this.node,  value);	  return    NodeUtil.newStringNode(value);    	non-compiled	[CE]  ')'  expected	79	None	replace
492	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock)+  1;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(parent,  newBlock)+  1;	  return    Node.newString(type,    value).replaceChild(parent,    newBlock);    	non-compiled	[CE]  ')'  expected	7	None	replace
493	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock  +  1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(parent,  newBlock  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(parent,  newBlock  +  1);	  return    Node.newString(type,    value).replaceChild(parent,    newBlock);    	non-compiled	[CE]  ')'  expected	7	None	replace
494	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(this.assign,  newBlock);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(this.assign,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(this.assign,  newBlock);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
495	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock)+  1;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.assign,  newBlock)+  1;	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
496	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock  +  1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.assign,  newBlock  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.assign,  newBlock  +  1);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
497	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.apply,  newBlock);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.apply,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.apply,  newBlock);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
498	[BUG]  [BUGGY]  return  Node.newString(value,  type).remove();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).remove();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).remove();	  return    Node.newString(type,    value).remove();    	non-compiled	[CE]  ')'  expected	17	None	replace
499	[BUG]  [BUGGY]  return  Node.newString(type,  value).add();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).add();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).add();	  return    Node.newString(type,    value).remove();    	non-compiled	[CE]  ')'  expected	17	None	replace
500	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(n,  newStringNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(n,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(n,  newStringNode);	  return    Node.newString(type,    value).remove();    	non-compiled	[CE]  ')'  expected	17	None	replace
501	[BUG]  [BUGGY]  return  Node.newString(value,  type),  null,  null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type),  null,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type),  null,  null);	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
502	[BUG]  [BUGGY]  return  Node.newString(type,  value),  null,  0);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  null,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  null,  0);	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
503	[BUG]  [BUGGY]  return  Node.newString(value,  type),  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type),  null);	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
504	[BUG]  [BUGGY]  return  Node.newString(type,  value),  this;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  this;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  this;	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
505	[BUG]  [BUGGY]  return  Node.newString(type,  value)&  0x7F;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)&  0x7F;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)&  0x7F;	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  StringTraversal(),  this);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  StringTraversal(),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  StringTraversal(),  this);	  NodeTraversal.traverse(compiler,    new    StringTraversal());    	non-compiled	[CE]  ')'  expected	78	None	replace
507	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(bufferNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(bufferNode);	  return    Node.newString(type,    value).cloneFlagsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	74	None	replace
508	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.target);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.target);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(this.target);	  return    Node.newString(type,    value).clonePropsFrom(this.target);    	non-compiled	[CE]  ')'  expected	31	None	replace
509	[BUG]  [BUGGY]  return  Node.newString(this.target,  value).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(this.target,  value).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(this.target,  value).clonePropsFrom(type);	  return    Node.newString(type,    value).clonePropsFrom(this.target);    	non-compiled	[CE]  ')'  expected	31	None	replace
510	[BUG]  [BUGGY]  return  Node.newString(this.target,  value).clonePropsFrom(value);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(this.target,  value).clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(this.target,  value).clonePropsFrom(value);	  return    Node.newString(type,    value).clonePropsFrom(this.target);    	non-compiled	[CE]  ')'  expected	31	None	replace
511	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(this.target);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(this.target);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(this.target);	  return    Node.newString(type,    value).clonePropsFrom(this.target);    	non-compiled	[CE]  ')'  expected	31	None	replace
512	[BUG]  [BUGGY]  return  Node.newString(value,  type).removeFlagsFrom(value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removeFlagsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removeFlagsFrom(value);	  return    Node.newString(type,    value).removeFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	75	None	replace
513	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceFlagsFrom(value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceFlagsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceFlagsFrom(value);	  return    Node.newString(type,    value).removeFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	75	None	replace
514	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.reporter);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.reporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(this.reporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
515	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneNode(this.reporter);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneNode(this.reporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneNode(this.reporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
516	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlags(this.reporter);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlags(this.reporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlags(this.reporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
517	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(parentNode,  newBlock);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(parentNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(parentNode,  newBlock);	  return    Node.newString(type,    value).replaceChild(parentNode,    newBlock);    	non-compiled	[CE]  ')'  expected	2	None	replace
518	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(childNode,  newBlock);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(childNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(childNode,  newBlock);	  return    Node.newString(type,    value).replaceChild(parentNode,    newBlock);    	non-compiled	[CE]  ')'  expected	2	None	replace
519	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(parentNode,  newBlock);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(parentNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(parentNode,  newBlock);	  return    Node.newString(type,    value).replaceChild(parentNode,    newBlock);    	non-compiled	[CE]  ')'  expected	2	None	replace
520	[BUG]  [BUGGY]  return  Node.newString(value,  value).clonePropsFrom(this);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).clonePropsFrom(this);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
521	[BUG]  [BUGGY]  return  Node.newString(value,  this).clonePropsFrom(this);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  this).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  this).clonePropsFrom(this);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
522	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneNode(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneNode(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneNode(this);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
523	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.apply);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.apply);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(this.apply);	  return    Node.newString(type,    value).clonePropsFrom(this.apply);    	non-compiled	[CE]  ')'  expected	65	None	replace
524	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFunction(this.apply);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFunction(this.apply);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFunction(this.apply);	  return    Node.newString(type,    value).clonePropsFrom(this.apply);    	non-compiled	[CE]  ')'  expected	65	None	replace
525	[BUG]  [BUGGY]  return  Node.newStringNode(value,  type).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(value,  type).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(value,  type).clonePropsFrom(templateNode);	  return    Node.newStringNode(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	18	None	replace
526	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).removePropsFrom(bodyNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).removePropsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).removePropsFrom(bodyNode);	  return    Node.newStringNode(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	18	None	replace
527	[BUG]  [BUGGY]  return  Node.newString(value,  value).replaceChild(bodyNode,  newBlock);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).replaceChild(bodyNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).replaceChild(bodyNode,  newBlock);	  return    Node.newString(value,    type).replaceChild(bodyNode,    newBlock);    	non-compiled	[CE]  ')'  expected	57	None	replace
528	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(value,  type).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(value,  type).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(value,  type).clonePropsFrom(templateNode);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
529	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).reset();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).reset();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).reset();	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
530	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(bodyNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(bodyNode);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
531	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(ret);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).clonePropsFrom(ret);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
532	[BUG]  [BUGGY]  return  Node.newString(value,  type),  false,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type),  false,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type),  false,  null);	  return    Node.newString(type,    value),    false,    null);    	non-compiled	[CE]  ')'  expected	39	None	replace
533	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(relativeNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(relativeNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(relativeNode);	  return    Node.newString(type,    value).clonePropsFrom(relativeNode);    	non-compiled	[CE]  ')'  expected	20	None	replace
534	[BUG]  [BUGGY]  return  Node.newString(value,  value).clonePropsFrom(this.assign);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).clonePropsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).clonePropsFrom(this.assign);	  return    Node.newString(value,    type).clonePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	64	None	replace
535	[BUG]  [BUGGY]  return  Node.newString(value,  this.type).clonePropsFrom(this.assign);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  this.type).clonePropsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  this.type).clonePropsFrom(this.assign);	  return    Node.newString(value,    type).clonePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	64	None	replace
536	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.bindNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.bindNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(this.bindNode);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
537	[BUG]  [BUGGY]  return  Node.newString(type,  value),  this.bindNode.clonePropsFrom(value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  this.bindNode.clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  this.bindNode.clonePropsFrom(value);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
538	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneNodesFrom(this.bindNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneNodesFrom(this.bindNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneNodesFrom(this.bindNode);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
539	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode  +  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bindNode  +  1);	  return    Node.newString(type,    value).clonePropsFrom(this.bindNode);    	non-compiled	[CE]  ')'  expected	67	None	replace
540	[BUG]  [BUGGY]  return  NodeUtil.newString(type,  value).replaceChild(bodyNode,  newBlock);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newString(type,  value).replaceChild(bodyNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newString(type,  value).replaceChild(bodyNode,  newBlock);	  return    Node.newString(type,    newBlock).replaceChild(bodyNode,    value);    	non-compiled	[CE]  ')'  expected	3	None	replace
541	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  node);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  node);	  return    Node.newString(type,    newBlock).replaceChild(bodyNode,    value);    	non-compiled	[CE]  ')'  expected	3	None	replace
542	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  this.assign,  value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  this.assign,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bodyNode,  this.assign,  value);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
543	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.apply,  value);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.apply,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.apply,  value);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
544	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  newStringNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.assign,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.assign,  newStringNode);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
545	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.report,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.report,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.report,  value);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
546	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(prototype);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(prototype);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(prototype);	  return    Node.newString(type,    value).removePropsFrom(prototype);    	non-compiled	[CE]  ')'  expected	26	None	replace
547	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(prototype);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(prototype);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(prototype);	  return    Node.newString(type,    value).removePropsFrom(prototype);    	non-compiled	[CE]  ')'  expected	26	None	replace
548	[BUG]  [BUGGY]  return  Node.newString(value).replaceChild(bodyNode,  newBlock,  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).replaceChild(bodyNode,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).replaceChild(bodyNode,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    null);    	non-compiled	[CE]  ')'  expected	59	None	replace
549	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(bodyNode,  newBlock,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(bodyNode,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(bodyNode,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    null);    	non-compiled	[CE]  ')'  expected	59	None	replace
550	[BUG]  [BUGGY]  return  NodeUtil.newString(value,  type).toString();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newString(value,  type).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newString(value,  type).toString();	  return    Node.newString(value,    type).toString();    	non-compiled	[CE]  ')'  expected	70	None	replace
551	[BUG]  [BUGGY]  return  newStringNode(type,  value).toString();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  newStringNode(type,  value).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  newStringNode(type,  value).toString();	  return    Node.newString(value,    type).toString();    	non-compiled	[CE]  ')'  expected	70	None	replace
552	[BUG]  [BUGGY]  return  Node.newString(value,  type)+  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type)+  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type)+  1;	  return    Node.newString(type,    value)+    1;    	non-compiled	[CE]  ')'  expected	36	None	replace
553	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(this.assign);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(this.assign);	  return    Node.newString(type,    value).removePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	29	None	replace
554	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.string);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(this.string);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(this.string);	  return    Node.newString(type,    value).removePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	29	None	replace
555	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(fnNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(fnNode);	  return    Node.newString(type,    value).cloneFlagsFrom(fnNode);    	non-compiled	[CE]  ')'  expected	50	None	replace
556	[BUG]  [BUGGY]  return  Node.newString(type,  value).addFlagsFrom(fnNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addFlagsFrom(fnNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addFlagsFrom(fnNode);	  return    Node.newString(type,    value).cloneFlagsFrom(fnNode);    	non-compiled	[CE]  ')'  expected	50	None	replace
557	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(child);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(child);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(child);	  return    Node.newString(type,    value).cloneFlagsFrom(fnNode);    	non-compiled	[CE]  ')'  expected	50	None	replace
558	[BUG]  [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).cloneFlagsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).cloneFlagsFrom(this);	  return    Node.newString(type,    value).cloneFlagsFrom(this);    	non-compiled	[CE]  ')'  expected	10	None	replace
559	[BUG]  [BUGGY]  return  Node.newString(type,  value  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value  +  1);	  return    Node.newString(type,    value);    	non-compiled	[CE]  ')'  expected	16	None	replace
560	[BUG]  [BUGGY]  return  Node.newString(value,  type).removeValue();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removeValue();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removeValue();	  return    Node.newString(type,    value).removeValue();    	non-compiled	[CE]  ')'  expected	85	None	replace
561	[BUG]  [BUGGY]  return  Node.newString(value,  value).clonePropsFrom(bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).clonePropsFrom(bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).clonePropsFrom(bodyNode);	  return    Node.newString(value,    type).clonePropsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	83	None	replace
562	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(bodyNode,  value);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(bodyNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(bodyNode,  value);	  return    Node.newString(value,    type).clonePropsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	83	None	replace
563	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(this.bodyNode);	  return    Node.newString(type,    value).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	32	None	replace
564	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.childNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.childNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.childNode);	  return    Node.newString(type,    value).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	32	None	replace
565	[BUG]  [BUGGY]  return  Node.newString(value,  type).append(')');  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).append(')');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).append(')');	  return    Node.newString(type,    value).append(')');    	non-compiled	[CE]  ')'  expected	71	None	replace
566	[BUG]  [BUGGY]  return  Node.newString(value).append(')');  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value).append(')');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value).append(')');	  return    Node.newString(type,    value).append(')');    	non-compiled	[CE]  ')'  expected	71	None	replace
567	[BUG]  [BUGGY]  return  Node.newStringNode(value,  type).clone();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(value,  type).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(value,  type).clone();	  return    Node.newStringNode(type,    value).clone();    	non-compiled	[CE]  ')'  expected	13	None	replace
568	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).replace('n',  'r');  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).replace('n',  'r');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).replace('n',  'r');	  return    Node.newStringNode(type,    value).clone();    	non-compiled	[CE]  ')'  expected	13	None	replace
569	[BUG]  [BUGGY]  return  Node.newString(value,  value).removePropsFrom(templateNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).removePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).removePropsFrom(templateNode);	  return    Node.newString(value,    type).removePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	60	None	replace
570	[BUG]  [BUGGY]  return  Node.newString(value,  type).removePropsFrom(templateNode,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).removePropsFrom(templateNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).removePropsFrom(templateNode,  value);	  return    Node.newString(value,    type).removePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	60	None	replace
571	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(buffer,  newBlock,  value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(buffer,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(buffer,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
572	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(block,  newBlock,  value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(block,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(block,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
573	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.bodyNode,  newBlock,  value);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.bodyNode,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.bodyNode,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    value);    	non-compiled	[CE]  ')'  expected	4	None	replace
574	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('/',  'r');  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('/',  'r');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('/',  'r');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
575	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('n',  '/');  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('n',  '/');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('n',  '/');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
576	[BUG]  [BUGGY]  return  Node.newString(type,  value).replace('n',  '-');  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replace('n',  '-');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replace('n',  '-');	  return    Node.newString(type,    value).replace('n',    'r');    	non-compiled	[CE]  ')'  expected	95	None	replace
577	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(node,  type);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(node,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(node,  type);	  return    NodeUtil.newStringNode(value,    type);    	non-compiled	[CE]  ')'  expected	76	None	replace
578	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newName);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(node,  newName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(node,  newName);	  return    Node.newString(type,    value).replaceChild(node,    newBlock);    	non-compiled	[CE]  ')'  expected	1	None	replace
579	[BUG]  [BUGGY]  return  Node.newString(type,  value).setPropsFrom(templateNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).setPropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).setPropsFrom(templateNode);	  return    Node.newString(type,    value).addPropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	61	None	replace
580	[BUG]  [BUGGY]  return  Node.newString(type,  value).addPropsFrom(buffer,  type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addPropsFrom(buffer,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addPropsFrom(buffer,  type);	  return    Node.newString(type,    value).addPropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	61	None	replace
581	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(buffer,  newBlock,  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(buffer,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(buffer,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    null);    	non-compiled	[CE]  ')'  expected	59	None	replace
582	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(block,  newBlock,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(block,  newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(block,  newBlock,  null);	  return    Node.newString(type,    value).replaceChild(bodyNode,    newBlock,    null);    	non-compiled	[CE]  ')'  expected	59	None	replace
583	[BUG]  [BUGGY]  return  Node.newString(type,  value).addFlagsTo(value);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addFlagsTo(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addFlagsTo(value);	  return    Node.newString(type,    value).removeFlagsFrom(value);    	non-compiled	[CE]  ')'  expected	75	None	replace
584	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeFirst();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeFirst();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeFirst();	  return    Node.newString(type,    value).remove();    	non-compiled	[CE]  ')'  expected	17	None	replace
585	[BUG]  [BUGGY]  return  Node.newString(value,  type).replaceChild(node,  value);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).replaceChild(node,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).replaceChild(node,  value);	  return    Node.newString(value,    type).toString();    	non-compiled	[CE]  ')'  expected	70	None	replace
586	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).removePropsFrom(value);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).removePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).removePropsFrom(value);	  return    Node.newStringNode(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	18	None	replace
587	[BUG]  [BUGGY]  return  Node.newString(type,  this.bodyNode).clonePropsFrom(value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.bodyNode).clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.bodyNode).clonePropsFrom(value);	  return    Node.newString(type,    value).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	32	None	replace
588	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  value),  config);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  value),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  value),  config);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    value));    	non-compiled	[CE]  ')'  expected	42	None	replace
589	[BUG]  [BUGGY]  return  Node.newStringNode(type,  value).replaceAll( "n ", "n ");  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newStringNode(type,  value).replaceAll( "n ", "n ");  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newStringNode(type,  value).replaceAll( "n ", "n ");	  return    Node.newStringNode(type,    value).toString();    	non-compiled	[CE]  ')'  expected	35	None	replace
590	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(ret);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(ret);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(ret);	  return    Node.newString(value,    type).clonePropsFrom(ret);    	non-compiled	[CE]  ')'  expected	62	None	replace
591	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(prototype);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(prototype);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(prototype);	  return    Node.newString(value,    type).clonePropsFrom(ret);    	non-compiled	[CE]  ')'  expected	62	None	replace
592	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).replaceChild(bodyNode,  newName);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).replaceChild(bodyNode,  newName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).replaceChild(bodyNode,  newName);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
593	[BUG]  [BUGGY]  Node  newBlock  =  Node.newString(type,  value).removePropsFrom(value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  Node  newBlock  =  Node.newString(type,  value).removePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	Node  newBlock  =  Node.newString(type,  value).removePropsFrom(value);	  Node    newBlock    =    Node.newString(type,    value).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
594	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this,  config,  type);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
595	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  new  String[]  {  }  );  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  new  String[]  {  }  );  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this,  config,  new  String[]  {  }  );	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
596	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  this);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this,  config,  this);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
597	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  node);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this,  config,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this,  config,  node);	  return    Node.newString(type,    value).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	12	None	replace
598	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newStringNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  newStringNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  newStringNode);	  return    Node.newString(type,    value).clonePropsFrom(relativeNode);    	non-compiled	[CE]  ')'  expected	20	None	replace
599	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePathFrom(this.report);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePathFrom(this.report);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePathFrom(this.report);	  return    Node.newString(type,    value).clonePropsFrom(this.report);    	non-compiled	[CE]  ')'  expected	66	None	replace
600	[BUG]  [BUGGY]  return  Node.newString(type,  value).getName();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).getName();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).getName();	  return    Node.newString(type,    value).removePropsFrom(value);    	non-compiled	[CE]  ')'  expected	21	None	replace
601	[BUG]  [BUGGY]  return  Node.newString(type,  value)/  2,  false,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)/  2,  false,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)/  2,  false,  null);	  return    Node.newString(type,    value),    false,    null);    	non-compiled	[CE]  ')'  expected	39	None	replace
602	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(type);	  return    Node.newString(value,    value).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	69	None	replace
603	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeIRFactory(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeIRFactory(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeIRFactory(this);	  return    Node.newString(type,    value).cloneIRFactory(this);    	non-compiled	[CE]  ')'  expected	11	None	replace
604	[BUG]  [BUGGY]  return  Node.newString(type,  value),  null,  null,  null;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value),  null,  null,  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value),  null,  null,  null;	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
605	[BUG]  [BUGGY]  return  Node.newString(type,  value)&  null,  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)&  null,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)&  null,  null);	  return    Node.newString(type,    value),    null,    null);    	non-compiled	[CE]  ')'  expected	37	None	replace
606	[BUG]  [BUGGY]  return  Node.newString(type,  value).newString();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).newString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).newString();	  return    Node.newString(type,    value).cloneFunction(value);    	non-compiled	[CE]  ')'  expected	54	None	replace
607	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.bodyNode,  newBlock);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.bodyNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.bodyNode,  newBlock);	  return    Node.newString(type,    value).replaceChild(parentNode,    newBlock);    	non-compiled	[CE]  ')'  expected	2	None	replace
608	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(bodyNode,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(bodyNode,  null);	  return    Node.newString(type,    newBlock).replaceChild(bodyNode,    value);    	non-compiled	[CE]  ')'  expected	3	None	replace
609	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  this.lp);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  this.lp);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.node,  newBlock,  this.lp);	  return    Node.newString(type,    value).replaceChild(this.node,    newBlock);    	non-compiled	[CE]  ')'  expected	5	None	replace
610	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  value);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this,  newStringNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this,  newStringNode,  value);	  return    Node.newString(type,    value).replaceChild(this,    newStringNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
611	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(buffer,  type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(buffer,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(buffer,  type);	  return    Node.newString(type,    value).cloneFlagsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	47	None	replace
612	[BUG]  [BUGGY]  return  Node.newString(type,  value)/  2,  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)/  2,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)/  2,  null);	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
613	[BUG]  [BUGGY]  return  Node.newString(type,  value));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value));	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
614	[BUG]  [BUGGY]  return  Node.newString(type,  value)/  2;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value)/  2;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value)/  2;	  return    Node.newString(type,    value),    null);    	non-compiled	[CE]  ')'  expected	38	None	replace
615	[BUG]  [BUGGY]  return  Node.newString(value,  this.type).clonePropsFrom(value);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  this.type).clonePropsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  this.type).clonePropsFrom(value);	  return    Node.newString(value,    type).clonePropsFrom(this.assign);    	non-compiled	[CE]  ')'  expected	64	None	replace
616	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeNode();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeNode();	  return    Node.newString(type,    value).removeValue();    	non-compiled	[CE]  ')'  expected	85	None	replace
617	[BUG]  [BUGGY]  return  Node.newString(type,  value).removeValue(this);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removeValue(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removeValue(this);	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
618	[BUG]  [BUGGY]  return  Node.newString(type,  value).addValue(this);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addValue(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addValue(this);	  return    Node.newString(type,    value).removePropsFrom(this);    	non-compiled	[CE]  ')'  expected	8	None	replace
619	[BUG]  [BUGGY]  return  NodeUtil.newStringNodeWithType(type,  value);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNodeWithType(type,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNodeWithType(type,  value);	  return    NodeUtil.newStringNode(value);    	non-compiled	[CE]  ')'  expected	79	None	replace
620	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  null);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(type,  null);	  return    NodeUtil.newStringNode(value);    	non-compiled	[CE]  ')'  expected	79	None	replace
621	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(this.bodyNode,  value);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  NodeUtil.newStringNode(this.bodyNode,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  NodeUtil.newStringNode(this.bodyNode,  value);	  return    NodeUtil.newStringNode(value);    	non-compiled	[CE]  ')'  expected	79	None	replace
622	[BUG]  [BUGGY]  return  Node.newString(type,  value).reportError(value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).reportError(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).reportError(value);	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
623	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneReporter();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneReporter();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneReporter();	  return    Node.newString(type,    value).cloneReporterFrom(ret);    	non-compiled	[CE]  ')'  expected	63	None	replace
624	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(bufferNode,  bufferNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(bufferNode,  bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(bufferNode,  bufferNode);	  return    Node.newString(type,    value).removePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
625	[BUG]  [BUGGY]  return  Node.newString(type,  value).addValue(bufferNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).addValue(bufferNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).addValue(bufferNode);	  return    Node.newString(type,    value).removePropsFrom(bufferNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
626	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(child,  newBlock,  value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(child,  newBlock,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(child,  newBlock,  value);	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  ')'  expected	91	None	replace
627	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(child,  newName);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(child,  newName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(child,  newName);	  return    Node.newString(type,    value).replaceChild(child,    newBlock);    	non-compiled	[CE]  ')'  expected	91	None	replace
628	[BUG]  [BUGGY]  return  Node.newString(type,  this.assign);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.assign);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.assign);	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
629	[BUG]  [BUGGY]  return  Node.newString(type,  this.assign).toString();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.assign).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.assign).toString();	  return    Node.newString(type,    this.assign).clonePropsFrom(value);    	non-compiled	[CE]  ')'  expected	27	None	replace
630	[BUG]  [BUGGY]  return  Node.newString(value,  value).removePropsFrom(type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  value).removePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  value).removePropsFrom(type);	  return    Node.newString(value,    type).removePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	60	None	replace
631	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePathFrom(this.apply);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePathFrom(this.apply);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePathFrom(this.apply);	  return    Node.newString(type,    value).clonePropsFrom(this.apply);    	non-compiled	[CE]  ')'  expected	65	None	replace
632	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  this.assign,  value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  this.assign,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.bindNode,  this.assign,  value);	  return    Node.newString(type,    value).clonePropsFrom(this.assign,    value);    	non-compiled	[CE]  ')'  expected	28	None	replace
633	[BUG]  [BUGGY]  return  Node.newString(type,  value).removePropsFrom(buffer,  type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).removePropsFrom(buffer,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).removePropsFrom(buffer,  type);	  return    Node.newString(type,    value).removePropsFrom(bodyNode);    	non-compiled	[CE]  ')'  expected	23	None	replace
634	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceChild(this.bodyNode,  this.assign,  newBlock);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceChild(this.bodyNode,  this.assign,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceChild(this.bodyNode,  this.assign,  newBlock);	  return    Node.newString(type,    value).replaceChild(this.assign,    newBlock);    	non-compiled	[CE]  ')'  expected	6	None	replace
635	[BUG]  [BUGGY]  return  Node.newString(type,  this.bodyNode).cloneFlagsFrom(value);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  this.bodyNode).cloneFlagsFrom(value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  this.bodyNode).cloneFlagsFrom(value);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
636	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.child);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this.child);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this.child);	  return    Node.newString(type,    value).cloneFlagsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	49	None	replace
637	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.type,  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this.type,  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  this.type,  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	93	None	replace
638	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformStringNode(value));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformStringNode(value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  TransformStringNode(value));	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	93	None	replace
639	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformStringNode());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TransformStringNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  TransformStringNode());	  NodeTraversal.traverse(compiler,    type,    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	93	None	replace
640	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.reporter,  value);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(this.reporter,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(this.reporter,  value);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
641	[BUG]  [BUGGY]  return  Node.newString(type,  value).replaceAll(this.reporter);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).replaceAll(this.reporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).replaceAll(this.reporter);	  return    Node.newString(type,    value).clonePropsFrom(this.reporter);    	non-compiled	[CE]  ')'  expected	30	None	replace
642	[BUG]  [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(buffer,  type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  type).clonePropsFrom(buffer,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  type).clonePropsFrom(buffer,  type);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
643	[BUG]  [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  newName);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  newName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).clonePropsFrom(buffer,  type,  newName);	  return    Node.newString(type,    value).clonePropsFrom(buffer,    type);    	non-compiled	[CE]  ')'  expected	89	None	replace
644	[BUG]  [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this,  value);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(type,  value).cloneFlagsFrom(this,  value);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(type,  value).cloneFlagsFrom(this,  value);	  return    Node.newString(type,    value).cloneFlagsFrom(this);    	non-compiled	[CE]  ')'  expected	10	None	replace
645	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuilder(value));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  StringBuilder(value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  type,  new  StringBuilder(value));	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  ')'  expected	92	None	replace
646	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newStringNode(type,  value));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newStringNode(type,  value));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  newStringNode(type,  value));	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  ')'  expected	92	None	replace
647	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.type,  new  StringBuffer());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this.type,  new  StringBuffer());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	NodeTraversal.traverse(compiler,  this.type,  new  StringBuffer());	  NodeTraversal.traverse(compiler,    type,    new    StringBuffer());    	non-compiled	[CE]  ')'  expected	92	None	replace
648	[BUG]  [BUGGY]  return  Node.newString(value,  this).clonePropsFrom(type);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newStringNode(int  type,  String  value)  {      [BUGGY]  return  Node.newString(value,  this).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newStringNode  [RETURN_TYPE]  Node  int  type  String  value  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  value  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	1276	1276	1	replace	return  Node.newString(value,  this).clonePropsFrom(type);	  return    Node.newString(value,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	80	None	replace
