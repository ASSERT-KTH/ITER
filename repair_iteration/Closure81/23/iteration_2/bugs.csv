bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  node);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  node);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(sourceString,  node);	  Node    irNode    =    irFactory.transform(node,    node);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  rootNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  rootNodeJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  rootNodeJsDocBuilder);	  Node    irNode    =    irFactory.transformAstRoot(node);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  rootNodeJsDocHolder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  rootNodeJsDocHolder);	  Node    irNode    =    irFactory.transformAstRoot(node);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  errorReporter);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  errorReporter);	  Node    irNode    =    irFactory.transformAstRoot(node);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  fileLevelJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  fileLevelJsDocBuilder);	  Node    irNode    =    irFactory.transformAstRoot(node);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  node);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  node);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  node);	  Node    irNode    =    irFactory.transformAstRoot(node);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  errorReporter);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  sourceString,  errorReporter);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  config);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  config);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  sourceString,  config);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  fileLevelJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  sourceString,  fileLevelJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  rootNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  rootNodeJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  sourceString,  rootNodeJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  rootNodeJsDocHolder,  sourceString);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  rootNodeJsDocHolder,  sourceString);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  rootNodeJsDocHolder,  sourceString);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  templateNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  templateNode);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  sourceString,  templateNode);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  templateNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  templateNode);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  templateNode);	  Node    irNode    =    irFactory.transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNode,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNode,  fileLevelJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  templateNode,  fileLevelJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  errorReporter);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  errorReporter);	  Node    irNode    =    irFactory.transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
18	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceString,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceString,  config,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceString,  config,  errorReporter);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  irFactory.handlePossibleFileOverviewJsDoc(node);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  irFactory.handlePossibleFileOverviewJsDoc(node);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	irFactory.handlePossibleFileOverviewJsDoc(node);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  irFactory.transformTree(node,  sourceString,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  irFactory.transformTree(node,  sourceString,  config,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	irFactory.transformTree(node,  sourceString,  config,  errorReporter);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(node.getSourceName(),  sourceString,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  IRFactory  irFactory  =  new  IRFactory(node.getSourceName(),  sourceString,  config,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	IRFactory  irFactory  =  new  IRFactory(node.getSourceName(),  sourceString,  config,  errorReporter);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
22	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  Node.getSourceName(),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  Node.getSourceName(),  config,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  Node.getSourceName(),  config,  errorReporter);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  irFactory.handlePossibleFileOverviewJsDoc(irNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  irFactory.handlePossibleFileOverviewJsDoc(irNode);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	irFactory.handlePossibleFileOverviewJsDoc(irNode);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  errorReporter);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  errorReporter);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
25	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  config);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  config);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  config);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
26	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  fileLevelJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  fileLevelJsDocBuilder);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
27	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(sourceString,  node);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(sourceString,  node);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(sourceString,  node);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNode,  rootNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNode,  rootNodeJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  templateNode,  rootNodeJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNode);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  templateNode);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  node,  rootNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  node,  rootNodeJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(sourceString,  node,  rootNodeJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  errorReporter);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(sourceString,  errorReporter);	  Node    irNode    =    irFactory.transform(sourceString);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(rootNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(rootNodeJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(rootNodeJsDocBuilder);	  Node    irNode    =    irFactory.transform(sourceString);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(rootNodeJsDocHolder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(rootNodeJsDocHolder);	  Node    irNode    =    irFactory.transform(sourceString);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  config);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  config);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(sourceString,  config);	  Node    irNode    =    irFactory.transform(sourceString);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNode,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNode,  rootNodeJsDocHolder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  templateNode,  rootNodeJsDocHolder);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocHolder);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
36	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  node,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  node,  rootNodeJsDocHolder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(sourceString,  node,  rootNodeJsDocHolder);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocHolder);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
37	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  rootNodeJsDocBuilder,  errorReporter);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  rootNodeJsDocBuilder,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  rootNodeJsDocBuilder,  errorReporter);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocHolder);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  rootNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  rootNodeJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(sourceString,  rootNodeJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  errorReporter);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  errorReporter);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
40	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  rootNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  rootNode);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  rootNode);	  Node    irNode    =    irFactory.transform(node,    node);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
41	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  fileLevelJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(sourceString,  fileLevelJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
42	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  sourceString);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  fileLevelJsDocBuilder,  sourceString);	  Node    irNode    =    irFactory.transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
43	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  rootNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  rootNodeJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  rootNodeJsDocBuilder);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
44	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  node);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  node);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  node);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
45	[BUG]  [BUGGY]  Node  irNode  =  node.transformAstRoot(irFactory);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  node.transformAstRoot(irFactory);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  node.transformAstRoot(irFactory);	  Node    irNode    =    irFactory.transformAstRoot(node);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
46	[BUG]  [BUGGY]  Node  irNode  =  irFactory.getAstRoot(node);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.getAstRoot(node);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.getAstRoot(node);	  Node    irNode    =    irFactory.transformAstRoot(node);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
47	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(sourceString);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(sourceString);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(sourceString);	  Node    irNode    =    irFactory.transformAstRoot(node);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
48	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  rootNodeJsDocHolder);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(sourceString,  rootNodeJsDocHolder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(sourceString,  rootNodeJsDocHolder);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocHolder);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
49	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  node  =  node.getFirstChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
50	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getName(),  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getName(),  config,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getName(),  config,  errorReporter);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
51	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  null,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  null,  config,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  null,  config,  errorReporter);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
52	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(rootNode,  sourceString);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(rootNode,  sourceString);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(rootNode,  sourceString);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocHolder);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
53	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNodeJsDocBuilder);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  templateNodeJsDocBuilder);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  templateNodeJsDocBuilder);	  Node    irNode    =    irFactory.transform(node,    rootNodeJsDocHolder);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
54	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  null);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  null);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  sourceString,  null);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  node);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  node);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  sourceString,  node);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transform(node,  sourceString,  false);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transform(node,  sourceString,  false);	  Node    irNode    =    irFactory.transform(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceName,  config,  errorReporter);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceName,  config,  errorReporter);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	IRFactory  irFactory  =  new  IRFactory(sourceString,  sourceName,  config,  errorReporter);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  Node  node  =  irFactory.getAstRoot(node);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  node  =  irFactory.getAstRoot(node);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  node  =  irFactory.getAstRoot(node);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  null);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  null);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  null);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
60	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  false);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  false);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  false);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
61	[BUG]  [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  message);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  Node  transformTree(AstRoot  node,  String  sourceString,  Config  config,  ErrorReporter  errorReporter)  {  IRFactory  irFactory  =  new  IRFactory(sourceString,  node.getSourceName(),  config,  errorReporter);    [BUGGY]  Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  message);  [BUGGY]      if  (node.getComments()  !=  null)  {  for  (Comment  comment  :  node.getComments())  {  if  (comment.getCommentType()  ==  JSDOC  &&  !comment.isParsed())  {  irFactory.handlePossibleFileOverviewJsDoc(comment);  }  }  }  irFactory.setFileOverviewJsDoc(irNode);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTree  [RETURN_TYPE]  Node  AstRoot  node  String  sourceString  Config  config  ErrorReporter  errorReporter  [VARIABLES]  Comment  comment  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  IRFactory  irFactory  Node  irNode  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  AstRoot  node  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11470786693528087	130	130	1	replace	Node  irNode  =  irFactory.transformAstRoot(node,  sourceString,  message);	  Node    irNode    =    irFactory.transformAstRoot(node,    sourceString);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
