bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
2	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
3	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getLastChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
4	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
5	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    Node  irNode.setLineno(irNode.getLastChild().getLineno());	  	non-compiled	[CE]  ';'  expected	1	None	add
6	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
7	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    int  lineno  =  irNode.getLastChild().getLineno();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
8	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
9	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getLastChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
10	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  irNode.getLineno());	  irNode.setFileLevel(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
11	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  node.getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  node.getLineno());	  irNode.setFileLevel(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
12	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  node.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFileLevel(irNode,  node.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  node.getFirstChild().getLineno());	  irNode.setFileLevel(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
13	[BUG]  [BUGGY]  irNode.setFileLevel(node.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFileLevel(node.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(node.getFirstChild().getLineno());	  irNode.setFileLevel(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
14	[BUG]  [BUGGY]  irNode.setFont(irNode.getFirstChild(),  irNode.getFont());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFont(irNode.getFirstChild(),  irNode.getFont());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getFirstChild(),  irNode.getFont());	  irNode.setFont(irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
15	[BUG]  [BUGGY]  irNode.setFont(node.getFirstChild().getFont());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFont(node.getFirstChild().getFont());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(node.getFirstChild().getFont());	  irNode.setFont(irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
16	[BUG]  [BUGGY]  irNode.setFont(irNode.getLastChild().getFont());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFont(irNode.getLastChild().getFont());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getLastChild().getFont());	  irNode.setFont(irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
17	[BUG]  [BUGGY]  irNode.setFont(irNode.getFirstChild(),  node.getFont());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFont(irNode.getFirstChild(),  node.getFont());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getFirstChild(),  node.getFont());	  irNode.setFont(irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
18	[BUG]  [BUGGY]  irNode.setFont(irNode,  irNode.getFirstChild().getFont());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFont(irNode,  irNode.getFirstChild().getFont());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  irNode.getFirstChild().getFont());	  irNode.setFont(irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
19	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
20	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
21	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
22	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setString(irNode.getFirstChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
23	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCHARno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCHARno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCHARno(irNode.getFirstChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
24	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
25	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
26	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getCharno());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
27	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
28	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getLastChild().getCharno());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
29	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
30	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getString());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getString());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
31	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getSize());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getSize());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
32	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getName());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getName());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
33	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getCharno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
34	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getLastChild().getCharno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getLastChild().getCharno());	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
35	[BUG]  [BUGGY]  Node  irNode  =  irNode.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  Node  irNode  =  irNode.getFirstChild();  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  irNode.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
36	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
37	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getLastChild().getLineno()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
38	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  Node  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  Node  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    Node  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);	  	non-compiled	[CE]  ';'  expected	7	None	add
39	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getfirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getfirstChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getfirstChild().getLineno()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
40	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    int  lineno  =  irNode.getFirstChild().getLineno()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
41	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    Node  irNode.setCharno(irNode.getFirstChild().getLineno());	  	non-compiled	[CE]  ';'  expected	5	None	add
42	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getNext().getLineno());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getNext().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getNext().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
43	[BUG]  [BUGGY]  irNode.setFont(irNode,  node.getFirstChild().getFont());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFont(irNode,  node.getFirstChild().getFont());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  node.getFirstChild().getFont());	  irNode.setFont(irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
44	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IRIrNode  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IRIrNode  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);	  	non-compiled	[CE]  ';'  expected	7	None	add
45	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
46	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
47	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(IrNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(IrNode.getLastChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(IrNode.getLastChild().getLineno());	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
48	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  Node  irNode  =  node.getFirstChild();  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  node.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
49	[BUG]  [BUGGY]  Node  node  =  irNode.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  Node  node  =  irNode.getFirstChild();  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  node  =  irNode.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
50	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getString());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getString());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getString());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
51	[BUG]  [BUGGY]  irNode.setLineno(irNode.getfirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getfirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getfirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
52	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(jsDocInfo.getFirstChild().getCharno());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
53	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLength());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLength());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLength());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
54	[BUG]  [BUGGY]  irNode.setLineno(node.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(node.getFirstChild().getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(node.getFirstChild().getLineno());	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
55	[BUG]  [BUGGY]  int  lineno  =  irNode.getFirstChild().getLineno();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  int  lineno  =  irNode.getFirstChild().getLineno();  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	int  lineno  =  irNode.getFirstChild().getLineno();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
56	[BUG]  [BUGGY]  irNode.setLineno(lineno);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(lineno);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(lineno);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
57	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLineno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(jsDocInfo.getLineno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getLineno());	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
58	[BUG]  [BUGGY]  Node  lineno  =  irNode.getFirstChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  Node  lineno  =  irNode.getFirstChild();  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  lineno  =  irNode.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
59	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getSourceName());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getSourceName());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getSourceName());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
60	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getString());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
61	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getNameNode());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getNameNode());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
62	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getCharno());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild().getCharno());	  irNode.setFileLevel(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
63	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getSourceName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getSourceName());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild().getSourceName());	  irNode.setFileLevel(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
64	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getNameNode());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getNameNode());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild().getNameNode());	  irNode.setFileLevel(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
65	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
66	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild	  	non-compiled	[CE]  ')'  expected	1	None	add
67	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.get  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.get  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.get	  	non-compiled	[CE]  ')'  expected	1	None	add
68	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
69	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastChild  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastChild  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.getLastChild	  	non-compiled	[CE]  ')'  expected	1	None	add
70	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.	  	non-compiled	[CE]  ')'  expected	1	None	add
71	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(ir  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(ir  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(ir	  	non-compiled	[CE]  ')'  expected	1	None	add
72	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLabel());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLabel());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLabel());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
73	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  1;  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno())+  1;	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  not  a  statement	8	None	replace
74	[BUG]  [BUGGY]  irNode.setFont(irNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {    [BUGGY]  irNode.setFont(irNode.getFirstChild());  [BUGGY]    irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getFirstChild());	  irNode.setFont(irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
