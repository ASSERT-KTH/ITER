bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(!irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(!irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
2	[BUG]  [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
3	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getLastChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(!irNode.getLastChild(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(!irNode.getLastChild(),  irNode.getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
4	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(!irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(!irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
5	[BUG]  [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getLastChild().getLineno());  int  lineno  =  irNode.getLastChild().getLineno();	  irNode.setLineno(irNode.getLastChild().getLineno());    int    lineno    =    irNode.getLastChild().getLineno();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
6	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  node.getLineno());  int  lineno  =  irNode.getLastChild().getLineno();	  irNode.setLineno(irNode.getLastChild().getLineno());    int    lineno    =    irNode.getLastChild().getLineno();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
7	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getLastChild().getLineno();	  irNode.setLineno(irNode.getLastChild().getLineno());    int    lineno    =    irNode.getLastChild().getLineno();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
8	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  int  lineno  =  node.getLastChild().getLineno();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  int  lineno  =  node.getLastChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  int  lineno  =  node.getLastChild().getLineno();	  irNode.setLineno(irNode.getLastChild().getLineno());    int    lineno    =    irNode.getLastChild().getLineno();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
9	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  int  lineno  =  irNode.getLastChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  int  lineno  =  irNode.getLastChild().getLineno();	  irNode.setLineno(irNode.getLastChild().getLineno());    int    lineno    =    irNode.getLastChild().getLineno();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
10	[BUG]  [BUGGY]  Node  irNode  =  irNode.getLastChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  irNode.getLastChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  irNode.getLastChild();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
11	[BUG]  [BUGGY]  Node  irNode  =  id.getFirstChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  id.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  id.getFirstChild();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
12	[BUG]  [BUGGY]  Node  irNode  =  i.getFirstChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  i.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  i.getFirstChild();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
13	[BUG]  [BUGGY]  Node  irNode  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  n.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  n.getFirstChild();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
14	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getSourceName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  irNode.getSourceName());	  irNode.setFileLevel(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
15	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  irNode.getFirstChild().getSourceName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode,  irNode.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  irNode.getFirstChild().getSourceName());	  irNode.setFileLevel(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
16	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  node.getFirstChild().getSourceName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode,  node.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  node.getFirstChild().getSourceName());	  irNode.setFileLevel(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
17	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getLastChild().getSourceName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getLastChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getLastChild().getSourceName());	  irNode.setFileLevel(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
18	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getLastChild(),  irNode.getLineno());	  irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
19	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  node.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getLastChild(),  node.getLineno());	  irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
20	[BUG]  [BUGGY]  irNode.setCharno(irNode,  node.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode,  node.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode,  node.getLastChild().getLineno());	  irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
21	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCHARno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCHARno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCHARno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCHARno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
22	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getFirstChild().getLineno();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getFirstChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getFirstChild().getLineno();	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    int    lineno    =    irNode.getFirstChild().getLineno()    +    1;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
23	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  int  lineno  =  irNode.getFirstChild().getLineno();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  int  lineno  =  irNode.getFirstChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  int  lineno  =  irNode.getFirstChild().getLineno();	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    int    lineno    =    irNode.getFirstChild().getLineno()    +    1;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
24	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    int    lineno    =    irNode.getFirstChild().getLineno()    +    1;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
25	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno());	  irNode.setLineno(irNode.getfirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
26	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  node.getLineno());	  irNode.setLineno(irNode.getfirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
27	[BUG]  [BUGGY]  irNode.setLineno(irNode,  node.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  node.getFirstChild().getLineno());	  irNode.setLineno(irNode.getfirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
28	[BUG]  [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
29	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
30	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
31	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
32	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
33	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
34	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
35	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
36	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChil  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChil  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChil	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  ')'  expected	69	None	replace
37	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  ir  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  ir	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  ';'  expected	69	None	replace
38	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastCh  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastCh  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastCh	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  ')'  expected	69	None	replace
39	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setString(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setString(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
40	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setString(irNode,  node.getFirstChild().getLineno());  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setString(irNode,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setString(irNode,  node.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setString(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
41	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setString(irNode.getLastChild().getLineno());  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setString(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setString(irNode.getLastChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setString(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
42	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setString(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setString(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
43	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ')'  expected	36	None	replace
44	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  N  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol  N	36	None	replace
45	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  <identifier>  expected	70	None	replace
46	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  <identifier>  expected	70	None	replace
47	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	65	None	replace
48	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	65	None	replace
49	[BUG]  [BUGGY]  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(jsDocInfo.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
50	[BUG]  [BUGGY]  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
51	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  cannot  find  symbol  N  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol  N	26	None	replace
52	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	26	None	replace
53	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
54	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getCharno());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getCharno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
55	[BUG]  [BUGGY]  Node  irNode  =  irNode.getFirstChild().getLineno();  [CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  irNode.getFirstChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  irNode.getFirstChild().getLineno();	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)	41	None	replace
56	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
57	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
58	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getCharno());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().getCharno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
59	[BUG]  [BUGGY]  irNode.setFont(irNode,  irNode.getFirstChild(),  irNode.getFont());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode,  irNode.getFirstChild(),  irNode.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  irNode.getFirstChild(),  irNode.getFont());	  irNode.setFont(irNode,    irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
60	[BUG]  [BUGGY]  irNode.setFont(irNode,  irNode.getLastChild().getFont());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode,  irNode.getLastChild().getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  irNode.getLastChild().getFont());	  irNode.setFont(irNode,    irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
61	[BUG]  [BUGGY]  irNode.setFont(node,  irNode.getFirstChild().getFont());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(node,  irNode.getFirstChild().getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(node,  irNode.getFirstChild().getFont());	  irNode.setFont(irNode,    irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
62	[BUG]  [BUGGY]  irNode.setFont(irNode,  irNode.getFirstChild(),  node.getFont());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode,  irNode.getFirstChild(),  node.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  irNode.getFirstChild(),  node.getFont());	  irNode.setFont(irNode,    irNode.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
63	[BUG]  [BUGGY]  irNode.setFont(irNode,  node.getFirstChild(),  irNode.getFont());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode,  node.getFirstChild(),  irNode.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  node.getFirstChild(),  irNode.getFont());	  irNode.setFont(irNode,    node.getFirstChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
64	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  N  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol  N	27	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	add	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	compilable	  [FE]  AssertionFailedError  	27	5	replace
66	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	compilable	  [FE]  AssertionFailedError  	27	5	replace
67	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode,  irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  irNode.getFirstChild().getLineno());	  irNode.setFileLevel(irNode,    node.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
68	[BUG]  [BUGGY]  irNode.setFileLevel(node,  irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(node,  irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(node,  irNode.getFirstChild().getLineno());	  irNode.setFileLevel(irNode,    node.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
69	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  node.getFirstChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode,  node.getFirstChild(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  node.getFirstChild(),  irNode.getLineno());	  irNode.setFileLevel(irNode,    node.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
70	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
71	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
72	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  irNode.getLastChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  irNode.getLastChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
73	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  [CE]  cannot  find  symbol  btn  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLineno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol  btn	57	None	replace
74	[BUG]  [BUGGY]  irNode.setLineno(irNode,  jsDocInfo.getLineno());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  jsDocInfo.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  jsDocInfo.getLineno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
75	[BUG]  [BUGGY]  irNode.setLineno(irInfo.getLineno());  [CE]  cannot  find  symbol  irInfo  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irInfo.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irInfo.getLineno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol  irInfo	57	None	replace
76	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getLineno());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  jsDocInfo.setLineno(irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	jsDocInfo.setLineno(irNode.getLineno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
77	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno()  +  1);  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getLineno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
78	[BUG]  [BUGGY]  irNode.setLineno(irNode,  irNode.getLastChild().getLineno()  +  1);  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  irNode.getLastChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
79	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getLineno()  +  1);  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  node.getLineno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
80	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getSize());  irNode.setLineno(irNode.getFirstChild().getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getSize());  irNode.setLineno(irNode.getFirstChild().getSize());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getSize());  irNode.setLineno(irNode.getFirstChild().getSize());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
81	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getSize());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getSize());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getSize());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
82	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getSize());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getSize());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getSize());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
83	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getSize());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getSize());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getSize());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getSize());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
84	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getSourceName());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
85	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getSourceName());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
86	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getSourceName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
87	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getSourceName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
88	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.get  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.get  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.get	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  ')'  expected	66	None	replace
89	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  ')'  expected	66	None	replace
90	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  ')'  expected	66	None	replace
91	[BUG]  [BUGGY]  irNode.setFileLevel(node.getFirstChild(),  irNode.getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(node.getFirstChild(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(node.getFirstChild(),  irNode.getLineno());	  irNode.setFileLevel(irNode.getFirstChild(),    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
92	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  node.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  node.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  node.getCharno());	  irNode.setFileLevel(irNode.getFirstChild(),    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
93	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLowerCase());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
94	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLowerCase());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLowerCase());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLowerCase());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
95	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getLowerCase());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	29	None	replace
96	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  irNode.getFirstChild().getLowerCase());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  irNode.getFirstChild().getLowerCase());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  irNode.getFirstChild().getLowerCase());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
97	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLength());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLength());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLength());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLength());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
98	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLength());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLength());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLength());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLength());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
99	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getLength());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getLength());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getLength());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLength());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
100	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getLength());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getLength());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getLength());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLength());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
101	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getCharno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getCharno());	  irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	8	None	replace
102	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  node.getCharno());	  irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
103	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  irNode.getCharno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getLastChild(),  irNode.getCharno());	  irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	34	None	replace
104	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild(),  node.getCharno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getLastChild(),  node.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getLastChild(),  node.getCharno());	  irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
105	[BUG]  [BUGGY]  irNode.setCharno(irNode,  node.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode,  node.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode,  node.getLastChild().getCharno());	  irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
106	[BUG]  [BUGGY]  irNode.setFont(irNode.getLastChild());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode.getLastChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getLastChild());	  irNode.setFont(irNode.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
107	[BUG]  [BUGGY]  irNode.setFont(node.getFirstChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(node.getFirstChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(node.getFirstChild());	  irNode.setFont(irNode.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
108	[BUG]  [BUGGY]  irNode.setFont(irNode,  irNode.getFirstChild());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode,  irNode.getFirstChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  irNode.getFirstChild());	  irNode.setFont(irNode.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
109	[BUG]  [BUGGY]  irNode.setFont(irNode,  node.getFirstChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode,  node.getFirstChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  node.getFirstChild());	  irNode.setFont(irNode.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
110	[BUG]  [BUGGY]  irNode.setLineno(irNode,  jsDocInfo.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  jsDocInfo.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  jsDocInfo.getFirstChild().getLineno()  +  1);	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
111	[BUG]  [BUGGY]  irNode.setLineno(irInfo.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  irInfo  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irInfo.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irInfo.getFirstChild().getLineno()  +  1);	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol  irInfo	2	None	replace
112	[BUG]  [BUGGY]  irNode.setLineno(irName.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  irName  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irName.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irName.getFirstChild().getLineno()  +  1);	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol  irName	2	None	replace
113	[BUG]  [BUGGY]  IRIrNode  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IRIrNode  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IRIrNode  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	44	None	replace
114	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  OBJECT_SIGN  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol  OBJECT_SIGN	44	None	replace
115	[BUG]  [BUGGY]  Node  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	44	None	replace
116	[BUG]  [BUGGY]  int  lineno  =  node.getFirstChild().getLineno();  [CE]  cannot  find  symbol  OBJECT_SIGN  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  int  lineno  =  node.getFirstChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	int  lineno  =  node.getFirstChild().getLineno();	  int    lineno    =    irNode.getFirstChild().getLineno();    	non-compiled	[CE]  cannot  find  symbol  OBJECT_SIGN	55	None	replace
117	[BUG]  [BUGGY]  int  lineno  =  irNode.getLastChild().getLineno();  [CE]  cannot  find  symbol  OBJECT_SIGN  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  int  lineno  =  irNode.getLastChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	int  lineno  =  irNode.getLastChild().getLineno();	  int    lineno    =    irNode.getFirstChild().getLineno();    	non-compiled	[CE]  cannot  find  symbol  OBJECT_SIGN	55	None	replace
118	[BUG]  [BUGGY]  int  lineno  =  irNode,  irNode.getFirstChild().getLineno();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  int  lineno  =  irNode,  irNode.getFirstChild().getLineno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	int  lineno  =  irNode,  irNode.getFirstChild().getLineno();	  int    lineno    =    irNode.getFirstChild().getLineno();    	non-compiled	[CE]  ';'  expected	55	None	replace
119	[BUG]  [BUGGY]  int  lineno  =  irNode.getFirstChild().getCharno();  [CE]  cannot  find  symbol  OBJECT_SIGN  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  int  lineno  =  irNode.getFirstChild().getCharno();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	int  lineno  =  irNode.getFirstChild().getCharno();	  int    lineno    =    irNode.getFirstChild().getLineno();    	non-compiled	[CE]  cannot  find  symbol  OBJECT_SIGN	55	None	replace
120	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getString());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getString());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	60	None	replace
121	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getString());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
122	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getString());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
123	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getString());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
124	[BUG]  [BUGGY]  irNode.setLineno(irNode,  irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  irNode.getFirstChild().getLineno());	  irNode.setLineno(node.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
125	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
126	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
127	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
128	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLastChild().getCharno());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
129	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  irNode.getLastChild().getCharno());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
130	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getString());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getString());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getString());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	30	None	replace
131	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getString());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getString());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getString());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	30	None	replace
132	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getString());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getString());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getString());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	30	None	replace
133	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  irNode.getCharno());	  irNode.setFileLevel(irNode.getFirstChild(),    irNode.getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
134	[BUG]  [BUGGY]  Node  irNode  =  irNodes.getFirstChild();  [CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  irNodes.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  irNodes.getFirstChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)	48	None	replace
135	[BUG]  [BUGGY]  Node  irNode  =  node,  irNode.getFirstChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  node,  irNode.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  node,  irNode.getFirstChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  ';'  expected	48	None	replace
136	[BUG]  [BUGGY]  Node  irNode  =  node.getLastChild();  [CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  node.getLastChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  node.getLastChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)	48	None	replace
137	[BUG]  [BUGGY]  Node  irNode  =  ir.getFirstChild();  [CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  ir.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  ir.getFirstChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)	48	None	replace
138	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode,  node.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode,  node.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
139	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
140	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
141	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getLastChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
142	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  node.getNameNode());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  node.getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  node.getNameNode());	  irNode.setFileLevel(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
143	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getNameNode());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  irNode.getNameNode());	  irNode.setFileLevel(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
144	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  node.getFirstChild().getNameNode());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode,  node.getFirstChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  node.getFirstChild().getNameNode());	  irNode.setFileLevel(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
145	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getLastChild().getNameNode());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getLastChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getLastChild().getNameNode());	  irNode.setFileLevel(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
146	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getString());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getString());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	50	None	replace
147	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getString());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  node.getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  node.getString());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	50	None	replace
148	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLabel());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLabel());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getLastChild().getLabel());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLabel());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
149	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLabel());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLabel());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getLabel());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLabel());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
150	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getLabel());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getLabel());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode,  node.getFirstChild().getLabel());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLabel());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
151	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getLabel());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getLabel());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getCharno());  irNode.setLineno(irNode.getFirstChild().getLabel());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLabel());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
152	[BUG]  [BUGGY]  Node.setLineno(irNode.getFirstChild().getLineno());  [CE]  non-static  method  setLineno(int)  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node.setLineno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    Node    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  non-static  method  setLineno(int)  cannot  be  referenced  from  a  static  context	38	None	replace
153	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(IrNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  IrNode  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(IrNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(IrNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(IrNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol  IrNode	47	None	replace
154	[BUG]  [BUGGY]  irNode.setLineno(IrNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  IrNode  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(IrNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(IrNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(IrNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol  IrNode	47	None	replace
155	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getName());  irNode.setLineno(irNode.getFirstChild().getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getName());  irNode.setLineno(irNode.getFirstChild().getName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getName());  irNode.setLineno(irNode.getFirstChild().getName());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getName());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
156	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getName());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getName());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
157	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getName());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getName());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getName());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	32	None	replace
158	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.get  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.get  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.get	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.get    	non-compiled	[CE]  ')'  expected	67	None	replace
159	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.get  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.get  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.get	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.get    	non-compiled	[CE]  ')'  expected	67	None	replace
160	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getNameNode());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getNameNode());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
161	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getNameNode());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getFirstChild().getNameNode());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  orphaned  case	61	None	replace
162	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getNameNode());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getNameNode());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  orphaned  case	61	None	replace
163	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getNameNode());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getNameNode());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  orphaned  case	61	None	replace
164	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  orphaned  case	6	None	replace
165	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	6	None	replace
166	[BUG]  [BUGGY]  irNode.setFont(node.getFirstChild(),  irNode.getFont());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(node.getFirstChild(),  irNode.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(node.getFirstChild(),  irNode.getFont());	  irNode.setFont(irNode.getFirstChild(),    node.getFont());    	non-compiled	[CE]  ';'  expected	17	None	replace
167	[BUG]  [BUGGY]  irNode.setFont(irNode.getFirstChild(),  node.getLineno());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode.getFirstChild(),  node.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getFirstChild(),  node.getLineno());	  irNode.setFont(irNode.getFirstChild(),    node.getFont());    	non-compiled	[CE]  ';'  expected	17	None	replace
168	[BUG]  [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	5	None	replace
169	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getString());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild().getString());	  irNode.setFileLevel(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  ';'  expected	62	None	replace
170	[BUG]  [BUGGY]  irNode.setFont(irNode.getLastChild(),  irNode.getFont());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode.getLastChild(),  irNode.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getLastChild(),  irNode.getFont());	  irNode.setFont(irNode.getLastChild().getFont());    	non-compiled	[CE]  ';'  expected	16	None	replace
171	[BUG]  [BUGGY]  irNode.setFont(irNode.getLastChild(),  node.getFont());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode.getLastChild(),  node.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getLastChild(),  node.getFont());	  irNode.setFont(irNode.getLastChild().getFont());    	non-compiled	[CE]  ';'  expected	16	None	replace
172	[BUG]  [BUGGY]  irNode.setFont(node.getLastChild().getFont());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(node.getLastChild().getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(node.getLastChild().getFont());	  irNode.setFont(irNode.getLastChild().getFont());    	non-compiled	[CE]  ';'  expected	16	None	replace
173	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
174	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCharno(irNode.getNext().getLineno());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCharno(irNode.getNext().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getLineno());  irNode.setCharno(irNode.getNext().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getNext().getLineno());    	non-compiled	[CE]  ';'  expected	42	None	replace
175	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getNext().getLineno());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getNext().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getNext().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getNext().getLineno());    	non-compiled	[CE]  ';'  expected	42	None	replace
176	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getNext().getLineno());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getNext().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getNext().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getNext().getLineno());    	non-compiled	[CE]  ';'  expected	42	None	replace
177	[BUG]  [BUGGY]  irNode.setLineno(lineno,  position2charno(irNode.getAbsolutePosition()));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(lineno,  position2charno(irNode.getAbsolutePosition()));  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(lineno,  position2charno(irNode.getAbsolutePosition()));	  irNode.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	56	None	replace
178	[BUG]  [BUGGY]  irNode.setLineno(lineno  +  1);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(lineno  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(lineno  +  1);	  irNode.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	56	None	replace
179	[BUG]  [BUGGY]  irNode.setLineno(lineno,  position2charno(irNode.getFirstChild().getLineno()));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(lineno,  position2charno(irNode.getFirstChild().getLineno()));  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(lineno,  position2charno(irNode.getFirstChild().getLineno()));	  irNode.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	56	None	replace
180	[BUG]  [BUGGY]  irNode.setLineno(lineno,  charno);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(lineno,  charno);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(lineno,  charno);	  irNode.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	56	None	replace
181	[BUG]  [BUGGY]  irNode.setLineno(lineno,  position2charno(node.getAbsolutePosition()));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(lineno,  position2charno(node.getAbsolutePosition()));  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(lineno,  position2charno(node.getAbsolutePosition()));	  irNode.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	56	None	replace
182	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(ir  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(ir	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  ')'  expected	71	None	replace
183	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(ir  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(ir	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  ')'  expected	71	None	replace
184	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(ir  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(ir	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  ')'  expected	71	None	replace
185	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLastChild().getLineno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
186	[BUG]  [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IRIrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
187	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLastChild(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLastChild(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLastChild(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
188	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  irNode.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(jsDocInfo.getFirstChild().getCharno());    	non-compiled	[CE]  ';'  expected	52	None	replace
189	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(jsDocInfo.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
190	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(jsDocInfo.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
191	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  2;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  2;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno())+  2;	  irNode.setLineno(irNode.getFirstChild().getLineno())+    1;    	non-compiled	[CE]  not  a  statement	73	None	replace
192	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno())+  1;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno())+  1;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno())+  1;	  irNode.setLineno(irNode.getFirstChild().getLineno())+    1;    	non-compiled	[CE]  not  a  statement	73	None	replace
193	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())/  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())/  1;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno())/  1;	  irNode.setLineno(irNode.getFirstChild().getLineno())+    1;    	non-compiled	[CE]  not  a  statement	73	None	replace
194	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  4;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  4;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno())+  4;	  irNode.setLineno(irNode.getFirstChild().getLineno())+    1;    	non-compiled	[CE]  not  a  statement	73	None	replace
195	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  3;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  3;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno())+  3;	  irNode.setLineno(irNode.getFirstChild().getLineno())+    1;    	non-compiled	[CE]  not  a  statement	73	None	replace
196	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getLastChild().getLineno()  +  1  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getLastChild().getLineno()  +  1  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getLastChild().getLineno()  +  1	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  ')'  expected	37	None	replace
197	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist	37	None	replace
198	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist	3	None	replace
199	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode,  irNode.getLastChild().getLineno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode,  irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode,  irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
200	[BUG]  [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist	3	None	replace
201	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getCharno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  irNode.getCharno());	  irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	33	None	replace
202	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getCharno());	  irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
203	[BUG]  [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode,  node.getFirstChild().getCharno());	  irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
204	[BUG]  [BUGGY]  Node  node  =  irNode.getLastChild();  [CE]  variable  node  is  already  defined  in  method  transform(AstNode)  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  node  =  irNode.getLastChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  node  =  irNode.getLastChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  transform(AstNode)	49	None	replace
205	[BUG]  [BUGGY]  Node  node  =  irNode,  irNode.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  node  =  irNode,  irNode.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  node  =  irNode,  irNode.getFirstChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	49	None	replace
206	[BUG]  [BUGGY]  Node  child  =  irNode.getFirstChild();  [CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  child  =  irNode.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  child  =  irNode.getFirstChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist	49	None	replace
207	[BUG]  [BUGGY]  Node  lineno  =  node.getFirstChild();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  lineno  =  node.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  lineno  =  node.getFirstChild();	  Node    lineno    =    irNode.getFirstChild();    	non-compiled	[CE]  incompatible  types	58	None	replace
208	[BUG]  [BUGGY]  Node  lineno  =  irNode.getLastChild();  [CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  lineno  =  irNode.getLastChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  lineno  =  irNode.getLastChild();	  Node    lineno    =    irNode.getFirstChild();    	non-compiled	[CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist	58	None	replace
209	[BUG]  [BUGGY]  Node  lineno  =  irNode,  irNode.getFirstChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  lineno  =  irNode,  irNode.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  lineno  =  irNode,  irNode.getFirstChild();	  Node    lineno    =    irNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	58	None	replace
210	[BUG]  [BUGGY]  Node  lineo  =  irNode.getFirstChild();  [CE]  duplicate  case  label  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  lineo  =  irNode.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  lineo  =  irNode.getFirstChild();	  Node    lineno    =    irNode.getFirstChild();    	non-compiled	[CE]  duplicate  case  label	58	None	replace
211	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  node.getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  node.getCharno());  irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
212	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
213	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());  irNode.setLineno(jsDocInfo.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(jsDocInfo.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
214	[BUG]  [BUGGY]  Node  lineno  =  irNode.firstChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  lineno  =  irNode.firstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  lineno  =  irNode.firstChild();	  Node    lineno    =    irNode.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
215	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  node.getSourceName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  node.getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  node.getSourceName());	  irNode.setFileLevel(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
216	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
217	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
218	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().get  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().get  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild().get	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
219	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstCh  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstCh  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstCh	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
220	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
221	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getLowerCase());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
222	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
223	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
224	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().get  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().get  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().get	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  ')'  expected	70	None	replace
226	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	50	None	replace
227	[BUG]  [BUGGY]  IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
228	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IrNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  IrNode  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IrNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IrNode.setLineno(irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol  IrNode	36	None	replace
229	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
230	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCode(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
231	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.get    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
232	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  i  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  i  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  i	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.get    	non-compiled	[CE]  not  a  statement	67	None	replace
233	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setString(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setString(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
234	[BUG]  [BUGGY]  Node  irNode  =  irnode.getFirstChild();  [CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  irnode.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  irnode.getFirstChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  variable  irNode  is  already  defined  in  method  transform(AstNode)	48	None	replace
235	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getFirstChild().getLineno());	  irNode.setLineno(node.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
236	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getFirstChild().getLineno());  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(!irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(!irNode.getFirstChild().getLineno());	  irNode.setLineno(node.getFirstChild().getLineno());    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	54	None	replace
237	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getLastChild());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild(),  irNode.getLastChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild(),  irNode.getLastChild());	  irNode.setFileLevel(irNode.getFirstChild(),    irNode.getLineno());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
238	[BUG]  [BUGGY]  irNode.setFont(jsDocInfo.getFirstChild());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(jsDocInfo.getFirstChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(jsDocInfo.getFirstChild());	  irNode.setFont(irNode.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
239	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  1L;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno())+  1L;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno())+  1L;	  irNode.setLineno(irNode.getFirstChild().getLineno())+    1;    	non-compiled	[CE]  not  a  statement	73	None	replace
240	[BUG]  [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ')'  expected	65	None	replace
241	[BUG]  [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild().  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild().  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild().	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
242	[BUG]  [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstCh  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstCh  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstCh	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ')'  expected	65	None	replace
243	[BUG]  [BUGGY]  IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(!irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
244	[BUG]  [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild()  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild()  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(!irNode.getFirstChild()	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ')'  expected	65	None	replace
245	[BUG]  [BUGGY]  IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IrNode  irNode  =  irNode.getFirstChild().getLineno()  +  1;  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
246	[BUG]  [BUGGY]  Node  node  =  irNode.node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  transform(AstNode)  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  node  =  irNode.node.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  node  =  irNode.node.getFirstChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  transform(AstNode)	49	None	replace
247	[BUG]  [BUGGY]  Node  node  =  irNode.cloneTree();  [CE]  variable  node  is  already  defined  in  method  transform(AstNode)  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  node  =  irNode.cloneTree();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  node  =  irNode.cloneTree();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  transform(AstNode)	49	None	replace
248	[BUG]  [BUGGY]  Node  node  =  irNode.removeFirstChild();  [CE]  variable  node  is  already  defined  in  method  transform(AstNode)  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  node  =  irNode.removeFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  node  =  irNode.removeFirstChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  transform(AstNode)	49	None	replace
249	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode,  node.getFirstChild().getLineno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode,  node.getFirstChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
250	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getLastChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
251	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getLastChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode,  node.getLastChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
252	[BUG]  [BUGGY]  irNode.setLineno(irNode.getfirstChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getfirstChild(),  node.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getfirstChild(),  node.getLineno());	  irNode.setLineno(irNode.getfirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
253	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setLineno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	20	None	replace
254	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode,  node.getFirstChild().getLineno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setLineno(irNode,  node.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	20	None	replace
255	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getString());  irNode.setCharno(irNode.getFirstChild().getNameNode());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getString());  irNode.setCharno(irNode.getFirstChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getString());  irNode.setCharno(irNode.getFirstChild().getNameNode());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
256	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getType());  irNode.setCharno(irNode.getFirstChild().getNameNode());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getType());  irNode.setCharno(irNode.getFirstChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getType());  irNode.setCharno(irNode.getFirstChild().getNameNode());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
257	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getFirstChild().getSourceName());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getFirstChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	59	None	replace
258	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getString());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getLastChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getLastChild().getString());	  irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
259	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());  if(irNode.getLastChild()!=  null)  {	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
260	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	5	None	replace
261	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild().  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild().  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild().	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	5	None	replace
262	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChil  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChil  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChil	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	5	None	replace
263	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.get  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.get  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.get	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	5	None	replace
264	[BUG]  [BUGGY]  irNode.setLineno(position2charno(irNode.getAbsolutePosition()));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(position2charno(irNode.getAbsolutePosition()));  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(position2charno(irNode.getAbsolutePosition()));	  irNode.setLineno(lineno);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
265	[BUG]  [BUGGY]  irNode.setLineno(position2charno(node.getAbsolutePosition()));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(position2charno(node.getAbsolutePosition()));  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(position2charno(node.getAbsolutePosition()));	  irNode.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	56	None	replace
266	[BUG]  [BUGGY]  irNode.setLineno(lineno,  irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(lineno,  irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(lineno,  irNode.getFirstChild().getLineno());	  irNode.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	56	None	replace
267	[BUG]  [BUGGY]  irNode.setLineno(lineno,  irNode.getLastChild());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(lineno,  irNode.getLastChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(lineno,  irNode.getLastChild());	  irNode.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	56	None	replace
268	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCHARno(irNode,  node.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCHARno(irNode,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCHARno(irNode,  node.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCHARno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	23	None	replace
269	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getLineno()!=  -1)  {	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
270	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getCharno()!=  -1)  {  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getCharno()!=  -1)  {	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
271	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  ir  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  ir	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  not  a  statement	71	None	replace
272	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getLastChild().getLineno());  irNode.setLineno(jsDocInfo.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	6	None	replace
273	[BUG]  [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(jsDocInfo.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	6	None	replace
274	[BUG]  [BUGGY]  node.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(jsDocInfo.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
275	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
276	[BUG]  [BUGGY]  irNode.setLineno(JsDocInfo.getFirstChild().getLineno()  +  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(JsDocInfo.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(JsDocInfo.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	45	None	replace
277	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getLastChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getLastChild());	  irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  ';'  expected	34	None	replace
278	[BUG]  [BUGGY]  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	24	None	replace
279	[BUG]  [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	24	None	replace
280	[BUG]  [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().get  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().get  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild()!=  null)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(jsDocInfo.getFirstChild().get	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  ')'  expected	24	None	replace
281	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getNext().getLineno());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getNext().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  irNode.setCharno(irNode.getNext().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getNext().getLineno());    	non-compiled	[CE]  ';'  expected	42	None	replace
282	[BUG]  [BUGGY]  Node  irNode  =  newBlock.getFirstChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  newBlock.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  newBlock.getFirstChild();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	35	None	replace
283	[BUG]  [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(!irNode.getLastChild().getLineno());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(!irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IRIrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(!irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	46	None	replace
284	[BUG]  [BUGGY]  irNode.setLineno(IrNode.getLastChild().getLineno());  irNode.setLineno(IrNode.getLastChild().getLineno());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(IrNode.getLastChild().getLineno());  irNode.setLineno(IrNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(IrNode.getLastChild().getLineno());  irNode.setLineno(IrNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(IrNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	47	None	replace
285	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno()  +  1);  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno()  +  1);  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getLineno()  +  1);  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    int    lineno    =    irNode.getFirstChild().getLineno()    +    1;    	non-compiled	[CE]  ';'  expected	40	None	replace
286	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getString());  irNode.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
287	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  /  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  /  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno()  /  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
288	[BUG]  [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  ')'  expected	68	None	replace
289	[BUG]  [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChil  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChil  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChil	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  ')'  expected	68	None	replace
290	[BUG]  [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
291	[BUG]  [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLas  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLas  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLas	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  ')'  expected	68	None	replace
292	[BUG]  [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastCh  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastCh  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IRIrNode  irNode  =  irNode.getLastChild().getLineno();  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastCh	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  ')'  expected	68	None	replace
293	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getSize());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getSize());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getSize());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getSize());    	non-compiled	[CE]  orphaned  case	31	None	replace
294	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getSourceName());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getSourceName());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  orphaned  case	57	None	replace
295	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getSource());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getSource());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getSource());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
296	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCHARno());  irNode.setLineno(irNode.getFirstChild().getString());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
297	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild(),  irNode.getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild(),  irNode.getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getFirstChild(),  irNode.getLineno()  +  1);	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
298	[BUG]  [BUGGY]  int  lineno  =  irNode.getFirstChild();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  int  lineno  =  irNode.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	int  lineno  =  irNode.getFirstChild();	  int    lineno    =    irNode.getFirstChild().getLineno();    	non-compiled	[CE]  incompatible  types	55	None	replace
299	[BUG]  [BUGGY]  IrNode  irNode  =  irNode.getFirstChild().getLineno();  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IrNode  irNode  =  irNode.getFirstChild().getLineno();  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IrNode  irNode  =  irNode.getFirstChild().getLineno();  irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
300	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  i  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  i  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild()!=  null)  {  i	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  not  a  statement	66	None	replace
301	[BUG]  [BUGGY]  irNode.setFont(irNode.getFirstChild(),  NodeUtil.getFont(irNode));  [CE]  cannot  find  symbol  NodeUtil  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode.getFirstChild(),  NodeUtil.getFont(irNode));  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getFirstChild(),  NodeUtil.getFont(irNode));	  irNode.setFont(irNode.getFirstChild(),    irNode.getFont());    	non-compiled	[CE]  cannot  find  symbol  NodeUtil	14	None	replace
302	[BUG]  [BUGGY]  irNode.setFont(irNode.getFirstChild(),  new  Font(irNode.getFont()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode.getFirstChild(),  new  Font(irNode.getFont()));  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getFirstChild(),  new  Font(irNode.getFont()));	  irNode.setFont(irNode.getFirstChild(),    irNode.getFont());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
303	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo,  irNode.getFirstChild().getLineno()  +  1);  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo,  irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo,  irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	45	None	replace
304	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	jsDocInfo.setLineno(irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
305	[BUG]  [BUGGY]  irNode.setFileLevel(node.getFirstChild().getNameNode());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(node.getFirstChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(node.getFirstChild().getNameNode());	  irNode.setFileLevel(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
306	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getNameNode(),  node);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getNameNode(),  node);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild().getNameNode(),  node);	  irNode.setFileLevel(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
307	[BUG]  [BUGGY]  irNode.setLineno(irNode.getfirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getfirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getfirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getfirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
308	[BUG]  [BUGGY]  irNode.setLineno(irNode,  irNode.getFirstChild().getLineno()  +  1);  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getfirstChild().getLineno()    +    1);    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
309	[BUG]  [BUGGY]  irNode.setLineno(irNode,  node.getFirstChild().getLineno()  +  1);  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  node.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  node.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getfirstChild().getLineno()    +    1);    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
310	[BUG]  [BUGGY]  irNode.setLineno(position2charno(node.getAbsolutePosition());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(position2charno(node.getAbsolutePosition());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(position2charno(node.getAbsolutePosition());	  irNode.setLineno(lineno);    	non-compiled	[CE]  ')'  expected	56	None	replace
311	[BUG]  [BUGGY]  irNode.setLineno(position2charno(node.getAbsolutePosition()  +  lineno));  [CE]  cannot  find  symbol  lineno  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(position2charno(node.getAbsolutePosition()  +  lineno));  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(position2charno(node.getAbsolutePosition()  +  lineno));	  irNode.setLineno(lineno);    	non-compiled	[CE]  cannot  find  symbol  lineno	56	None	replace
312	[BUG]  [BUGGY]  irNode.setLineno(irDocInfo.getFirstChild().getLineno()  +  1);  [CE]  cannot  find  symbol  irDocInfo  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irDocInfo.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irDocInfo.getFirstChild().getLineno()  +  1);	  irNode.setLineno(jsDocInfo.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  cannot  find  symbol  irDocInfo	2	None	replace
313	[BUG]  [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist	68	None	replace
314	[BUG]  [BUGGY]  irNode.setLineno(irNode,  irNode.getLastChild().getLineno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
315	[BUG]  [BUGGY]  irNode.setLineno(irNode,  node.getfirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  node.getfirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  node.getfirstChild().getLineno());	  irNode.setLineno(irNode.getfirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
316	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getString());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getString());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	60	None	replace
317	[BUG]  [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode,  node.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	60	None	replace
318	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	60	None	replace
319	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getName());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
320	[BUG]  [BUGGY]  Node  irNode  =  irNode,  node.getFirstChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  irNode  =  irNode,  node.getFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  irNode  =  irNode,  node.getFirstChild();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  ';'  expected	35	None	replace
321	[BUG]  [BUGGY]  irNode.setFont(irNode,  node.getLastChild().getFont());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode,  node.getLastChild().getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  node.getLastChild().getFont());	  irNode.setFont(irNode.getLastChild().getFont());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
322	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  package  javascript.jscomp.mozilla.rhino  does  not  exist	69	None	replace
323	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getCharno()!=  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getCharno()!=  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getFirstChild().getCharno()!=  	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
324	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getLastChild    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
325	[BUG]  [BUGGY]  if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
326	[BUG]  [BUGGY]  if(irNode.getFirstChild().getLineno()!=  irNode.getCharno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild().getLineno()!=  irNode.getCharno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild().getLineno()!=  irNode.getCharno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
327	[BUG]  [BUGGY]  if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }  else  {  ir  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }  else  {  ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())  {  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  }  else  {  ir	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  not  a  statement	24	None	replace
328	[BUG]  [BUGGY]  if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())return  null;  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())return  null;  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild().getLineno()!=  irNode.getLineno())return  null;  irNode.setCharno(jsDocInfo.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(jsDocInfo.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
329	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getCharno());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getCharno());	  irNode.setLineno(jsDocInfo.getLineno());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
330	[BUG]  [BUGGY]  irNode.setLineno(!irNode,  irNode.getFirstChild().getLineno()  +  1);  [CE]  bad  operand  type  Node  for  unary  operator  '!'  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(!irNode,  irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(!irNode,  irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  bad  operand  type  Node  for  unary  operator  '!'	65	None	replace
331	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getFirstChild(),  irNode.getLineno()  +  1);  [CE]  bad  operand  type  Node  for  unary  operator  '!'  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(!irNode.getFirstChild(),  irNode.getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(!irNode.getFirstChild(),  irNode.getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  bad  operand  type  Node  for  unary  operator  '!'	65	None	replace
332	[BUG]  [BUGGY]  irNode.setLineno(!irNode.getLastChild().getLineno()  +  1);  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(!irNode.getLastChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(!irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(!irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	65	None	replace
333	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLength());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLength());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLength());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLength());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
334	[BUG]  [BUGGY]  irNode.setLineno(IrNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  IrNode  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(IrNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(IrNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(IrNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol  IrNode	47	None	replace
335	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild(),  irNode.getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(IrNode.getLastChild().getLineno());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
336	[BUG]  [BUGGY]  irNode.setLineno(iterNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  iterNode  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(iterNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(iterNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(IrNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol  iterNode	47	None	replace
337	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  *  1);  [CE]  package  jscomp.jscomp.mozilla.rhino  does  not  exist  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  *  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno()  *  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  package  jscomp.jscomp.mozilla.rhino  does  not  exist	1	None	replace
338	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno()  +  1);  [CE]  duplicate  case  label  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getCharno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  duplicate  case  label	1	None	replace
339	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLowerCase());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLowerCase());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
340	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getName());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
341	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getString());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLowerCase());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	29	None	replace
342	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  node.setLineno(irNode.getFirstChild().getCharno());  [CE]  duplicate  case  label  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  node.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  node.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  duplicate  case  label	26	None	replace
343	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  IrNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  cannot  find  symbol  IrNode  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  IrNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  IrNode.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol  IrNode	26	None	replace
344	[BUG]  [BUGGY]  irNode.setLineno(irNode,  node.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode,  node.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode,  node.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
345	[BUG]  [BUGGY]  irNode.setCharno(irNode.getNext().getLineno());  [CE]  duplicate  case  label  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getNext().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getNext().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getNext().getLineno());    	non-compiled	[CE]  duplicate  case  label	42	None	replace
346	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getNext().getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getNext().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getNext().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getNext().getLineno());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
347	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno()  +  1);  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild(),  irNode.getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	36	None	replace
348	[BUG]  [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [CE]  duplicate  case  label  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  duplicate  case  label	70	None	replace
349	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  <identifier>  expected	70	None	replace
350	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [CE]  cannot  find  symbol  NodeUtil  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  }	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  cannot  find  symbol  NodeUtil	70	None	replace
351	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.STRING)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [CE]  duplicate  case  label  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.STRING)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.STRING)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  duplicate  case  label	70	None	replace
352	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(NodeUtil.isFunctionDeclaration(node))  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.    	non-compiled	[CE]  ')'  expected	70	None	replace
353	[BUG]  [BUGGY]  Node  lineno  =  irNode.removeFirstChild();  [CE]  incomparable  types:  <null>  and  int  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  Node  lineno  =  irNode.removeFirstChild();  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	Node  lineno  =  irNode.removeFirstChild();	  Node    lineno    =    irNode.getFirstChild();    	non-compiled	[CE]  incomparable  types:  <null>  and  int	58	None	replace
354	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(ir  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(ir	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  ')'  expected	71	None	replace
355	[BUG]  [BUGGY]  irNode.setLineno(ir  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(ir	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  ')'  expected	71	None	replace
356	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(ir  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(ir  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(ir	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(ir    	non-compiled	[CE]  ')'  expected	71	None	replace
357	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo,  irNode.getFirstChild().getCharno());  [CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo,  irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo,  irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(jsDocInfo.getFirstChild().getCharno());    	non-compiled	[CE]  method  setLineno  in  class  Node  cannot  be  applied  to  given  types;	52	None	replace
358	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  node.setLineno(jsDocInfo.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  node.setLineno(jsDocInfo.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  node.setLineno(jsDocInfo.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(jsDocInfo.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
359	[BUG]  [BUGGY]  irNode.setFileLevel(irName.getFirstChild().getLineno());  [CE]  cannot  find  symbol  irName  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irName.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irName.getFirstChild().getLineno());	  irNode.setFileLevel(node.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol  irName	13	None	replace
360	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  node.setLineno(irNode.getLastChild().getLineno());  [CE]  incomparable  types:  <null>  and  int  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  node.setLineno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());  node.setLineno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  incomparable  types:  <null>  and  int	3	None	replace
361	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  irNode.getFirstChild(),  node.getLineno());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode,  irNode.getFirstChild(),  node.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  irNode.getFirstChild(),  node.getLineno());	  irNode.setFileLevel(irNode.getFirstChild(),    node.getLineno());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
362	[BUG]  [BUGGY]  irNode.setFileLevel(node.getFirstChild().getCharno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(node.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(node.getFirstChild().getCharno());	  irNode.setFileLevel(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
363	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getSize());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getSize());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
364	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.NAME)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.NAME)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
365	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.VAR)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  Node  irNode.setCharno(irNode.getFirstChild	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	41	None	replace
366	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setCharno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild	  irNode.setCharno(irNode.getFirstChild().getLineno());    Node    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ')'  expected	41	None	replace
367	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getLastChild().getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getLastChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
368	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  node.setLineno(irNode.getLastChild().getLineno()  +  1);  [CE]  incomparable  types:  <null>  and  int  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  node.setLineno(irNode.getLastChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  node.setLineno(irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    irNode.setLineno(irNode.getLastChild().getLineno()    +    1);    	non-compiled	[CE]  incomparable  types:  <null>  and  int	37	None	replace
369	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  [CE]  incomparable  types:  <null>  and  int  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getName());    	non-compiled	[CE]  incomparable  types:  <null>  and  int	32	None	replace
370	[BUG]  [BUGGY]  irNode.setFont(irNode.getFirstChild(),  null,  irNode.getFont());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode.getFirstChild(),  null,  irNode.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.getFirstChild(),  null,  irNode.getFont());	  irNode.setFont(irNode.getFirstChild(),    irNode.getFont());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
371	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getText());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getText());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getText());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
372	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLabel());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLabel());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getLabel());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLabel());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
373	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  IrNode.setLineno(irNode.getFirstChild().getLabel());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  IrNode.setLineno(irNode.getFirstChild().getLabel());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());  IrNode.setLineno(irNode.getFirstChild().getLabel());	  irNode.setLineno(irNode.getFirstChild().getCharno());    irNode.setLineno(irNode.getFirstChild().getLabel());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
374	[BUG]  [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getLineno());  irNode.setString(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode,  node.getFirstChild().getLineno());  irNode.setString(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setString(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  method  setCharno  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
375	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getSourceName());  irNode.setString(irNode.getFirstChild().getLineno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getSourceName());  irNode.setString(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getSourceName());  irNode.setString(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setString(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
376	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [CE]  incomparable  types:  <null>  and  int  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.VAR)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.get    	non-compiled	[CE]  incomparable  types:  <null>  and  int	67	None	replace
377	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo,  irNode.getLastChild().getLineno());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo,  irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo,  irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
378	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild(),  irNode.getLineno());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(jsDocInfo.getLastChild(),  irNode.getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
379	[BUG]  [BUGGY]  node.setLineno(jsDocInfo.getLastChild().getLineno());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  node.setLineno(jsDocInfo.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	node.setLineno(jsDocInfo.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
380	[BUG]  [BUGGY]  irNode.setLineno(JsDocInfo.getLastChild().getLineno());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(JsDocInfo.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(JsDocInfo.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(jsDocInfo.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
381	[BUG]  [BUGGY]  irNode.setFont(node.getFirstChild(),  node.getFont());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(node.getFirstChild(),  node.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(node.getFirstChild(),  node.getFont());	  irNode.setFont(irNode.getFirstChild(),    node.getFont());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
382	[BUG]  [BUGGY]  irNode.setFont(ode.getFirstChild(),  irNode.getFont());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(ode.getFirstChild(),  irNode.getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(ode.getFirstChild(),  irNode.getFont());	  irNode.setFont(irNode.getFirstChild(),    node.getFont());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
383	[BUG]  [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getSourceString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode.getFirstChild().getSourceString());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode.getFirstChild().getSourceString());	  irNode.setFileLevel(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
384	[BUG]  [BUGGY]  irNode.setFileLevel(node.getFirstChild().getSourceName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(node.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(node.getFirstChild().getSourceName());	  irNode.setFileLevel(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
385	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  }  else  {  irNode.setLineno(irNode.getFirstChild  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  }  else  {  irNode.setLineno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  }  else  {  irNode.setLineno(irNode.getFirstChild	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
386	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IRIrNode  irNode.setLineno(irNode.getFirstChild  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IRIrNode  irNode.setLineno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IRIrNode  irNode.setLineno(irNode.getFirstChild	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	44	None	replace
387	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getFirstChild  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  irNode.setLineno(irNode.getFirstChild	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
388	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IRIrNode  irNode.setLineno(irNode.getFirstCh  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IRIrNode  irNode.setLineno(irNode.getFirstCh  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  IRIrNode  irNode.setLineno(irNode.getFirstCh	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	44	None	replace
389	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  }  else  {  irNode.setLineno(irNode.getFirstCh  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  }  else  {  irNode.setLineno(irNode.getFirstCh  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  }  else  {  irNode.setLineno(irNode.getFirstCh	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    IRIrNode    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ')'  expected	44	None	replace
390	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  i  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  i  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.VAR)  {  irNode.setLineno(irNode.getLastChild().getLineno());  if(irNode.getLastChild()!=  null)  {  i	  irNode.setLineno(irNode.getLastChild().getLineno());    if(irNode.getLastChild()!=    null)    {    irNode.setLineno(irNode.getLastChild().getLineno());    }    else    {    irNode.setLineno(irNode.getFirstChild    	non-compiled	[CE]  not  a  statement	66	None	replace
391	[BUG]  [BUGGY]  irNode.setFont(irNode.cloneTree());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode.cloneTree());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode.cloneTree());	  irNode.setFont(irNode.getFirstChild());    	non-compiled	[CE]  ';'  expected	74	None	replace
392	[BUG]  [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getNameNode());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode,  node.getFirstChild().getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode,  node.getFirstChild().getNameNode());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  ';'  expected	61	None	replace
393	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getNameNode());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild(),  node.getNameNode());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild(),  node.getNameNode());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getNameNode());    	non-compiled	[CE]  ';'  expected	61	None	replace
394	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setLineno(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  node.setLineno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	20	None	replace
395	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ')'  expected	5	None	replace
396	[BUG]  [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(irNode.getLastChild	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ')'  expected	5	None	replace
397	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.get  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.get  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(irNode.get	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ')'  expected	5	None	replace
398	[BUG]  [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getFirstChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  Node  irNode.setLineno(irNode.getLastChild	  irNode.setLineno(irNode.getLastChild().getLineno());    Node    irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	5	None	replace
399	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	19	None	replace
400	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno(),  irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno(),  irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno(),  irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	19	None	replace
401	[BUG]  [BUGGY]  irNode.setFont(jsDocInfo.getFirstChild().getFont());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(jsDocInfo.getFirstChild().getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(jsDocInfo.getFirstChild().getFont());	  irNode.setFont(node.getFirstChild().getFont());    	non-compiled	[CE]  ';'  expected	15	None	replace
402	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getSourceName());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setLineno(irNode.getLastChild().getSourceName());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	50	None	replace
403	[BUG]  [BUGGY]  irNode.setCode(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCode(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCode(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	25	None	replace
404	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCode(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCode(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCode(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCode(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	25	None	replace
405	[BUG]  [BUGGY]  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  int  lineno  =  irNode.getFirstChild().getLineno()  +  1;  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	int  lineno  =  irNode.getFirstChild().getLineno()  +  1;	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    int    lineno    =    irNode.getFirstChild().getLineno()    +    1;    	non-compiled	[CE]  ';'  expected	40	None	replace
406	[BUG]  [BUGGY]  irNode.setCHARno(irNode.getFirstChild().getLineno());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCHARno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCHARno(irNode.getFirstChild().getLineno());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCHARno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	23	None	replace
407	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  Node  irNode.setLineno(irNode.getFirstChild  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  Node  irNode.setLineno(irNode.getFirstChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  Node  irNode.setLineno(irNode.getFirstChild	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    Node    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	38	None	replace
408	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  Node  irNode.setLineno(irNode.getFirstCh  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  Node  irNode.setLineno(irNode.getFirstCh  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  Node  irNode.setLineno(irNode.getFirstCh	  irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    Node    irNode.setLineno(irNode.getFirstChild().getLineno()    +    1);    	non-compiled	[CE]  ';'  expected	38	None	replace
409	[BUG]  [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChild	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  ')'  expected	46	None	replace
410	[BUG]  [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(!irNode.  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(!irNode.  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  }  else  {  irNode.setLineno(!irNode.	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
411	[BUG]  [BUGGY]  IrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(!irNode.getLastChild().getLineno());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  IrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(!irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	IrNode  irNode  =  irNode.getLastChild();  irNode.setLineno(!irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  ';'  expected	46	None	replace
412	[BUG]  [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChil  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChil  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLastChil	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  ')'  expected	46	None	replace
413	[BUG]  [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLas  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLas  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	if(irNode.getLastChild()!=  null)  {  irNode.setLineno(irNode.getLastChild().getLineno());  irNode.setLineno(!irNode.getLas	  irNode.setLineno(irNode.getLastChild().getLineno());    irNode.setLineno(!irNode.getLastChild().getLineno());    	non-compiled	[CE]  ')'  expected	46	None	replace
414	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  irNode.getFirstChild().getCharno());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode,  irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  irNode.getFirstChild().getCharno());	  irNode.setFileLevel(irNode,    node.getFirstChild().getLineno());    	non-compiled	[CE]  ';'  expected	12	None	replace
415	[BUG]  [BUGGY]  irNode.setFileLevel(irNode,  irs.getFirstChild().getLineno());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFileLevel(irNode,  irs.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFileLevel(irNode,  irs.getFirstChild().getLineno());	  irNode.setFileLevel(irNode,    node.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
416	[BUG]  [BUGGY]  irNode.setFont(irNode,  jsDocInfo.getFirstChild().getFont());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(irNode,  jsDocInfo.getFirstChild().getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(irNode,  jsDocInfo.getFirstChild().getFont());	  irNode.setFont(irNode,    node.getFirstChild().getFont());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
417	[BUG]  [BUGGY]  irNode.setFont(node,  node.getFirstChild().getFont());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setFont(node,  node.getFirstChild().getFont());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setFont(node,  node.getFirstChild().getFont());	  irNode.setFont(irNode,    node.getFirstChild().getFont());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
418	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild());	  irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
419	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getFirstChild().getSourceName());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());  node.setCharno(irNode.getFirstChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
420	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno(),  irNode.getFirstChild().getSourceName());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno(),  irNode.getFirstChild().getSourceName());  [BUGGY]      irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2581988897471611	215	215	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno(),  irNode.getFirstChild().getSourceName());	  irNode.setCharno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getSourceName());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
