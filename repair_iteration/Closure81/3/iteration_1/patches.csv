bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Token.BLOCK  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
2	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
3	[BUG]  [BUGGY]  if(JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  case  Token.BLOCK:  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  Token.BLOCK:  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  Token.BLOCK:	      	non-compiled	[CE]  ')'  expected	7	None	replace
5	[BUG]  [BUGGY]  case  ')'  expected:  return  Token.BLOCK;  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  ')'  expected:  return  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  ')'  expected:  return  Token.BLOCK;	      	non-compiled	[CE]  ')'  expected	7	None	replace
6	[BUG]  [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(Token.BLOCK,  token);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(Token.BLOCK,  token);  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	AssertionFailedError  e  =  new  AssertionFailedError(Token.BLOCK,  token);	      	non-compiled	[CE]  ')'  expected	7	None	replace
7	[BUG]  [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(Token.BLOCK);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(Token.BLOCK);  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	AssertionFailedError  e  =  new  AssertionFailedError(Token.BLOCK);	      	non-compiled	[CE]  ')'  expected	7	None	replace
8	[BUG]  [BUGGY]  case  ')':  return  Token.BLOCK;  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  ')':  return  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  ')':  return  Token.BLOCK;	      	non-compiled	[CE]  ')'  expected	7	None	replace
9	[BUG]  [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(token);  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  AssertionFailedError  e  =  new  AssertionFailedError(token);  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	AssertionFailedError  e  =  new  AssertionFailedError(token);	      	non-compiled	[CE]  ')'  expected	7	None	replace
10	[BUG]  [BUGGY]  if(Token.NONE!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.NONE!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.NONE!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NONE)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
11	[BUG]  [BUGGY]  ||  Token.BLOCK!=  Token.NONE)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.BLOCK!=  Token.NONE)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.BLOCK!=  Token.NONE)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NONE)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
12	[BUG]  [BUGGY]  if(Token.BLOCK  ==  Token.NONE)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  Token.NONE)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  Token.NONE)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NONE)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
13	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NONE)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
14	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.FUNCTION)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.FUNCTION)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.FUNCTION)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NONE)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
15	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NONE)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
16	[BUG]  [BUGGY]  case  Token.BLOCK:  return  Token.BLOCK  |  Token.BLOCK;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  Token.BLOCK:  return  Token.BLOCK  |  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  Token.BLOCK:  return  Token.BLOCK  |  Token.BLOCK;	  case    Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	1	None	replace
17	[BUG]  [BUGGY]  case  Token.BLOCK:  return  Token.BOOLEAN;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  Token.BLOCK:  return  Token.BOOLEAN;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  Token.BLOCK:  return  Token.BOOLEAN;	  case    Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	1	None	replace
18	[BUG]  [BUGGY]  case  Token.BLOCK:  return  Token.BLOCK  -  1;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  Token.BLOCK:  return  Token.BLOCK  -  1;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  Token.BLOCK:  return  Token.BLOCK  -  1;	  case    Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	1	None	replace
19	[BUG]  [BUGGY]  case  Token.BLOCK:  return  Token.BLOCK  ||  Token.BLOCK;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  Token.BLOCK:  return  Token.BLOCK  ||  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  Token.BLOCK:  return  Token.BLOCK  ||  Token.BLOCK;	  case    Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	1	None	replace
20	[BUG]  [BUGGY]  case  Token.BLOCK:  return  Token.BLOCK  +  1;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  Token.BLOCK:  return  Token.BLOCK  +  1;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  Token.BLOCK:  return  Token.BLOCK  +  1;	  case    Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	1	None	replace
21	[BUG]  [BUGGY]  case  BLOCK:  return  Token.BLOCK;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  BLOCK:  return  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  BLOCK:  return  Token.BLOCK;	  case    javascript.jscomp.mozilla.rhino.Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	8	None	replace
22	[BUG]  [BUGGY]  case  Boolean.BLOCK:  return  Token.BLOCK;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  Boolean.BLOCK:  return  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  Boolean.BLOCK:  return  Token.BLOCK;	  case    javascript.jscomp.mozilla.rhino.Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	8	None	replace
23	[BUG]  [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;	  case    javascript.jscomp.mozilla.rhino.Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	8	None	replace
24	[BUG]  [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK  |  Token.BLOCK;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK  |  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK  |  Token.BLOCK;	  case    javascript.jscomp.mozilla.rhino.Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	8	None	replace
25	[BUG]  [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BOOLEAN;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BOOLEAN;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BOOLEAN;	  case    javascript.jscomp.mozilla.rhino.Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	8	None	replace
26	[BUG]  [BUGGY]  if(Token.BLOCK  ==  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  null)  {  return  Token.BLOCK;  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
27	[BUG]  [BUGGY]  if(token  ==  JSR)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(token  ==  JSR)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(token  ==  JSR)  {  return  Token.BLOCK;  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
28	[BUG]  [BUGGY]  if(token  ==  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(token  ==  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(token  ==  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
29	[BUG]  [BUGGY]  if(parent  ==  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(parent  ==  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(parent  ==  null)  {  return  Token.BLOCK;  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
30	[BUG]  [BUGGY]  if(Token.NAME!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.NAME!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.NAME!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
31	[BUG]  [BUGGY]  ||  Token.BLOCK!=  Token.NAME)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.BLOCK!=  Token.NAME)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.BLOCK!=  Token.NAME)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
32	[BUG]  [BUGGY]  if(Token.BLOCK  ==  Token.NAME)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  Token.NAME)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  Token.NAME)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
33	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.NAME  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.NAME  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.NAME  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
34	[BUG]  [BUGGY]  if(Token.BLOCK  ==  Token.NUMBER)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  Token.NUMBER)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  Token.NUMBER)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NUMBER)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
35	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.NUMBER  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.NUMBER  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.NUMBER  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NUMBER)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
36	[BUG]  [BUGGY]  if(Token.NUMBER!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.NUMBER!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.NUMBER!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NUMBER)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
37	[BUG]  [BUGGY]  ||  Token.BLOCK!=  Token.NUMBER)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.BLOCK!=  Token.NUMBER)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.BLOCK!=  Token.NUMBER)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NUMBER)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
38	[BUG]  [BUGGY]  ||  Token.BLOCK!=  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.BLOCK!=  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.BLOCK!=  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESULT)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
39	[BUG]  [BUGGY]  if(Token.EXPR_RESULT!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.EXPR_RESULT!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.EXPR_RESULT!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESULT)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
40	[BUG]  [BUGGY]  if(Token.BLOCK  ==  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESULT)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
41	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.EMPTY)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.EMPTY)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.EMPTY)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESULT)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
42	[BUG]  [BUGGY]  ||  Token.BLOCK!=  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.BLOCK!=  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.BLOCK!=  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
43	[BUG]  [BUGGY]  if(Token.BLOCK  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
44	[BUG]  [BUGGY]  if(Token.EXPR_RESERVED!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.EXPR_RESERVED!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.EXPR_RESERVED!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
45	[BUG]  [BUGGY]  ||(Token.BLOCK!=  Token.EXPR_RESERVED  &&  Token.BLOCK.equals(Token.BLOCK)))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||(Token.BLOCK!=  Token.EXPR_RESERVED  &&  Token.BLOCK.equals(Token.BLOCK)))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||(Token.BLOCK!=  Token.EXPR_RESERVED  &&  Token.BLOCK.equals(Token.BLOCK)))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
46	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
47	[BUG]  [BUGGY]  if(Token.BLOCK!=  null  ||  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null  ||  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null  ||  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	14	None	replace
48	[BUG]  [BUGGY]  if(Token.BLOCK!=  null  ||  Token.BLOCK.equals( " "))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null  ||  Token.BLOCK.equals( " "))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null  ||  Token.BLOCK.equals( " "))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	14	None	replace
49	[BUG]  [BUGGY]  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	14	None	replace
50	[BUG]  [BUGGY]  if(Token.BLOCK  ==  null  ||  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  null  ||  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  null  ||  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	14	None	replace
51	[BUG]  [BUGGY]  if(Token.BLOCK!=  null  ||  Token.BLOCK.equals(Token.BLOCK))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null  ||  Token.BLOCK.equals(Token.BLOCK))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null  ||  Token.BLOCK.equals(Token.BLOCK))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	14	None	replace
52	[BUG]  [BUGGY]  if(Token.CATCH!=  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.CATCH!=  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.CATCH!=  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
53	[BUG]  [BUGGY]  if(Token.EXPR_RESERVED!=  Token.BLOCK)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.EXPR_RESERVED!=  Token.BLOCK)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.EXPR_RESERVED!=  Token.BLOCK)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
54	[BUG]  [BUGGY]  if(Token.BLOCK  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
55	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.EMPTY)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.EMPTY)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.EMPTY)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
56	[BUG]  [BUGGY]  if(Token.EXPR_RESERVED!=  Token.EMPTY)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.EXPR_RESERVED!=  Token.EMPTY)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.EXPR_RESERVED!=  Token.EMPTY)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
57	[BUG]  [BUGGY]  ||  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
58	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
59	[BUG]  [BUGGY]  if(JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
60	[BUG]  [BUGGY]  if(Token.JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
61	[BUG]  [BUGGY]  if(tokenType  ==  JSR)  {  if(JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(tokenType  ==  JSR)  {  if(JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(tokenType  ==  JSR)  {  if(JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
62	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
63	[BUG]  [BUGGY]  return  Token.BLOCK  &  Token.BLOCK;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  &  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  &  Token.BLOCK;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
64	[BUG]  [BUGGY]  return  Token.BLOCK  -  Token.BLOCK;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  -  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  -  Token.BLOCK;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
65	[BUG]  [BUGGY]  return  Token.BLOCK?  Token.BLOCK  :  Token.BLOCK;  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK?  Token.BLOCK  :  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK?  Token.BLOCK  :  Token.BLOCK;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
66	[BUG]  [BUGGY]  return  Token.BLOCK  /  Token.BLOCK;  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  /  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  /  Token.BLOCK;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
67	[BUG]  [BUGGY]  return  Token.BLOCK  |  Token.BLOCK  +  1;  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  |  Token.BLOCK  +  1;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  |  Token.BLOCK  +  1;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
68	[BUG]  [BUGGY]  if(tokenType  ==  JSR)  {  if(JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(tokenType  ==  JSR)  {  if(JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(tokenType  ==  JSR)  {  if(JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
69	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
70	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.CATCH)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	15	None	replace
71	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.CATCH  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.CATCH  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.CATCH  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.CATCH)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	15	None	replace
72	[BUG]  [BUGGY]  if(Token.CATCH!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.CATCH!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.CATCH!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.CATCH)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	15	None	replace
73	[BUG]  [BUGGY]  ||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.CATCH)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	15	None	replace
74	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.BLOCK  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.BLOCK  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.BLOCK  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.CATCH)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	15	None	replace
75	[BUG]  [BUGGY]  if(token!=  JSR)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(token!=  JSR)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(token!=  JSR)  {  return  Token.BLOCK;  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
76	[BUG]  [BUGGY]  if(parent!=  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(parent!=  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(parent!=  null)  {  return  Token.BLOCK;  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
77	[BUG]  [BUGGY]  AssertionFailedError.show(Token.BLOCK,  token);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  AssertionFailedError.show(Token.BLOCK,  token);  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	AssertionFailedError.show(Token.BLOCK,  token);	  if(JSR!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
78	[BUG]  [BUGGY]  Token.BLOCK:  return  Token.BLOCK;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  Token.BLOCK:  return  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	Token.BLOCK:  return  Token.BLOCK;	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
79	[BUG]  [BUGGY]  ||  Token.NAME!=  Token.BLOCK;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.NAME!=  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.NAME!=  Token.BLOCK;	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
80	[BUG]  [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK  +  1;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK  +  1;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK  +  1;	  case    javascript.jscomp.mozilla.rhino.Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	8	None	replace
81	[BUG]  [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK_ARRAY;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK_ARRAY;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK_ARRAY;	  case    javascript.jscomp.mozilla.rhino.Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	8	None	replace
82	[BUG]  [BUGGY]  if(Token.BLOCK  ==  Token.CATCH)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  Token.CATCH)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  Token.CATCH)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.CATCH)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	15	None	replace
83	[BUG]  [BUGGY]  ||  Token.EXPR_RESULT!=  Token.BLOCK;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.EXPR_RESULT!=  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.EXPR_RESULT!=  Token.BLOCK;	  if(Token.BLOCK!=    Token.EXPR_RESULT)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
84	[BUG]  [BUGGY]  if(BLOCK!=  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(BLOCK!=  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(BLOCK!=  null)  {  return  Token.BLOCK;  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
85	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  JSR;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  JSR;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  JSR;  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
86	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(Token.BLOCK,  token);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(Token.BLOCK,  token);  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(Token.BLOCK,  token);	  if(JSR!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
87	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.EXPR_RESULT)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
88	[BUG]  [BUGGY]  parent  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  parent  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	parent  ==  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
89	[BUG]  [BUGGY]  ||(Token.BLOCK!=  null  &&  Token.BLOCK.equals(Token.BLOCK)))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||(Token.BLOCK!=  null  &&  Token.BLOCK.equals(Token.BLOCK)))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||(Token.BLOCK!=  null  &&  Token.BLOCK.equals(Token.BLOCK)))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	14	None	replace
90	[BUG]  [BUGGY]  if(Token.JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.JSR!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
91	[BUG]  [BUGGY]  parent  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  parent  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	parent  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
92	[BUG]  [BUGGY]  parent!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  parent!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	parent!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
93	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
94	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.EXPR_RESERVED  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
95	[BUG]  [BUGGY]  if(BLOCK  ==  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(BLOCK  ==  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(BLOCK  ==  null)  {  return  Token.BLOCK;  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
96	[BUG]  [BUGGY]  if(Token.BLOCK  ==  null)  {  return  JSR;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  null)  {  return  JSR;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  null)  {  return  JSR;  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
97	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.NUMBER  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.NUMBER  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.NUMBER  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NUMBER)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
98	[BUG]  [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  javascript.jscomp.mozilla.rhino.Token.BLOCK:	      	non-compiled	[CE]  ')'  expected	7	None	replace
99	[BUG]  [BUGGY]  case  java.jscomp.mozilla.rhino.Token.BLOCK:  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  java.jscomp.mozilla.rhino.Token.BLOCK:  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  java.jscomp.mozilla.rhino.Token.BLOCK:	      	non-compiled	[CE]  ')'  expected	7	None	replace
100	[BUG]  [BUGGY]  case  java.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  java.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  java.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;	      	non-compiled	[CE]  ')'  expected	7	None	replace
101	[BUG]  [BUGGY]  return  Token.BLOCK  |  Token.BLOCK  |  1;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  |  Token.BLOCK  |  1;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  |  Token.BLOCK  |  1;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
102	[BUG]  [BUGGY]  return  Token.BLOCK  |  Token.BLOCK  |  Token.CATCH;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  |  Token.BLOCK  |  Token.CATCH;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  |  Token.BLOCK  |  Token.CATCH;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
103	[BUG]  [BUGGY]  return  Token.BLOCK  |  Token.BLOCK  |  Token.GETPROP;  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  |  Token.BLOCK  |  Token.GETPROP;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  |  Token.BLOCK  |  Token.GETPROP;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
104	[BUG]  [BUGGY]  if(Token.JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.JSR  ==  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
105	[BUG]  [BUGGY]  ||  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.EXPR_RESERVED)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
106	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  JSR;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  JSR;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  JSR;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
107	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
108	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
109	[BUG]  [BUGGY]  if(Token.BLOCK!=  null  &&  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null  &&  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null  &&  Token.BLOCK.equals(token))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	14	None	replace
110	[BUG]  [BUGGY]  if(token!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(token!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(token!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
111	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  JSR;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  JSR;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  JSR;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
112	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ".);  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( " ".);  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
113	[BUG]  [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( ". ");  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalStateException( ". ");  }	  if(JSR!=    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
114	[BUG]  [BUGGY]  return  Token.BLOCK  +  Token.BLOCK;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  +  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  +  Token.BLOCK;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
115	[BUG]  [BUGGY]  return  Token.BLOCK  |  Token.CATCH;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  return  Token.BLOCK  |  Token.CATCH;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	return  Token.BLOCK  |  Token.CATCH;	  return    Token.BLOCK    |    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	13	None	replace
116	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESULT  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.EXPR_RESULT  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.EXPR_RESULT  ||  Token.BLOCK!=  Token.BLOCK)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESULT)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
117	[BUG]  [BUGGY]  ||  Token.EXPR_RESULT  ==  Token.BLOCK;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||  Token.EXPR_RESULT  ==  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||  Token.EXPR_RESULT  ==  Token.BLOCK;	  if(Token.BLOCK!=    Token.EXPR_RESULT)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	12	None	replace
118	[BUG]  [BUGGY]  ||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals( " ")))  {  return  Token.BLOCK;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals( " ")))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals( " ")))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  	10	None	replace
119	[BUG]  [BUGGY]  ||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals(token)))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals(token)))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals(token)))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
120	[BUG]  [BUGGY]  ||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals(parent)))  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  ||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals(parent)))  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	||(Token.BLOCK!=  Token.NAME  &&  Token.BLOCK.equals(parent)))  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NAME)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
121	[BUG]  [BUGGY]  case  blk:  return  Token.BLOCK;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  blk:  return  Token.BLOCK;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  blk:  return  Token.BLOCK;	  case    javascript.jscomp.mozilla.rhino.Token.BLOCK:    return    Token.BLOCK;    	non-compiled	[CE]  ')'  expected	8	None	replace
122	[BUG]  [BUGGY]  if(Token.BLOCK  ==  null)  {  return  JSR;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK  ==  null)  {  return  JSR;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK  ==  null)  {  return  JSR;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	5	None	replace
123	[BUG]  [BUGGY]  parent  ==  null  ||  parent  ==  parent.getParent())  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  parent  ==  null  ||  parent  ==  parent.getParent())  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	parent  ==  null  ||  parent  ==  parent.getParent())  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
124	[BUG]  [BUGGY]  parent  ==  null  ||  parent  ==  parent.parent)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  parent  ==  null  ||  parent  ==  parent.parent)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	parent  ==  null  ||  parent  ==  parent.parent)  {  return  Token.BLOCK;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(JSR    ==    null)    {    return    Token.BLOCK;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
125	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.CATCH)  {  return  Token.BLOCK;  }  else  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.EXPR_RESERVED)    {    return    Token.BLOCK;    }    else    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
126	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.CATCH  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.CATCH  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.CATCH  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.CATCH)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	15	None	replace
127	[BUG]  [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;  break;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;  break;  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	case  javascript.jscomp.mozilla.rhino.Token.BLOCK:  return  Token.BLOCK;  break;	      	non-compiled	[CE]  ')'  expected	7	None	replace
128	[BUG]  [BUGGY]  if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  Token.CATCH;  case  com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:  return  Token.FINALLY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.VOID:  return  Token.VOID;  case  com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:  return  Token.RESERVED;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:  return  Token.EMPTY;  case  com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:    [BUGGY]  if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }  [BUGGY]    case  com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:  return  Token.LABEL;  case  com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:  return  Token.TARGET;  case  com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:  return  Token.LOOP;  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:  case  com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:  return  Token.EXPR_RESULT;  case  com.google.javascript.jscomp.mozilla.rhino.Token.JSR:  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformTokenType  [RETURN_TYPE]  int  int  token  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  cur  flagsNode  fnNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  msg  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  token  	projects/Closure81/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.24253562503633297	1196	1196	1	replace	if(Token.BLOCK!=  Token.NONE  ||  Token.BLOCK!=  null)  {  return  Token.BLOCK;  }	  if(Token.BLOCK!=    Token.NONE)    {    return    Token.BLOCK;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
