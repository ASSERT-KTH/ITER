bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  CSVRecord  headerRecord  =  this.headerRecord.getRecord();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  headerRecord  =  this.headerRecord.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  headerRecord  =  this.headerRecord.getRecord();	  final    CSVRecord    nextRecord    =    this.headerRecord.getNextRecord();    	non-compiled	[CE]  ';'  expected	16	None	replace
2	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.getNextHeader();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.getNextHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.headerRecord.getNextHeader();	  final    CSVRecord    nextRecord    =    this.headerRecord.getNextRecord();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
3	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.next();  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.next();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.headerRecord.next();	  static    final    CSVRecord    nextRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]  static  final  CSVRecord  headerRecord  =  this.headerRecord.nextRecord();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  headerRecord  =  this.headerRecord.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  headerRecord  =  this.headerRecord.nextRecord();	  static    final    CSVRecord    nextRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
5	[BUG]  [BUGGY]  this.headerRecord  =  headerRecord.getHeaderRecord();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  headerRecord.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerRecord  =  headerRecord.getHeaderRecord();	  this.headerRecord    =    headerRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
6	[BUG]  [BUGGY]  this.headerRecord  =  headerRecord.toArray();  [CE]  >  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  headerRecord.toArray();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerRecord  =  headerRecord.toArray();	  this.headerRecord    =    headerRecord.values();    	non-compiled	[CE]  >  expected	5	None	replace
7	[BUG]  [BUGGY]  final  CSVRecord  headerRecord  =  this.headerRecord.getHeaderRecord();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  headerRecord  =  this.headerRecord.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  headerRecord  =  this.headerRecord.getHeaderRecord();	  final    CSVRecord    headerRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
8	[BUG]  [BUGGY]  final  CSVRecord  headerRecord  =  this.headerRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  headerRecord  =  this.headerRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  headerRecord  =  this.headerRecord.values();	  final    CSVRecord    headerRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
9	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  this.headerRecord;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  this.headerRecord;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  this.headerRecord;	  final    CSVRecord    nextRecord    =(this.headerRecord!=    null)?    this.headerRecord    :    headerRecord;    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	27	None	replace
10	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  headerRecord;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  headerRecord;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  headerRecord;	  final    CSVRecord    nextRecord    =(this.headerRecord!=    null)?    this.headerRecord    :    headerRecord;    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	27	None	replace
11	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord  :  this.headerRecord;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord  :  this.headerRecord;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord  :  this.headerRecord;	  final    CSVRecord    nextRecord    =(this.headerRecord!=    null)?    this.headerRecord    :    headerRecord;    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	27	None	replace
12	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getHeaderRecord();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.format.getHeaderRecord();	  static    final    CSVRecord    nextRecord    =    this.getHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
13	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.getSkipHeaderRecord();	  static    final    CSVRecord    nextRecord    =    this.getHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
14	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord;  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.headerRecord;	  static    final    CSVRecord    nextRecord    =    this.getHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
15	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  getNextHeader();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  getNextHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  getNextHeader();	  final    CSVRecord    nextRecord    =    getNextRecord();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
16	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  getNextRecord();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  getNextRecord();	  final    CSVRecord    nextRecord    =    getNextRecord();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getNextHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.format.getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getNextHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  ';'  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ';'  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	';'	  if(headerRecord    ==    null)    {    if(this.format.getSkipHeaderRecord()!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	25	None	replace
19	[BUG]  [BUGGY]  ';'  expected;  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ';'  expected;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	';'  expected;	  if(headerRecord    ==    null)    {    if(this.format.getSkipHeaderRecord()!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	25	None	replace
20	[BUG]  [BUGGY]  ';'  expected  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ';'  expected  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	';'  expected	  if(headerRecord    ==    null)    {    if(this.format.getSkipHeaderRecord()!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	25	None	replace
21	[BUG]  [BUGGY]  ';'  expected  =  true;  [CE]  not  a  statement  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ';'  expected  =  true;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	';'  expected  =  true;	  if(headerRecord    ==    null)    {    if(this.format.getSkipHeaderRecord()!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	25	None	replace
22	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getNextSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getNextSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.format.getNextSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getNextSkipHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
23	[BUG]  [BUGGY]  this.headerRecord  =  nextRecord.getHeaderRecord();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  nextRecord.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerRecord  =  nextRecord.getHeaderRecord();	  this.headerRecord    =    nextRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
24	[BUG]  [BUGGY]  this.headerRecord  =  nextRecord.values()  -  1;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  nextRecord.values()  -  1;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerRecord  =  nextRecord.values()  -  1;	  this.headerRecord    =    nextRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
25	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.toArray();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.toArray();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.headerRecord.toArray();	  final    CSVRecord    nextRecord    =    this.headerRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
26	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.getRecords();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.getRecords();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.headerRecord.getRecords();	  final    CSVRecord    nextRecord    =    this.headerRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
27	[BUG]  [BUGGY]  this.headerHeader  =  nextRecord.getHeader();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  this.headerHeader  =  nextRecord.getHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerHeader  =  nextRecord.getHeader();	  this.headerHeader    =    nextRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
28	[BUG]  [BUGGY]  this.headerHeader  =  nextRecord.header();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  this.headerHeader  =  nextRecord.header();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerHeader  =  nextRecord.header();	  this.headerHeader    =    nextRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
29	[BUG]  [BUGGY]  this.headerHeader  =  nextRecord.headerHeader();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  this.headerHeader  =  nextRecord.headerHeader();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerHeader  =  nextRecord.headerHeader();	  this.headerHeader    =    nextRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
30	[BUG]  [BUGGY]  headerRecord  =  nextRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  headerRecord  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	headerRecord  =  nextRecord.values();	  if(headerRecord    ==    null)    {    if(!headerRecord.isEmpty())    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	26	None	replace
31	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.record();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.record();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.headerRecord.record();	  final    CSVRecord    nextRecord    =    this.headerRecord.getRecord();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
32	[BUG]  [BUGGY]  Header  =  nextRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Header  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	Header  =  nextRecord.values();	  if(headerRecord!=    null)    {    if(this.format.getSkipHeaderRecord()    ==    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
33	[BUG]  [BUGGY]  headerRecord  =  this.format.getSkipHeaderRecord();  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  headerRecord  =  this.format.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	headerRecord  =  this.format.getSkipHeaderRecord();	  if(headerRecord    ==    null)    {    if(this.format!=    null)    {    headerRecord    =    this.format.getSkipHeaderRecord();    }    	non-compiled	[CE]  not  a  statement	6	None	replace
34	[BUG]  [BUGGY]  NeighborRecord  nextRecord  =  this.format.getSkipHeaderRecord();  [CE]  not  a  statement  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NeighborRecord  nextRecord  =  this.format.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	NeighborRecord  nextRecord  =  this.format.getSkipHeaderRecord();	  if(headerRecord    ==    null)    {    if(this.format!=    null)    {    headerRecord    =    this.format.getSkipHeaderRecord();    }    	non-compiled	[CE]  not  a  statement	6	None	replace
35	[BUG]  [BUGGY]  this.format  =  headerRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  this.format  =  headerRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.format  =  headerRecord.values();	  if(headerRecord    ==    null)    {    if(this.format!=    null)    {    headerRecord    =    this.format.getSkipHeaderRecord();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
36	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(CSSRecord)this.headerRecord;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(CSSRecord)this.headerRecord;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(CSSRecord)this.headerRecord;	  final    CSVRecord    nextRecord    =(CSVRecord)this.headerRecord;    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	14	None	replace
37	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =(CSVRecord)this.headerRecord;  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =(CSVRecord)this.headerRecord;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =(CSVRecord)this.headerRecord;	  final    CSVRecord    nextRecord    =(CSVRecord)this.headerRecord;    	non-compiled	[CE]  not  a  statement	14	None	replace
38	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.getCSVHeaderRecord();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.getCSVHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.getCSVHeaderRecord();	  final    CSVRecord    nextRecord    =    this.getSkipHeaderRecord();    	non-compiled	[CE]  not  a  statement	19	None	replace
39	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.getNextSkipHeaderRecord();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.getNextSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.getNextSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.getNextHeaderRecord();    	non-compiled	[CE]  not  a  statement	28	None	replace
40	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(CSSRecord)this.headerRecord.clone();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(CSSRecord)this.headerRecord.clone();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(CSSRecord)this.headerRecord.clone();	  final    CSVRecord    nextRecord    =(CSVRecord)this.headerRecord.clone();    	non-compiled	[CE]  not  a  statement	13	None	replace
41	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =(CSVRecord)this.headerRecord.clone();  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =(CSVRecord)this.headerRecord.clone();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =(CSVRecord)this.headerRecord.clone();	  final    CSVRecord    nextRecord    =(CSVRecord)this.headerRecord.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
42	[BUG]  [BUGGY]  final  CSVRecord  headerRecord  =(CSVRecord)this.headerRecord.clone();  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  headerRecord  =(CSVRecord)this.headerRecord.clone();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  headerRecord  =(CSVRecord)this.headerRecord.clone();	  final    CSVRecord    nextRecord    =(CSVRecord)this.headerRecord.clone();    	non-compiled	[CE]  not  a  statement	13	None	replace
43	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecords();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.format.getNumberRecords();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.format.getNumberRecords();	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  not  a  statement	8	None	replace
44	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  getSkipHeaderRecord();  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    getHeaderRecord();    	non-compiled	[CE]  not  a  statement	22	None	replace
45	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  getCSVHeaderRecord();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  getCSVHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  getCSVHeaderRecord();	  final    CSVRecord    nextRecord    =    getHeaderRecord();    	non-compiled	[CE]  not  a  statement	22	None	replace
46	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  getNextHeaderRecord();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  getNextHeaderRecord();	  final    CSVRecord    nextRecord    =    getHeaderRecord();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
47	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getNextRecord();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.format.getNextRecord();	  static    final    CSVRecord    nextRecord    =    this.getNextRecord();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
48	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.getNextHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.getNextHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.getNextHeaderRecord();	  static    final    CSVRecord    nextRecord    =    this.getNextRecord();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
49	[BUG]  [BUGGY]  NeighborRecord  nextRecord  =  this.format.getNextRecord();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NeighborRecord  nextRecord  =  this.format.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	NeighborRecord  nextRecord  =  this.format.getNextRecord();	  if(headerRecord    ==    null)    {    if(this.format!=    null)    {    headerRecord    =    this.format.getSkipHeaderRecord();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
50	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.format.getSkipHeaderRecord();	  final    CSVRecord    nextRecord    =    this.format.getSkipHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  NeighborRecord  <  K>  headerRecord  =  nextRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  NeighborRecord  <  K>  headerRecord  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	NeighborRecord  <  K>  headerRecord  =  nextRecord.values();	  if(headerRecord    ==    null)    {    if(this.format.getSkipHeaderRecord()!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
52	[BUG]  [BUGGY]  NeighborRecord  <  K,  V>  headerRecord  =  nextRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  NeighborRecord  <  K,  V>  headerRecord  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	NeighborRecord  <  K,  V>  headerRecord  =  nextRecord.values();	  if(headerRecord    ==    null)    {    if(this.format.getSkipHeaderRecord()!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
53	[BUG]  [BUGGY]  NeighborRecord  <?>  headerRecord  =  nextRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NeighborRecord  <?>  headerRecord  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	NeighborRecord  <?>  headerRecord  =  nextRecord.values();	  if(headerRecord    ==    null)    {    if(this.format.getSkipHeaderRecord()!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
54	[BUG]  [BUGGY]  this.headerRecord  =  headerRecord.toString();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  headerRecord.toString();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerRecord  =  headerRecord.toString();	  this.headerRecord    =    headerRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
55	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord.values()  :  null;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord.values()  :  null;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord.values()  :  null;	  final    CSVRecord    nextRecord    =    this.headerRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
56	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord.values()  :  Collections.EMPTY_LIST;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord.values()  :  Collections.EMPTY_LIST;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord.values()  :  Collections.EMPTY_LIST;	  final    CSVRecord    nextRecord    =    this.headerRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
57	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord  :  this.headerRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord  :  this.headerRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(this.headerRecord!=  null)?  this.headerRecord  :  this.headerRecord.values();	  final    CSVRecord    nextRecord    =    this.headerRecord.values();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
58	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(headerRecord  ==  null)?  this.headerRecord  :  headerRecord;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(headerRecord  ==  null)?  this.headerRecord  :  headerRecord;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(headerRecord  ==  null)?  this.headerRecord  :  headerRecord;	  final    CSVRecord    nextRecord    =(this.headerRecord!=    null)?    this.headerRecord    :    headerRecord;    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	27	None	replace
59	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.getNextRecord();  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.headerRecord.getNextRecord();	  static    final    CSVRecord    nextRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
60	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.getRecord();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.getRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.headerRecord.getRecord();	  static    final    CSVRecord    nextRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
61	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.reset();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.reset();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.headerRecord.reset();	  static    final    CSVRecord    nextRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  ';'  expected	23	None	replace
62	[BUG]  [BUGGY]  NeighborRecord  <  K,  V>  nextRecord  =  nextRecord.values();  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  NeighborRecord  <  K,  V>  nextRecord  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	NeighborRecord  <  K,  V>  nextRecord  =  nextRecord.values();	  if(headerRecord    ==    null)    {    if(nextRecord!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  ';'  expected	24	None	replace
63	[BUG]  [BUGGY]  NeighborRecord  <  K>  nextRecord  =  nextRecord.values();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  NeighborRecord  <  K>  nextRecord  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	NeighborRecord  <  K>  nextRecord  =  nextRecord.values();	  if(headerRecord    ==    null)    {    if(nextRecord!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  ';'  expected	24	None	replace
64	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  getNextRecord(this.format);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  getNextRecord(this.format);  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  getNextRecord(this.format);	  final    CSVRecord    nextRecord    =    getNextRecord();    	non-compiled	[CE]  ';'  expected	1	None	replace
65	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  getNextRecord().values();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  getNextRecord().values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  getNextRecord().values();	  final    CSVRecord    nextRecord    =    getNextRecord();    	non-compiled	[CE]  ';'  expected	1	None	replace
66	[BUG]  [BUGGY]  ';'  expected  =  false;  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ';'  expected  =  false;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	';'  expected  =  false;	  if(headerRecord    ==    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  ';'  expected	20	None	replace
67	[BUG]  [BUGGY]  NeighborRecord  <  K,  V>  nextRecord  =  this.format.getSkipHeaderRecord();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  NeighborRecord  <  K,  V>  nextRecord  =  this.format.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	NeighborRecord  <  K,  V>  nextRecord  =  this.format.getSkipHeaderRecord();	  if(headerRecord!=    null)    {    if(this.format.getSkipHeaderRecord()    ==    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  ';'  expected	4	None	replace
68	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.next();  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.next();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.headerRecord.next();	  final    CSVRecord    nextRecord    =    this.headerRecord.getRecord();    	non-compiled	[CE]  ';'  expected	15	None	replace
69	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  getHeaderRecord();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  getHeaderRecord();	  static    final    CSVRecord    nextRecord    =    this.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	18	None	replace
70	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =(CSVRecord)this.getHeaderRecord();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =(CSVRecord)this.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =(CSVRecord)this.getHeaderRecord();	  static    final    CSVRecord    nextRecord    =    this.getHeaderRecord();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
71	[BUG]  [BUGGY]  final  CSVRecord  headerRecord  =  nextRecord.nextRecord();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  headerRecord  =  nextRecord.nextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  headerRecord  =  nextRecord.nextRecord();	  final    CSVRecord    headerRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  ';'  expected	17	None	replace
72	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =(CSDVecord)this.headerRecord.clone();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =(CSDVecord)this.headerRecord.clone();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =(CSDVecord)this.headerRecord.clone();	  final    CSVRecord    nextRecord    =(CSVRecord)this.headerRecord.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
73	[BUG]  [BUGGY]  final  CSVRecord  headerRecord  =  this.headerRecord.record();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  headerRecord  =  this.headerRecord.record();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  headerRecord  =  this.headerRecord.record();	  final    CSVRecord    headerRecord    =    this.headerRecord.nextRecord();    	non-compiled	[CE]  ';'  expected	17	None	replace
74	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  headerRecord.getNextRecord();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  headerRecord.getNextRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  headerRecord.getNextRecord();	  final    CSVRecord    nextRecord    =    this.headerRecord.getNextRecord();    	non-compiled	[CE]  ';'  expected	16	None	replace
75	[BUG]  [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.toArray(new  CSVRecord[this.headerRecord.size()  ]);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  CSVRecord  nextRecord  =  this.headerRecord.toArray(new  CSVRecord[this.headerRecord.size()  ]);  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	final  CSVRecord  nextRecord  =  this.headerRecord.toArray(new  CSVRecord[this.headerRecord.size()  ]);	  final    CSVRecord    nextRecord    =    this.headerRecord.values();    	non-compiled	[CE]  ';'  expected	12	None	replace
76	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.values();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.headerRecord.values();	  final    CSVRecord    nextRecord    =    this.headerRecord.values();    	non-compiled	[CE]  ';'  expected	12	None	replace
77	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  headerRecord;  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  headerRecord;  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =(this.headerRecord  ==  null)?  this.headerRecord  :  headerRecord;	  final    CSVRecord    nextRecord    =(this.headerRecord!=    null)?    this.headerRecord    :    headerRecord;    	non-compiled	[CE]  ';'  expected	27	None	replace
78	[BUG]  [BUGGY]  HeaderRecord  nextRecord  =  this.format.getHeaderRecord();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  HeaderRecord  nextRecord  =  this.format.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	HeaderRecord  nextRecord  =  this.format.getHeaderRecord();	  if(headerRecord!=    null)    {    if(this.format.getSkipHeaderRecord()    ==    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  ';'  expected	4	None	replace
79	[BUG]  [BUGGY]  HeaderRecord  nextRecord  =  this.format.getSkipHeaderRecord();  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  HeaderRecord  nextRecord  =  this.format.getSkipHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	HeaderRecord  nextRecord  =  this.format.getSkipHeaderRecord();	  if(headerRecord!=    null)    {    if(this.format.getSkipHeaderRecord()    ==    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  ';'  expected	4	None	replace
80	[BUG]  [BUGGY]  this.headerRecord  =  nextRecord.toString();  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  nextRecord.toString();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	this.headerRecord  =  nextRecord.toString();	  this.headerRecord    =    nextRecord.values();    	non-compiled	[CE]  ';'  expected	3	None	replace
81	[BUG]  [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.getHeaderRecord();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  CSVRecord  nextRecord  =  this.headerRecord.getHeaderRecord();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	static  final  CSVRecord  nextRecord  =  this.headerRecord.getHeaderRecord();	  static    final    CSVRecord    nextRecord    =    this.getHeaderRecord();    	non-compiled	[CE]  ';'  expected	18	None	replace
82	[BUG]  [BUGGY]  lastHeaderRecord  =  nextRecord.values();  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  lastHeaderRecord  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	lastHeaderRecord  =  nextRecord.values();	  if(headerRecord    ==    null)    {    if(nextRecord!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  ';'  expected	24	None	replace
83	[BUG]  [BUGGY]  nextRecord  =  nextRecord.values();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nextRecord  =  nextRecord.values();  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	nextRecord  =  nextRecord.values();	  if(headerRecord    ==    null)    {    if(nextRecord!=    null)    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  ';'  expected	24	None	replace
84	[BUG]  [BUGGY]  if(headerRecord!=  null)  {  headerRecord  =  this.format.getSkipHeaderRecord();  }  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(headerRecord!=  null)  {  headerRecord  =  this.format.getSkipHeaderRecord();  }  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	if(headerRecord!=  null)  {  headerRecord  =  this.format.getSkipHeaderRecord();  }	  if(headerRecord    ==    null)    {    if(this.format!=    null)    {    headerRecord    =    this.format.getSkipHeaderRecord();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
85	[BUG]  [BUGGY]  if(headerRecord!=  null)  {  headerRecord  =  nextRecord.values();  }  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(headerRecord!=  null)  {  headerRecord  =  nextRecord.values();  }  [BUGGY]      if  (nextRecord  !=  null)  {  headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	368	368	1	replace	if(headerRecord!=  null)  {  headerRecord  =  nextRecord.values();  }	  if(headerRecord    ==    null)    {    if(this.format!=    null)    {    headerRecord    =    this.format.getSkipHeaderRecord();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
