projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(nullString)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(this.recordValue)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("/")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(nullValue)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(String.valueOf(this.getClass().getSimpleName()));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(String.valueOf(';'));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(String.valueOf(record));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(String.valueOf(this.getClass().getName()));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("/*")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("/-")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(nullValue)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(this.recordValue)?null:this.recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(this.recordValue)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(this.recordValue.equalsIgnoreCase(input)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(value.equalsIgnoreCase(value)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(value)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input.getValue());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(this.recordValue.equalsIgnoreCase(this.recordValue)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("</")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("}")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("<")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(nullValue)?null:input,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259parser.addRecordValue(';');
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(null);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:input,reference);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("{/")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(false)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.emptyList();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=newCSVRecordValue();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("{")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase("{/")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=null){addRecordValue(String.valueOf(this.getClass().getName()));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=null){addRecordValue(String.valueOf(this.getClass().getName()));}else{thrownewIllegalArgumentException("");}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(String.valueOf(this.getClass().getName()+1));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(value)?null:Integer.toString(input));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(input)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(value)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:value);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(value.equalsIgnoreCase(value)?null:value.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Integer.toString(value)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=newCSVRecordValue(true);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=newCSVRecordValue(0);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=newCSVRecordValue(this.cSVFormat);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(false)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(true)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(null)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("<")?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("<")?null:input.getMessage());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(nullValue)?null:input,2);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(nullValue)?null:input,0,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(this.recordValue)?null:input,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=null){addRecordValue(String.valueOf(this.getClass().getSimpleName()));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=getClass()){addRecordValue(String.valueOf(this.getClass().getSimpleName()));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=null){addRecordValue(String.valueOf(this.getClass().getSimpleName()));}else{thrownewIllegalArgumentException("");}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.emptySet();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.emptyMap();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.EMPTY_STRING;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=null;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.EMPTY_LIST+1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(this.recordValue.equalsIgnoreCase(this.recordValue)?null:this.recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("/-")?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("/-*")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259parser.addRecordValue(';',1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259parser.addRecordValue(';',true);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259parser.addRecordValue(';',-1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Integer.equalsIgnoreCase(this.recordValue)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(this.recordValue)?null:this.recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Integer.equalsIgnoreCase(this.recordValue)?null:Integer.toString(input));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(record==null){addRecordValue(String.valueOf(record));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(record!=null){addRecordValue(String.valueOf(record));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(record==null){addRecordValue(String.valueOf(record));}else{thrownewIllegalArgumentException("");}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(record!=null){addRecordValue(String.valueOf(record));}else{thrownewIllegalArgumentException("");}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.addRecordValue(null);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259_addRecordValue(null);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(null,null);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase("</")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input,2);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input,3);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input,0,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(this.recordValue.equalsIgnoreCase(input)?null:this.recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("*")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("/*")?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("/*")?null:input.getValue());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(this.recordValue)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(nullValue)?null:output.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(value.equalsIgnoreCase(value)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:value.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("}")?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("}")?null:input.getValue());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(true)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(true)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(false)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:reference,value);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:reference,input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:reference);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(String.valueOf(';')+1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259parser.addRecordValue(String.valueOf(';'));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259validateValue(String.valueOf(';'));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input.getMessage());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input.getKey());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input.getRecordValue());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(value.equalsIgnoreCase(value)?null:recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(getRecordValue().equalsIgnoreCase(value)?null:recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(RecordValue.equalsIgnoreCase(value)?null:recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.EMPTY_LIST?Collections.EMPTY_LIST:Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=newCSVFormat();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259super.addRecordValue(String.valueOf(record));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:reference,reference);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259parser.addRecordValue(String.valueOf(this.getClass().getName()));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259validate(String.valueOf(this.getClass().getName()));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(this.recordValue)?null:Integer.toString(this.recordValue));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(this.recordValue)?null:input,this.recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input.getRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Lists.newArrayList();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259super.addRecordValue(null);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("}")?null:Integer.toString(input));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase("}")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("}")?null:Integer.MAX_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259parser.addRecordValue(String.valueOf(this.getClass().getSimpleName()));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259addRecordValue(String.valueOf(this.getClass().getSimpleName()+1));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("{/-")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("</-")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(null)?null:input,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(null)?null:input,false);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("{/*")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("</*")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(this.recordValue.equalsIgnoreCase(this.recordValue)?null:this.recordValue,input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(nullValue)?null:input,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(recordValue.equalsIgnoreCase(value)?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259append(String.valueOf(';'));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(value.equalsIgnoreCase(value)?null:value);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(this.recordValue.equalsIgnoreCase(input)?null:recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(value)?null:input,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(value)?null:input,value);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(nullValue)?null:input.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=getClass()){addRecordValue(String.valueOf(this.getClass().getSimpleName()));}else{thrownewIllegalArgumentException("");}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(this.recordValue)?1:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(false)?null:input,recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:input,1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(nullValue)?null:input,true);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=getClass()){addRecordValue(String.valueOf(this.getClass().getName()));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=getClass()){addRecordValue(String.valueOf(this.getClass().getName()));}else{thrownewIllegalArgumentException("");}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(this.getClass()!=getClass()){addRecordValue(String.valueOf(this.getClass().getName()));}else{thrownewIllegalStateException("");}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(Input.equalsIgnoreCase(value)?null:Input.escape(input));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.binarySearch(this.recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(value.equalsIgnoreCase(value)?1:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=newCSVRecordValue(DEFAULT_CSV_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=newCSVRecordValue(DEFAULT_REcord_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259if(String.valueOf(';')!=0){addRecordValue(String.valueOf(';'));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase("{}")?null:input);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(value.equalsIgnoreCase(value)?null:reference,reference);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:recordValue,recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:record);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(value)?null:output.toString());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.recordValue=Collections.EMPTY_LIST?Collections.EMPTY_LIST:Collections.EMPTY_STRING;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(this.recordValue)?null:this.recordValue,this.recordValue);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java259this.record.add(input.equalsIgnoreCase(this.recordValue)?null:this.recordValue,this.recordName);
