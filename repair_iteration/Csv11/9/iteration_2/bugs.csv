bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hdrMap.put(header,  Integer.valueOf(0));  [CE]  :  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  hdrMap.put(header,  Integer.valueOf(0));  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	hdrMap.put(header,  Integer.valueOf(0));	      	non-compiled	[CE]  :  expected	2	None	replace
2	[BUG]  [BUGGY]  String  headerRecord  =  hdrMap.get(header);  [CE]  :  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  String  headerRecord  =  hdrMap.get(header);  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	String  headerRecord  =  hdrMap.get(header);	      	non-compiled	[CE]  :  expected	2	None	replace
3	[BUG]  [BUGGY]  hdrMap.put(header,  new  Integer(i));  [CE]  :  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  hdrMap.put(header,  new  Integer(i));  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	hdrMap.put(header,  new  Integer(i));	      	non-compiled	[CE]  :  expected	2	None	replace
4	[BUG]  [BUGGY]  hdrMap.put(header,  Integer.valueOf(1));  [CE]  :  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  hdrMap.put(header,  Integer.valueOf(1));  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	hdrMap.put(header,  Integer.valueOf(1));	      	non-compiled	[CE]  :  expected	2	None	replace
5	[BUG]  [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length  ==  0)  {  [CE]  :  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length  ==  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord  ==  null  ||  headerRecord.length  ==  0)  {	  if(headerRecord!=    null    ||    headerRecord.length    ==    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
6	[BUG]  [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length!=  0)  {  [CE]  :  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length!=  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord  ==  null  ||  headerRecord.length!=  0)  {	  if(headerRecord!=    null    ||    headerRecord.length    ==    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
7	[BUG]  [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length  <  0)  {  [CE]  :  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length  <  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord  ==  null  ||  headerRecord.length  <  0)  {	  if(headerRecord!=    null    ||    headerRecord.length    ==    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
8	[BUG]  [BUGGY]  if(headerRecord!=  null  ||  headerRecord.length  <  0)  {  [CE]  :  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord!=  null  ||  headerRecord.length  <  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord!=  null  ||  headerRecord.length  <  0)  {	  if(headerRecord!=    null    ||    headerRecord.length    <    2)    {    	non-compiled	[CE]  :  expected	4	None	replace
9	[BUG]  [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length  <  2)  {  [CE]  :  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length  <  2)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord  ==  null  ||  headerRecord.length  <  2)  {	  if(headerRecord!=    null    ||    headerRecord.length    <    2)    {    	non-compiled	[CE]  :  expected	4	None	replace
10	[BUG]  [BUGGY]  if(headerRecord!=  null  ||  headerRecord.length  ==  2)  {  [CE]  :  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord!=  null  ||  headerRecord.length  ==  2)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord!=  null  ||  headerRecord.length  ==  2)  {	  if(headerRecord!=    null    ||    headerRecord.length    <    2)    {    	non-compiled	[CE]  :  expected	4	None	replace
11	[BUG]  [BUGGY]  hdrMap.put(header,  Integer.valueOf(i));  [CE]  :  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  hdrMap.put(header,  Integer.valueOf(i));  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	hdrMap.put(header,  Integer.valueOf(i));	      	non-compiled	[CE]  :  expected	2	None	replace
12	[BUG]  [BUGGY]  if(headerRecord!=  null)  {  headerRecord  =  new  HashMap  <  String,  Integer>();  }  [CE]  :  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord!=  null)  {  headerRecord  =  new  HashMap  <  String,  Integer>();  }  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord!=  null)  {  headerRecord  =  new  HashMap  <  String,  Integer>();  }	      	non-compiled	[CE]  :  expected	2	None	replace
13	[BUG]  [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length  >=  0)  {  [CE]  :  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord  ==  null  ||  headerRecord.length  >=  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord  ==  null  ||  headerRecord.length  >=  0)  {	  if(headerRecord!=    null    ||    headerRecord.length    ==    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
14	[BUG]  [BUGGY]  Object  headerRecord  =  hdrMap.get(header);  [CE]  :  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Object  headerRecord  =  hdrMap.get(header);  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	Object  headerRecord  =  hdrMap.get(header);	      	non-compiled	[CE]  :  expected	2	None	replace
15	[BUG]  [BUGGY]  if(headerRecord!=  null  &&  headerRecord.length  <  2)  {  [CE]  :  expected  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord!=  null  &&  headerRecord.length  <  2)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord!=  null  &&  headerRecord.length  <  2)  {	  if(headerRecord!=    null    ||    headerRecord.length    <    2)    {    	non-compiled	[CE]  :  expected	4	None	replace
16	[BUG]  [BUGGY]  if(headerRecord!=  null  &&  headerRecord.length  ==  0)  {  [CE]  :  expected  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(headerRecord!=  null  &&  headerRecord.length  ==  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  headerRecord.length;  i++)  {  final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  name:  \   "   "  +  header  +     "\   "  in     "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	380	380	1	replace	if(headerRecord!=  null  &&  headerRecord.length  ==  0)  {	  if(headerRecord!=    null    ||    headerRecord.length    ==    0)    {    	non-compiled	[CE]  :  expected	3	None	replace
