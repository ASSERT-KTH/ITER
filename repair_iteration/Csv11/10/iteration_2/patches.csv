bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord[i].length()  +  1;  i++)  {  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord[i].length()  +  1;  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord[i].length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    headerRecord[i].length();    i++)    {    	non-compiled	[CE]  :  expected	18	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord[i].length()  -  1;  i++)  {  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord[i].length()  -  1;  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord[i].length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    headerRecord[i].length();    i++)    {    	non-compiled	[CE]  :  expected	18	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length  -  1;  i  +=  1)  {  [CE]  :  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length  -  1;  i  +=  1)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord.length  -  1;  i  +=  1)  {	  for(int    i    =    0;    i    <    headerRecord.length;    i    +=    1)    {    	non-compiled	[CE]  :  expected	1	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  headerRecord.length();  i++)  {  [CE]  :  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  2;  i  <  headerRecord.length();  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  2;  i  <  headerRecord.length();  i++)  {	  for(int    i    =    1;    i    <    headerRecord.length();    i++)    {    	non-compiled	[CE]  :  expected	11	None	replace
5	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length();  i++)  {  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length();  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	For(int  i  =  0;  i  <  headerRecord.length();  i++)  {	  for(int    i    =    1;    i    <    headerRecord.length();    i++)    {    	non-compiled	[CE]  :  expected	11	None	replace
6	[BUG]  [BUGGY]  ||  header.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ||  header.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	||  header.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(header.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	20	None	replace
7	[BUG]  [BUGGY]  ||(header.length()  ==  0  &&  headerRecord[i]!=  null))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ||(header.length()  ==  0  &&  headerRecord[i]!=  null))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	||(header.length()  ==  0  &&  headerRecord[i]!=  null))  {  throw  new  IllegalArgumentException( " ");  }	  if(header.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	20	None	replace
8	[BUG]  [BUGGY]  final  int  headerRecord.length()  {  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  int  headerRecord.length()  {  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	final  int  headerRecord.length()  {  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(header.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	20	None	replace
9	[BUG]  [BUGGY]  final  int  headerRecord.length()  {  0  ||  headerRecord.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  :  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  int  headerRecord.length()  {  0  ||  headerRecord.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	final  int  headerRecord.length()  {  0  ||  headerRecord.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(header.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	20	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length();  i  +=  1)  {  [CE]  :  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length();  i  +=  1)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord.length();  i  +=  1)  {	  for(int    i    =    0;    i    <    headerRecord.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	17	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length()  +  2;  i  +=  2)  {  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length()  +  2;  i  +=  2)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord.length()  +  2;  i  +=  2)  {	  for(int    i    =    0;    i    <    headerRecord.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	17	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  headerRecord.length();  i  +=  2)  {  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  1;  i  <  headerRecord.length();  i  +=  2)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  1;  i  <  headerRecord.length();  i  +=  2)  {	  for(int    i    =    0;    i    <    headerRecord.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	17	None	replace
13	[BUG]  [BUGGY]  hdrMap.put(header,  Integer.toString(i));  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  hdrMap.put(header,  Integer.toString(i));  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	hdrMap.put(header,  Integer.toString(i));	  hdrMap.put(header,    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	14	None	replace
14	[BUG]  [BUGGY]  hdrMap.put(header,  Integer.toHexString(i));  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  hdrMap.put(header,  Integer.toHexString(i));  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	hdrMap.put(header,  Integer.toHexString(i));	  hdrMap.put(header,    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	14	None	replace
15	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length  -  1;  i++)  {  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length  -  1;  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	For(int  i  =  0;  i  <  headerRecord.length  -  1;  i++)  {	  For(int    i    =    0;    i    <    headerRecord.length;    i++)    {    	non-compiled	[CE]  :  expected	4	None	replace
16	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length  -  2;  i++)  {  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length  -  2;  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	For(int  i  =  0;  i  <  headerRecord.length  -  2;  i++)  {	  For(int    i    =    0;    i    <    headerRecord.length;    i++)    {    	non-compiled	[CE]  :  expected	4	None	replace
17	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  headerRecord.length;  i++)  {  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  For(int  i  =  1;  i  <  headerRecord.length;  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	For(int  i  =  1;  i  <  headerRecord.length;  i++)  {	  For(int    i    =    0;    i    <    headerRecord.length;    i++)    {    	non-compiled	[CE]  :  expected	4	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.headerRecord.size();  i++)  {  [CE]  :  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  this.headerRecord.size();  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  this.headerRecord.size();  i++)  {	  for(int    i    =    0;    i    <    headerRecord.size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  headerRecord.size();  i++)  {  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  1;  i  <  headerRecord.size();  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  1;  i  <  headerRecord.size();  i++)  {	  for(int    i    =    0;    i    <    headerRecord.size();    i++)    {    	non-compiled	[CE]  :  expected	21	None	replace
20	[BUG]  [BUGGY]  hdrMap.put(header,  new  Integer(0));  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  hdrMap.put(header,  new  Integer(0));  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	hdrMap.put(header,  new  Integer(0));	  hdrMap.put(header,    new    Integer(i));    	non-compiled	[CE]  :  expected	9	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length;  i  -=  1)  {  [CE]  :  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length;  i  -=  1)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord.length;  i  -=  1)  {	  for(int    i    =    0;    i    <    headerRecord.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	19	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length  -  2;  i  -=  2)  {  [CE]  :  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length  -  2;  i  -=  2)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord.length  -  2;  i  -=  2)  {	  for(int    i    =    0;    i    <    headerRecord.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	19	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length();  i  -=  2)  {  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord.length();  i  -=  2)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord.length();  i  -=  2)  {	  for(int    i    =    0;    i    <    headerRecord.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	19	None	replace
24	[BUG]  [BUGGY]  hdrMap.put(header,  Integer.MIN_VALUE);  [CE]  :  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  hdrMap.put(header,  Integer.MIN_VALUE);  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	hdrMap.put(header,  Integer.MIN_VALUE);	  hdrMap.put(header,    Integer.valueOf(1));    	non-compiled	[CE]  :  expected	10	None	replace
25	[BUG]  [BUGGY]  hdrMap.put(i,  Integer.valueOf(0));  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  hdrMap.put(i,  Integer.valueOf(0));  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	hdrMap.put(i,  Integer.valueOf(0));	  hdrMap.put(header,    Integer.valueOf(0));    	non-compiled	[CE]  :  expected	7	None	replace
26	[BUG]  [BUGGY]  String  headerRecord  =  hdrMap.get(i);  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String  headerRecord  =  hdrMap.get(i);  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	String  headerRecord  =  hdrMap.get(i);	  String    headerRecord    =    hdrMap.get(header);    	non-compiled	[CE]  :  expected	8	None	replace
27	[BUG]  [BUGGY]  final  String  headerRecord  =  hdrMap.get(header);  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  String  headerRecord  =  hdrMap.get(header);  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	final  String  headerRecord  =  hdrMap.get(header);	  String    headerRecord    =    hdrMap.get(header);    	non-compiled	[CE]  :  expected	8	None	replace
28	[BUG]  [BUGGY]  String  headerRecord  =  hdrMap.get(header,  Integer.valueOf(0));  [CE]  :  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  String  headerRecord  =  hdrMap.get(header,  Integer.valueOf(0));  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	String  headerRecord  =  hdrMap.get(header,  Integer.valueOf(0));	  String    headerRecord    =    hdrMap.get(header);    	non-compiled	[CE]  :  expected	8	None	replace
29	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length;  i  +=  1)  {  [CE]  :  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length;  i  +=  1)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	For(int  i  =  0;  i  <  headerRecord.length;  i  +=  1)  {	  For(int    i    =    0;    i    <    headerRecord.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	16	None	replace
30	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  headerRecord.length;  i  +=  2)  {  [CE]  :  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  For(int  i  =  1;  i  <  headerRecord.length;  i  +=  2)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	For(int  i  =  1;  i  <  headerRecord.length;  i  +=  2)  {	  For(int    i    =    0;    i    <    headerRecord.length;    i    +=    2)    {    	non-compiled	[CE]  :  expected	16	None	replace
31	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length;  i  -=  2)  {  [CE]  :  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  For(int  i  =  0;  i  <  headerRecord.length;  i  -=  2)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	For(int  i  =  0;  i  <  headerRecord.length;  i  -=  2)  {	  for(int    i    =    0;    i    <    headerRecord.length;    i    -=    2)    {    	non-compiled	[CE]  :  expected	19	None	replace
32	[BUG]  [BUGGY]  String  headerRecord  =  hdrMap.get(header,  i);  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String  headerRecord  =  hdrMap.get(header,  i);  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	String  headerRecord  =  hdrMap.get(header,  i);	  String    headerRecord    =    hdrMap.get(header);    	non-compiled	[CE]  :  expected	8	None	replace
33	[BUG]  [BUGGY]  hdrMap.put(header,  Integer.MAX_VALUE);  [CE]  :  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  hdrMap.put(header,  Integer.MAX_VALUE);  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	hdrMap.put(header,  Integer.MAX_VALUE);	  hdrMap.put(header,    Integer.valueOf(1));    	non-compiled	[CE]  :  expected	10	None	replace
34	[BUG]  [BUGGY]  final  int  headerLength()  {  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  int  headerLength()  {  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	final  int  headerLength()  {  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(header.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	20	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerrecord.length();  i++)  {  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerrecord.length();  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerrecord.length();  i++)  {	  for(int    i    =    0;    i    <    headerRecord.length()    -    1;    i++)    {    	non-compiled	[CE]  :  expected	12	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  headerRecord[i].length();  i++)  {  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  1;  i  <  headerRecord[i].length();  i++)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  1;  i  <  headerRecord[i].length();  i++)  {	  for(int    i    =    0;    i    <    headerRecord[i].length();    i++)    {    	non-compiled	[CE]  :  expected	18	None	replace
37	[BUG]  [BUGGY]  hdrMap.put(headerRecord,  Integer.valueOf(i));  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  hdrMap.put(headerRecord,  Integer.valueOf(i));  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	hdrMap.put(headerRecord,  Integer.valueOf(i));	  hdrMap.put(header,    Integer.valueOf(i));    	non-compiled	[CE]  :  expected	14	None	replace
38	[BUG]  [BUGGY]  final  int  headerLength()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  int  headerLength()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	final  int  headerLength()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(header.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	20	None	replace
39	[BUG]  [BUGGY]  final  int  header.length()  {  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  int  header.length()  {  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	final  int  header.length()  {  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(header.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	20	None	replace
40	[BUG]  [BUGGY]  final  int  headerLength()  {  0  ||  headerRecord.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  int  headerLength()  {  0  ||  headerRecord.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	final  int  headerLength()  {  0  ||  headerRecord.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(header.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  :  expected	20	None	replace
41	[BUG]  [BUGGY]  String  headerRecord  =  hdrMap.get(header,  Integer.valueOf(i));  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  String  headerRecord  =  hdrMap.get(header,  Integer.valueOf(i));  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	String  headerRecord  =  hdrMap.get(header,  Integer.valueOf(i));	  String    headerRecord    =    hdrMap.get(header);    	non-compiled	[CE]  :  expected	8	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headerRecord.size();  i  +=  2)  {  [CE]  :  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  for(int  i  =  0;  i  <  headerRecord.size();  i  +=  2)  {  [BUGGY]      final  String  header  =  headerRecord[i];  final  boolean  containsHeader  =  hdrMap.containsKey(header);  final  boolean  emptyHeader  =  header.trim().isEmpty();  if  (containsHeader  &&  (!emptyHeader  ||  (emptyHeader  &&  !this.format.getIgnoreEmptyHeaders())))  {  throw  new  IllegalArgumentException(     "The  header  contains  a  duplicate  name:  \     "     "  +  header  +       "\     "  in       "  +  Arrays.toString(headerRecord));  }  hdrMap.put(header,  Integer.valueOf(i));  }  }  [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.2672612419124244	381	381	1	replace	for(int  i  =  0;  i  <  headerRecord.size();  i  +=  2)  {	  for(int    i    =    0;    i    <    headerRecord.length();    i    +=    2)    {    	non-compiled	[CE]  :  expected	17	None	replace
