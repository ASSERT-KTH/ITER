bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.header  =  nextRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.header  =  nextRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.header  =  nextRecord.values();	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    else    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
2	[BUG]  [BUGGY]  This.header  =  nextRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  This.header  =  nextRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	This.header  =  nextRecord.values();	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    else    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
3	[BUG]  [BUGGY]  this.header  =  firstRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  this.header  =  firstRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.header  =  firstRecord.values();	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    else    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
4	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntryName();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntryName();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.format.getEntryName();	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
5	[BUG]  [BUGGY]  final  Map.Entry  <  K,  V>  entry  =  this.format.getEntry();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Map.Entry  <  K,  V>  entry  =  this.format.getEntry();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	final  Map.Entry  <  K,  V>  entry  =  this.format.getEntry();	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
6	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntryByName();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntryByName();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.format.getEntryByName();	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
7	[BUG]  [BUGGY]  nextRecord  =  new  HashMap  <  String,Object>();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nextRecord  =  new  HashMap  <  String,Object>();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	nextRecord  =  new  HashMap  <  String,Object>();	  if(nextRecord!=    null)    {    nextRecord    =    new    HashMap    <    String,Object>();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
8	[BUG]  [BUGGY]  pendingRecord  =  new  HashMap  <  String,Object>();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  pendingRecord  =  new  HashMap  <  String,Object>();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	pendingRecord  =  new  HashMap  <  String,Object>();	  if(nextRecord!=    null)    {    nextRecord    =    new    HashMap    <    String,Object>();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
9	[BUG]  [BUGGY]  headerRecord  =  nextRecord.values();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  headerRecord  =  nextRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	headerRecord  =  nextRecord.values();	  if(nextRecord!=    null)    {    nextRecord    =    new    HashMap    <    String,Object>();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
10	[BUG]  [BUGGY]  Annotations.checkState(headerRecord!=  null);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Annotations.checkState(headerRecord!=  null);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Annotations.checkState(headerRecord!=  null);	  if(nextRecord!=    null)    {    nextRecord    =    new    HashMap    <    String,Object>();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
11	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getLastChild();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getLastChild();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  nextRecord  =  this.format.getLastChild();	  Map.Entry    <    K,    V>    nextRecord    =    this.format.getNext();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
12	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getNextSibling();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getNextSibling();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  nextRecord  =  this.format.getNextSibling();	  Map.Entry    <    K,    V>    nextRecord    =    this.format.getNext();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
13	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.next();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.next();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  nextRecord  =  this.format.next();	  Map.Entry    <    K,    V>    nextRecord    =    this.format.getNext();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
14	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry();	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry(this.headerRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
15	[BUG]  [BUGGY]  final  Map.Entry  <  K,  V>  entry  =  this.format.getEntry(this.headerRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  Map.Entry  <  K,  V>  entry  =  this.format.getEntry(this.headerRecord);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	final  Map.Entry  <  K,  V>  entry  =  this.format.getEntry(this.headerRecord);	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry(this.headerRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
16	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.format);  [CE]  not  a  statement  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.format);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.format);	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry(this.headerRecord);    	non-compiled	[CE]  not  a  statement	5	None	replace
17	[BUG]  [BUGGY]  This.headerRecord  =  nextRecord.values();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  This.headerRecord  =  nextRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	This.headerRecord  =  nextRecord.values();	  if(nextRecord!=    null)    {    this.headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	8	None	replace
18	[BUG]  [BUGGY]  this.headerRecord  =  headerRecord.values();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  headerRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.headerRecord  =  headerRecord.values();	  if(nextRecord!=    null)    {    this.headerRecord    =    nextRecord.values();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  if  (headerRecord  ==  null  ||  nextRecord  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if  (headerRecord  ==  null  ||  nextRecord  ==  null)  {  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if  (headerRecord  ==  null  ||  nextRecord  ==  null)  {	  if    (headerRecord    ==    null    ||    nextRecord!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  if  (nextRecord  ==  null  ||  headerRecord!=  null)  {  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if  (nextRecord  ==  null  ||  headerRecord!=  null)  {  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	if  (nextRecord  ==  null  ||  headerRecord!=  null)  {	  if    (headerRecord    ==    null    ||    nextRecord!=    null)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
21	[BUG]  [BUGGY]  this.headerRecord  =  header.values();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  header.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.headerRecord  =  header.values();	  this.headerRecord    =    nextRecord.values();    	non-compiled	[CE]  not  a  statement	3	None	replace
22	[BUG]  [BUGGY]  this.headerRecord  =  nextRecord.values()  -  1;  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  nextRecord.values()  -  1;  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.headerRecord  =  nextRecord.values()  -  1;	  this.headerRecord    =    nextRecord.values();    	non-compiled	[CE]  not  a  statement	3	None	replace
23	[BUG]  [BUGGY]  this.header  =  _headerRecord.values();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.header  =  _headerRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.header  =  _headerRecord.values();	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    else    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	11	None	replace
24	[BUG]  [BUGGY]  this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord());  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord());  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord());	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	10	None	replace
25	[BUG]  [BUGGY]  this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord(),  this.header);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord(),  this.header);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord(),  this.header);	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	10	None	replace
26	[BUG]  [BUGGY]  this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord(),  nextRecord.values());  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord(),  nextRecord.values());  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.header  =  new  CSVHeader(this.format.getSkipHeaderRecord(),  nextRecord.values());	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	10	None	replace
27	[BUG]  [BUGGY]  this.headerRecord  =  getHeaderRecord();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  getHeaderRecord();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.headerRecord  =  getHeaderRecord();	  if(nextRecord!=    null)    {    this.headerRecord    =    nextRecord.values();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
28	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntryCount();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntryCount();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.format.getEntryCount();	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
29	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntryY();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntryY();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.format.getEntryY();	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntry(0);  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.format.getEntry(0);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.format.getEntry(0);	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry();    	non-compiled	[CE]  not  a  statement	2	None	replace
31	[BUG]  [BUGGY]  this.headerRecord  =  nextHeader.values();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  nextHeader.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.headerRecord  =  nextHeader.values();	  this.headerRecord    =    nextRecord.values();    	non-compiled	[CE]  not  a  statement	3	None	replace
32	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getNextHeader();  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getNextHeader();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  nextRecord  =  this.format.getNextHeader();	  Map.Entry    <    K,    V>    nextRecord    =    this.format.getNext();    	non-compiled	[CE]  not  a  statement	4	None	replace
33	[BUG]  [BUGGY]  Annotations.checkNotNull(headerRecord);  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Annotations.checkNotNull(headerRecord);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Annotations.checkNotNull(headerRecord);	  if(nextRecord!=    null)    {    nextRecord    =    new    HashMap    <    String,Object>();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	9	None	replace
34	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.headerRecord);  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.headerRecord);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.headerRecord);	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry(this.headerRecord);    	non-compiled	[CE]  not  a  statement	5	None	replace
35	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.skippedHeaderRecord);  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.skippedHeaderRecord);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.skippedHeaderRecord);	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry(this.headerRecord);    	non-compiled	[CE]  not  a  statement	5	None	replace
36	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.size);  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.size);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  entry  =  this.headerRecord.getEntry(this.size);	  Map.Entry    <    K,    V>    entry    =    this.format.getEntry(this.headerRecord);    	non-compiled	[CE]  not  a  statement	5	None	replace
37	[BUG]  [BUGGY]  This.headerRecord  =  headerRecord.values();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  This.headerRecord  =  headerRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	This.headerRecord  =  headerRecord.values();	  if(nextRecord!=    null)    {    this.headerRecord    =    nextRecord.values();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
38	[BUG]  [BUGGY]  this.headerRecord  =  nextRecord.toString();  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.headerRecord  =  nextRecord.toString();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.headerRecord  =  nextRecord.toString();	  this.headerRecord    =    nextRecord.values();    	non-compiled	[CE]  	3	None	replace
39	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getHeader();  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getHeader();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  nextRecord  =  this.format.getHeader();	  Map.Entry    <    K,    V>    nextRecord    =    this.format.getNext();    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getNumberOfLinks();  [CE]  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Map.Entry  <  K,  V>  nextRecord  =  this.format.getNumberOfLinks();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Map.Entry  <  K,  V>  nextRecord  =  this.format.getNumberOfLinks();	  Map.Entry    <    K,    V>    nextRecord    =    this.format.getNext();    	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  this.header  =  lastRecord.values();  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  this.header  =  lastRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	this.header  =  lastRecord.values();	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    else    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  	11	None	replace
42	[BUG]  [BUGGY]  {  this.header  =  nextRecord.values();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  {  this.header  =  nextRecord.values();  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	{  this.header  =  nextRecord.values();	  if(nextRecord!=    null)    {    this.header    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	10	None	replace
43	[BUG]  [BUGGY]  Annotations.checkState(headerRecord  ==  null);  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Annotations.checkState(headerRecord  ==  null);  [BUGGY]      headerRecord  =  nextRecord.values();  }  }  else  {  if  (this.format.getSkipHeaderRecord())  {  this.nextRecord();  }  headerRecord  =  formatHeader;  }    [CLASS]  CSVParser  1  [METHOD]  initializeHeader  [RETURN_TYPE]  Map  	projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java	0.31622776601683794	369	369	1	replace	Annotations.checkState(headerRecord  ==  null);	  if(nextRecord!=    null)    {    nextRecord    =    new    HashMap    <    String,Object>();    }    else    {    headerRecord    =    nextRecord.values();    }    	non-compiled	[CE]  not  a  statement	9	None	replace
