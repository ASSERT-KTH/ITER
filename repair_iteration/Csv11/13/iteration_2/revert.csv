projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()!=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(header,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(i,Integer.valueOf(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(header,Integer.valueOf(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(i,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.trim().length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.trim().length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()==1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.trim().length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.trim().length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()!=1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()>=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()!=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()>1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrRecord.put(header,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrRecord.put(header,Integer.valueOf(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()>=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)&&this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)?false:this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.length().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.headerRecord.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(headerRecord!=null){hdrMap.put(header,Integer.valueOf(0));}else{hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(headerRecord!=null){hdrMap.put(header,Integer.valueOf(i));}else{hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(i,Integer.toString(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.getIgnoreEmptyHeaders();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.trim().length()!=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.trim().length()==1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)?true:this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)?true:this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)?false:this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.length()>1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.length()!=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.trim().length()!=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.trim().length()==1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.headerRecord.trim().length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384staticfinalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.headerRecord.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.headerRecord.trim().length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.isEmpty()||this.headerRecord.isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.isEmpty()||this.format.getIgnoreEmptyHeaders()!=null;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.isEmpty()||this.format.getIgnoreEmptyHeaders()==null;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.length()>1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.length()!=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.trim().length()>1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(i,Integer.valueOf(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(header,Integer.toString(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()==1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()<1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()!=1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)&&this.header.trim().length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384staticfinalbooleanemptyHeader=this.header.equals(this.headerRecord)&&this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()==2;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()>1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(i!=Integer.MIN_VALUE){if(headerRecord!=null){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(i!=Integer.MIN_VALUE){if(headerRecord==null){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(hdrMap!=null){if(headerRecord!=null){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(hdrMap!=null){if(headerRecord!=null){hdrMap.put(header,Integer.valueOf(1));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.trim().length()!=2;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.length().equals(this.headerRecord.length());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrRecord.put(i,Integer.valueOf(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.trim().length()>=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrRecord.put(i,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.length()!=1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()>=1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(header,Integer.MIN_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(header,Integer.MAX_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)&&this.header.length().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)&&this.header.length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.trim().length()>=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(headerRecord==null){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(headerRecord!=null){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(header,Integer.toHexString(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.isEmpty()||this.format.getIgnoreEmptyHeaders()!=null);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord!=null&&this.headerRecord.isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.isEmpty()||this.format.getIgnoreEmptyHeaders()!=null);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(header,Integer.valueOf(1));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384staticfinalbooleanemptyHeader=this.header.equals(this.headerRecord)?false:this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)?false:this.header.trim().length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrRecord.put(header,Integer.MAX_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrRecord.put(header,Integer.MIN_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.headerRecord.length().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.headerRecord.trim().length()!=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrRecord.put(header,Integer.toString(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrRecord.put(header,Integer.toHexString(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)?false:this.header.trim().length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(hdrMap!=null){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(this.format!=null){if(headerRecord!=null){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.length()>=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.equals(this.headerRecord)&&this.header.length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.length()>=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384hdrMap.put(headerRecord,Integer.valueOf(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=header.length()>2;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384if(this.headerRecord!=null){finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.headerRecord.trim().isEmpty();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.headerRecord.equals(this.headerRecord)&&this.headerRecord.length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java384finalbooleanemptyHeader=this.header.isEmpty()||this.format.getIgnoreEmptyHeaders()>0;
