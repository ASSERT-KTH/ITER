projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=nextRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headers.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=nextRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){for(Map.Entry<String,Object>entry:headerRecord.entrySet()){this.initializeHeader(entry.getKey());}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){for(Map.Entry<String,String>entry:this.headerRecord.entrySet()){headerRecord=entry.getKey();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370Map.Entry<K,V>entry=this.format.getEntry();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){for(Map.Entry<String,Object>entry:headerRecord.entrySet()){this.format=entry.getValue();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?header:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?header.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.getHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?null:this.headers.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.values():Collections.EMPTY_MAP;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?headerRecord.null:headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?headerRecord.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?headerRecord:headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toString();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.toArray(newString[this.headerRecord.size()]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toArray(newString[this.headerRecord.size()]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headers.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.values():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.initializeHeader(headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){this.headerRecord=newHashMap<String,Object>();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){headerRecord=newCSVHeader();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){this.headerRecord=newHashMap<Map<K,V>();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?this.headerRecord.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextHeaderRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headerRecord:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){this.header=newCSVHeader(this.format.getSkipHeaderRecord());}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newHashMap<String,Object>();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){this.header=newCSVHeader();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.getHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headers!=null)?this.headers.values():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=header.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.recordedHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.initializeHeader(this.headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.initializeHeader(this.header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.initializeHeader(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.initializeHeader(headerRecord,this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370finalMap.Entry<K,V>entry=this.format.getEntry();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370Map.Entry<K,V>entry=this.format.getEntryName();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370Map.Entry<K,V>entry=this.format.getEntry(this.headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord.values():this.headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?headerRecord.values():this.headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headers.getHeaderRecord(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.getSkipHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.getHeaderRecord()+1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headerRecord.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headerRecord.values():headerHeader;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?this.headerRecord.values():headerHeader;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.getSkipHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.format.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?header.values():this.headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.header.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?header.values():this.header;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?this.headerRecord:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headerRecord:header.getValues();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newLinkedHashMap<String,Object>();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newHashMap<String,Object>(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newHashMap<Object,Object>();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.header=newCSVHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370This.header=newCSVHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord.null:headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord.null:headerRecord.getValues();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord.null:headerRecord.toString();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370This.headerRecord=newHashMap<String,Object>();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toArray(newString[this.nextRecord.size()]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toArray(newString[this.headerRecord.size()+1]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(header==null)?header:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(header!=null)?header:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(header>=null)?header:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(header==null)?header:this.header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.header=newCSVHeader(this.format.getSkipHeaderRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370This.header=newCSVHeader(this.format.getSkipHeaderRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370header=newCSVHeader(this.format.getSkipHeaderRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toArray(newString[this.headerRecord.size()-1]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headers!=null)?this.headers.size():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headers==null)?this.headers.values():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headers!=null)?this.headers.values():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.getSkipHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.getHeader()+1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.toString();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.getHeader()+1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.size():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.keySet():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?this.headers.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toString()+"n";
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.size():Collections.EMPTY_MAP;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headers!=null)?this.headers.values():Collections.EMPTY_MAP;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.keySet():Collections.EMPTY_MAP;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370';'expected
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370';'
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=entry.getKey();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.getKey();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.initializeHeader(entry.getKey());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370Map.Entry<String,Object>headerRecord=headerRecord.entrySet();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.format.getSkipHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.record();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.getHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.toString();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=newCSVHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370HeaderRecord<CSV>headerRecord=newCSVHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newCSVHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.size():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.format=entry.getValue();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.format=newHashMap<String,Object>();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headers==null)?null:this.headers.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headers==null)?null:this.headers.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headers==null)?null:headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newHashMap<Map<K,V>();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370This.headerRecord=newHashMap<Map<K,V>();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.recordHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.recordedHeader(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord:headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?headerRecord:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getSkipHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getHeader()+1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.replaceAll("n","n");
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.recordHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord:header.getValues();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.toHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.initializeHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.reset();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.header=newCSVHeader(this.format.getHeaderRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.header=newCSVHeader(this.format.getLastRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.recordValues();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.trim();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toString()+1;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.toString();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370||headerRecord==null){for(Map.Entry<String,Object>entry:headerRecord.entrySet()){this.format=entry.getValue();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370||headerRecord==null){this.format=entry.getValue();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370||headerRecord==null){for(Map.Entry<String,Object>entry:headerRecord.entrySet()){this.format=entry.getKey();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newHashMap<String,Object>(this.headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newHashMap<String,Object>(this.header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toArray(newString[this.headers.size()]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370NeighborRecord<Map.Entry<String,Object>headerRecord=headerRecord.entrySet();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.initializeHeader(entry.getKey());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370NeighborRecord<Map.Entry<String,Object>>headerRecord=headerRecord.entrySet();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?header:this.header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord:this.headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord:headerRecord.toArray(newString[headerRecord.size()]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370HeaderRecordheaderRecord=newCSVHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.initializeHeader(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.getHeaderRecord(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headers==null)?this.headers.values():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord:this.header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.getHeaderRecord(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getKey();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getValue();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toArray(newString[this.record.size()]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headerRecord:header.getHeaderRecords();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextHeaderRecord.cloneTree();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextHeaderRecord.getHeaderRecord(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headers==null)?this.headers.values():Collections.EMPTY_MAP;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getHeaderRecord(this.format);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370Map.Entry<K,V>entry=this.format.getEntryY();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370Map.Entry<K,V>entry=this.format.getEntry(0);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.header=newCSVHeader(this.format.getRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.removeHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.removeFirst();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headerRecord.values():header;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headerRecord==null)?headerRecord.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370This.initializeHeader(entry.getKey());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.initializeHeader(entry.getValue());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newHashMap<String,Object>(this.format.getHeaderRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord.values():header;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.removeFirst();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.setHeader(this.format.getHeaderRecord());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.removeHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headerRecord==null)?header:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?header:headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.format=entry.getKey();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370';'expected=true;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370This.format=entry.getValue();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.values():header;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.reset();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.toHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headers==null)?this.headers.values():Collections.EMPTY_MAP;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370HeaderRecord<CSVHeader>headerRecord=newCSVHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370';'expected=false;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headers.remove(this.header);
