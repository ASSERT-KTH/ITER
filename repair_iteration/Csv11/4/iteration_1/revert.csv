projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=nextRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headers.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=nextRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){for(Map.Entry<String,Object>entry:headerRecord.entrySet()){this.initializeHeader(entry.getKey());}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){for(Map.Entry<String,String>entry:this.headerRecord.entrySet()){headerRecord=entry.getKey();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370Map.Entry<K,V>entry=this.format.getEntry();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){for(Map.Entry<String,Object>entry:headerRecord.entrySet()){this.format=entry.getValue();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?header:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?headerRecord:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?header.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.getHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?null:this.headers.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.values():Collections.EMPTY_MAP;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?headerRecord.null:headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?headerRecord.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?headerRecord:headerRecord.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.getHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toString();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextRecord.toArray(newString[this.headerRecord.size()]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headerRecord.toArray(newString[this.headerRecord.size()]);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.headers.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headers.values():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.initializeHeader(headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){this.headerRecord=newHashMap<String,Object>();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){headerRecord=newCSVHeader();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){this.headerRecord=newHashMap<Map<K,V>();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord!=null)?this.headerRecord.values():headerRecord;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.nextHeaderRecord.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(headerRecord==null)?this.headerRecord:header.values();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){this.header=newCSVHeader(this.format.getSkipHeaderRecord());}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=newHashMap<String,Object>();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370if(headerRecord==null){this.header=newCSVHeader();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370this.headerRecord=headerRecord.getHeader();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=(this.headers!=null)?this.headers.values():Collections.EMPTY_LIST;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=header.getHeaderRecord();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java370headerRecord=this.header.recordedHeader();
