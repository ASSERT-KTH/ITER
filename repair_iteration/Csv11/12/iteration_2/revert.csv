projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.containsKey(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.containsKey(i);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.containsKey(headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.containsKey(this.headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.hdrMap.containsKey(i);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.containsKey(this.header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(header,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(i,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(i,Integer.valueOf(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(header,Integer.valueOf(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.hdrMap.containsKey(headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsKey(hdrMap);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().equals(hdrMap.get(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.equals(hdrMap.get(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.equals(hdrMap.get(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(header.length()==0){hdrMap.put(header,Integer.valueOf(0));}else{hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(header.length()==0){hdrMap.put(header,Integer.valueOf(0));}else{hdrMap.put(headerRecord,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.contains(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(hdrMap!=null){finalbooleancontainsHeader=this.headerRecord.containsKey(header);}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(header,Integer.valueOf(1));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(header,Integer.valueOf(2));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(hdrMap!=null){finalbooleancontainsHeader=hdrMap.containsKey(i);}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsKey(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleanisEmptyHeader=hdrMap.containsKey(i);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383gerMap.put(header,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(i,Integer.valueOf(2));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(header,Integer.toString(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.hdrMap.containsKey(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.hdrMap.containsKey(this.header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.hdrMap.containsKey(i+1);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsKey(i);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsKey(this.header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsKey(header)||this.headerRecord.containsKey(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleanisEmptyHeader=this.headerRecord.containsKey(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleanhasHeader=this.headerRecord.containsKey(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(i,Integer.valueOf(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.equals(hdrMap.get(i),Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.equals(hdrMap.get(i+1));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.equals(HdrMap.get(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.equals(this.headerRecord.trim());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().equals(hdrMap.get(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().equals(hdrMap.get(i),Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(i,Integer.valueOf(1));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(this.headerRecord!=null){finalbooleancontainsHeader=this.headerRecord.trim().isEmpty();}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(this.headerRecord!=null){finalbooleancontainsHeader=this.headerRecord.trim().isEmpty();}else{thrownewIllegalArgumentException("");}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().length()>0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.header.trim().equals(hdrMap.containsKey(this.header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.header.trim().equals(hdrMap.get(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.contains(i);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.contains(headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.contains(header,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(this.headerRecord!=null){finalbooleancontainsHeader=this.headerRecord.containsKey(hdrMap);}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsKey(this.ignoreEmptyHeaders());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(headerRecord,Integer.valueOf(0));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(header,Integer.MIN_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(header,Integer.MAX_VALUE);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(header!=null){finalbooleancontainsHeader=this.headerRecord.containsKey(header);}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().length()==0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().length()!=0;
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.equals(this.headerRecord.get(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsKey(header)&&this.format.getIgnoreEmptyHeaders().containsKey(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(header!=null){if(header.length()==0){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(header!=null){if(header.length()==0){hdrMap.put(header,Integer.valueOf(1));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=hdrMap.contains(header,Integer.valueOf(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleanhasHeader=hdrMap.containsKey(i);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().equals(this.headerRecord.get(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().equals(HdrMap.get(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.contains(this.header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(header.length()==1){hdrMap.put(header,Integer.valueOf(0));}else{hdrMap.put(headerRecord,Integer.valueOf(1));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(header.length()==1){hdrMap.put(headerRecord,Integer.valueOf(0));}else{hdrMap.put(headerRecord,Integer.valueOf(1));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(headerRecord,Integer.valueOf(i));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.hdrMap.contains(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.hdrMap.containsKey(this.headerRecord);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(headerRecord!=null){finalbooleancontainsHeader=this.hdrMap.containsKey(header);}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(hdrMap!=null){finalbooleancontainsHeader=this.headerMap.containsKey(this.header);}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(this.hdrMap!=null){finalbooleancontainsHeader=this.hdrMap.containsKey(i);}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.hdrMap.containsValue(i);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.trim().equals(this.headerRecord.trim());
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=header.trim().isEmpty();
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383booleancontainsHeader=this.headerRecord.equals(hdrMap.get(header));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(hdrMap!=null){if(header.length()==0){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383if(hdrMap!=null){if(header.length()==1){hdrMap.put(header,Integer.valueOf(0));}
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsKey(header)||this.format.getIgnoreEmptyHeaders().containsKey(header);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383hdrMap.put(headerRecord,Integer.valueOf(1));
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.containsValue(hdrMap);
projects/Csv11/src/main/java/org/apache/commons/csv/CSVParser.java383finalbooleancontainsHeader=this.headerRecord.equals(this.headerMap.get(header));
