bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] public AbstractIntegrator(final String name) { [FE] AssertionError [CONTEXT] [BUGGY] public AbstractIntegrator(final String name) { [BUGGY] this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	85	85	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	85	85	1	add	
3	[BUG] [BUGGY] this.name = name; [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { [BUGGY] this.name = name; [BUGGY] stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	86	86	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { [BUGGY] [BUGGY] this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	86	86	1	add	
5	[BUG] [BUGGY] stepHandlers = new ArrayList<StepHandler>(); [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; [BUGGY] stepHandlers = new ArrayList<StepHandler>(); [BUGGY] stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	87	87	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; [BUGGY] [BUGGY] stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	87	87	1	add	
7	[BUG] [BUGGY] stepStart = Double.NaN; [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); [BUGGY] stepStart = Double.NaN; [BUGGY] stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	88	88	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); [BUGGY] [BUGGY] stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	88	88	1	add	
9	[BUG] [BUGGY] stepSize= Double.NaN; [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; [BUGGY] stepSize= Double.NaN; [BUGGY] eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	89	89	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; [BUGGY] [BUGGY] stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	89	89	1	add	
11	[BUG] [BUGGY] eventsStates = new ArrayList<EventState>(); [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; [BUGGY] eventsStates = new ArrayList<EventState>(); [BUGGY] statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	90	90	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; [BUGGY] [BUGGY] eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	90	90	1	add	
13	[BUG] [BUGGY] statesInitialized = false; [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); [BUGGY] statesInitialized = false; [BUGGY] evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	91	91	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); [BUGGY] [BUGGY] statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	91	91	1	add	
15	[BUG] [BUGGY] evaluations = new Incrementor(); [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; [BUGGY] evaluations = new Incrementor(); [BUGGY] setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	92	92	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; [BUGGY] [BUGGY] evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	92	92	1	add	
17	[BUG] [BUGGY] setMaxEvaluations(-1); [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); [BUGGY] setMaxEvaluations(-1); [BUGGY] resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	93	93	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); [BUGGY] [BUGGY] setMaxEvaluations(-1); resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	93	93	1	add	
19	[BUG] [BUGGY] resetEvaluations(); [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); [BUGGY] resetEvaluations(); [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	94	94	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); [BUGGY] [BUGGY] resetEvaluations(); } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	94	94	1	add	
21	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	95	95	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize= Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); resetEvaluations(); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] <init> [RETURN_TYPE] String)  String name [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	95	95	1	add	
23	[BUG] [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,  maxIterationCount,   new BracketingNthOrderBrentSolver(convergence, 5)); [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,      maxIterationCount,            new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	128	130	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { [BUGGY] [BUGGY] addEventHandler(handler, maxCheckInterval, convergence,      maxIterationCount,            new BracketingNthOrderBrentSolver(convergence, 5)); maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	128	130	1	add	
25	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	131	131	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	131	131	1	add	
27	[BUG] [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,   maxIterationCount, solver)); [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateRealSolver solver) { [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,          maxIterationCount, solver)); [BUGGY] maxIterationCount, solver)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateRealSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount UnivariateRealSolver solver  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	139	140	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateRealSolver solver) { [BUGGY] [BUGGY] eventsStates.add(new EventState(handler, maxCheckInterval, convergence,          maxIterationCount, solver)); maxIterationCount, solver)); } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateRealSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount UnivariateRealSolver solver  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	139	140	1	add	
29	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateRealSolver solver) { eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount, solver)); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateRealSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount UnivariateRealSolver solver  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	141	141	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateRealSolver solver) { eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount, solver)); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] addEventHandler [RETURN_TYPE] void  EventHandler handler final double maxCheckInterval final double convergence final int maxIterationCount UnivariateRealSolver solver [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations EventHandler handler String name int maxIterationCount UnivariateRealSolver solver  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	141	141	1	add	
31	[BUG] [BUGGY] evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); [FE] AssertionError [CONTEXT] public void setMaxEvaluations(int maxEvaluations) { [BUGGY] evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] setMaxEvaluations [RETURN_TYPE] void  int maxEvaluations [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name int maxEvaluations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	169	169	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void setMaxEvaluations(int maxEvaluations) { [BUGGY] [BUGGY] evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); } [CLASS] AbstractIntegrator 1 [METHOD] setMaxEvaluations [RETURN_TYPE] void  int maxEvaluations [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name int maxEvaluations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	169	169	1	add	
33	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void setMaxEvaluations(int maxEvaluations) { evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] setMaxEvaluations [RETURN_TYPE] void  int maxEvaluations [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name int maxEvaluations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	170	170	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void setMaxEvaluations(int maxEvaluations) { evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] setMaxEvaluations [RETURN_TYPE] void  int maxEvaluations [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name int maxEvaluations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	170	170	1	add	
35	[BUG] [BUGGY] evaluations.resetCount(); [FE] AssertionError [CONTEXT] protected void resetEvaluations() { [BUGGY] evaluations.resetCount(); [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] resetEvaluations [RETURN_TYPE] void  [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	185	185	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void resetEvaluations() { [BUGGY] [BUGGY] evaluations.resetCount(); } [CLASS] AbstractIntegrator 1 [METHOD] resetEvaluations [RETURN_TYPE] void  [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	185	185	1	add	
37	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] protected void resetEvaluations() { evaluations.resetCount(); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] resetEvaluations [RETURN_TYPE] void  [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void resetEvaluations() { evaluations.resetCount(); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] resetEvaluations [RETURN_TYPE] void  [VARIABLES] ExpandableStatefulODE expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	add	
39	[BUG] [BUGGY] this.expandable = equations; [FE] AssertionError [CONTEXT] protected void setEquations(final ExpandableStatefulODE equations) { [BUGGY] this.expandable = equations; [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] setEquations [RETURN_TYPE] void  ExpandableStatefulODE equations [VARIABLES] ExpandableStatefulODE equations expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void setEquations(final ExpandableStatefulODE equations) { [BUGGY] [BUGGY] this.expandable = equations; } [CLASS] AbstractIntegrator 1 [METHOD] setEquations [RETURN_TYPE] void  ExpandableStatefulODE equations [VARIABLES] ExpandableStatefulODE equations expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	add	
41	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] protected void setEquations(final ExpandableStatefulODE equations) { this.expandable = equations; [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] setEquations [RETURN_TYPE] void  ExpandableStatefulODE equations [VARIABLES] ExpandableStatefulODE equations expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void setEquations(final ExpandableStatefulODE equations) { this.expandable = equations; [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] setEquations [RETURN_TYPE] void  ExpandableStatefulODE equations [VARIABLES] ExpandableStatefulODE equations expandable boolean isLastStep resetOccurred statesInitialized double convergence maxCheckInterval stepSize stepStart Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	add	
43	[BUG] [BUGGY] if (y0.length != equations.getDimension()) { [FE] AssertionError [CONTEXT] public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws MathIllegalStateException, MathIllegalArgumentException { [BUGGY] if (y0.length != equations.getDimension()) { [BUGGY] throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0); [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	200	200	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws MathIllegalStateException, MathIllegalArgumentException { [BUGGY] [BUGGY] if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0); [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	200	200	1	add	
45	[BUG] [BUGGY] if (y.length != equations.getDimension()) { [FE] AssertionError [CONTEXT] public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws MathIllegalStateException, MathIllegalArgumentException { if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } [BUGGY] if (y.length != equations.getDimension()) { [BUGGY] throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0);  integrate(expandableODE, t); [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	203	203	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws MathIllegalStateException, MathIllegalArgumentException { if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } [BUGGY] [BUGGY] if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0);  integrate(expandableODE, t); [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	203	203	1	add	
47	[BUG] [BUGGY] final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  [BUGGY] final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); [BUGGY] expandableODE.setTime(t0); expandableODE.setPrimaryState(y0);  integrate(expandableODE, t);  System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime();  [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	208	208	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException, MathIllegalArgumentException { if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  [BUGGY] [BUGGY] final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0);  integrate(expandableODE, t);  System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime();  [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	208	208	1	add	
49	[BUG] [BUGGY] expandableODE.setTime(t0); [FE] AssertionError [CONTEXT] if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); [BUGGY] expandableODE.setTime(t0); [BUGGY] expandableODE.setPrimaryState(y0);  integrate(expandableODE, t);  System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	209	209	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); [BUGGY] [BUGGY] expandableODE.setTime(t0); expandableODE.setPrimaryState(y0);  integrate(expandableODE, t);  System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	209	209	1	add	
51	[BUG] [BUGGY] expandableODE.setPrimaryState(y0); [FE] AssertionError [CONTEXT] if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); [BUGGY] expandableODE.setPrimaryState(y0); [BUGGY]   integrate(expandableODE, t);  System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	210	210	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); [BUGGY] [BUGGY] expandableODE.setPrimaryState(y0);  integrate(expandableODE, t);  System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	210	210	1	add	
53	[BUG] [BUGGY] integrate(expandableODE, t); [FE] AssertionError [CONTEXT] if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0);  [BUGGY] integrate(expandableODE, t); [BUGGY]   System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	213	213	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); }  final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0);  [BUGGY] [BUGGY] integrate(expandableODE, t);  System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } [CLASS] AbstractIntegrator 1 [METHOD] integrate [RETURN_TYPE] double  FirstOrderDifferentialEquations equations final double t0 final double[] y0 final double t final double[] y [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y y0 double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name FirstOrderDifferentialEquations equations  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	213	213	1	add	
55	[BUG] [BUGGY] evaluations.incrementCount(); [FE] AssertionError [CONTEXT] public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException { [BUGGY] evaluations.incrementCount(); [BUGGY] expandable.computeDerivatives(t, y, yDot); } [CLASS] AbstractIntegrator 1 [METHOD] computeDerivatives [RETURN_TYPE] void  final double t final double[] y final double[] yDot [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y yDot double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	249	249	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException { [BUGGY] [BUGGY] evaluations.incrementCount(); expandable.computeDerivatives(t, y, yDot); } [CLASS] AbstractIntegrator 1 [METHOD] computeDerivatives [RETURN_TYPE] void  final double t final double[] y final double[] yDot [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y yDot double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	249	249	1	add	
57	[BUG] [BUGGY] expandable.computeDerivatives(t, y, yDot); [FE] AssertionError [CONTEXT] public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException { evaluations.incrementCount(); [BUGGY] expandable.computeDerivatives(t, y, yDot); [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] computeDerivatives [RETURN_TYPE] void  final double t final double[] y final double[] yDot [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y yDot double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	250	250	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException { evaluations.incrementCount(); [BUGGY] [BUGGY] expandable.computeDerivatives(t, y, yDot); } [CLASS] AbstractIntegrator 1 [METHOD] computeDerivatives [RETURN_TYPE] void  final double t final double[] y final double[] yDot [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y yDot double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	250	250	1	add	
59	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException { evaluations.incrementCount(); expandable.computeDerivatives(t, y, yDot); [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] computeDerivatives [RETURN_TYPE] void  final double t final double[] y final double[] yDot [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y yDot double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	251	251	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException { evaluations.incrementCount(); expandable.computeDerivatives(t, y, yDot); [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] computeDerivatives [RETURN_TYPE] void  final double t final double[] y final double[] yDot [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred statesInitialized double[] y yDot double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	251	251	1	add	
61	[BUG] [BUGGY] this.statesInitialized = stateInitialized; [FE] AssertionError [CONTEXT] protected void setStateInitialized(final boolean stateInitialized) { [BUGGY] this.statesInitialized = stateInitialized; [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] setStateInitialized [RETURN_TYPE] void  final boolean stateInitialized [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred stateInitialized statesInitialized double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	261	261	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void setStateInitialized(final boolean stateInitialized) { [BUGGY] [BUGGY] this.statesInitialized = stateInitialized; } [CLASS] AbstractIntegrator 1 [METHOD] setStateInitialized [RETURN_TYPE] void  final boolean stateInitialized [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred stateInitialized statesInitialized double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	261	261	1	add	
63	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] protected void setStateInitialized(final boolean stateInitialized) { this.statesInitialized = stateInitialized; [BUGGY] } [BUGGY]  [CLASS] AbstractIntegrator 1 [METHOD] setStateInitialized [RETURN_TYPE] void  final boolean stateInitialized [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred stateInitialized statesInitialized double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	262	262	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void setStateInitialized(final boolean stateInitialized) { this.statesInitialized = stateInitialized; [BUGGY] [BUGGY] } [CLASS] AbstractIntegrator 1 [METHOD] setStateInitialized [RETURN_TYPE] void  final boolean stateInitialized [VARIABLES] ExpandableStatefulODE equations expandable expandableODE boolean isLastStep resetOccurred stateInitialized statesInitialized double convergence maxCheckInterval stepSize stepStart t t0 Collection eventsStates stepHandlers Incrementor evaluations String name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	262	262	1	add	
65	[BUG] [BUGGY] double previousT = interpolator.getGlobalPreviousTime(); [FE] AssertionError [CONTEXT] throws MathIllegalStateException { [BUGGY] double previousT = interpolator.getGlobalPreviousTime(); [BUGGY] final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	278	278	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException { [BUGGY] [BUGGY] double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	278	278	1	add	
67	[BUG] [BUGGY] final double currentT = interpolator.getGlobalCurrentTime(); [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); [BUGGY] final double currentT = interpolator.getGlobalCurrentTime(); [BUGGY] resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	279	279	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); [BUGGY] [BUGGY] final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	279	279	1	add	
69	[BUG] [BUGGY] resetOccurred = false; [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); [BUGGY] resetOccurred = false; [BUGGY]   if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); [BUGGY] [BUGGY] resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	
71	[BUG] [BUGGY] if (! statesInitialized) { [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  [BUGGY] if (! statesInitialized) { [BUGGY] for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  [BUGGY] [BUGGY] if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	add	
73	[BUG] [BUGGY] for (EventState state : eventsStates) { [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { [BUGGY] for (EventState state : eventsStates) { [BUGGY] state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { [BUGGY] [BUGGY] for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {   [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	add	
75	[BUG] [BUGGY] state.reinitializeBegin(interpolator); [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { [BUGGY] state.reinitializeBegin(interpolator); [BUGGY] } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	285	285	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { [BUGGY] [BUGGY] state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	285	285	1	add	
77	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); [BUGGY] } [BUGGY] statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	286	286	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws MathIllegalStateException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); [BUGGY] [BUGGY] } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	286	286	1	add	
79	[BUG] [BUGGY] statesInitialized = true; [FE] AssertionError [CONTEXT] double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } [BUGGY] statesInitialized = true; [BUGGY] }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); resetOccurred = false;  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } [BUGGY] [BUGGY] statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	add	
81	[BUG] [BUGGY] final int orderingSign = interpolator.isForward() ? +1 : -1; [FE] AssertionError [CONTEXT]  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  [BUGGY] final int orderingSign = interpolator.isForward() ? +1 : -1; [BUGGY] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  [BUGGY] [BUGGY] final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	add	
83	[BUG] [BUGGY] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() { [FE] AssertionError [CONTEXT]  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; [BUGGY] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() { [BUGGY]   public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }  final int orderingSign = interpolator.isForward() ? +1 : -1; [BUGGY] [BUGGY] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) { [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	add	
85	[BUG] [BUGGY] for (final EventState state : eventsStates) { [FE] AssertionError [CONTEXT] final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); [BUGGY] for (final EventState state : eventsStates) { [BUGGY] if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); [BUGGY] [BUGGY] for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	add	
87	[BUG] [BUGGY] if (state.evaluateStep(interpolator)) { [FE] AssertionError [CONTEXT] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { [BUGGY] if (state.evaluateStep(interpolator)) { [BUGGY]  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	302	302	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { [BUGGY] [BUGGY] if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	302	302	1	add	
89	[BUG] [BUGGY] occuringEvents.add(state); [FE] AssertionError [CONTEXT]  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  [BUGGY] occuringEvents.add(state); [BUGGY] } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  [BUGGY] [BUGGY] occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	
91	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } [BUGGY] } [BUGGY]  while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } [BUGGY] [BUGGY] } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	add	
93	[BUG] [BUGGY] while (!occuringEvents.isEmpty()) { [FE] AssertionError [CONTEXT] }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } [BUGGY] while (!occuringEvents.isEmpty()) { [BUGGY]   final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } [BUGGY] [BUGGY] while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	308	308	1	add	
95	[BUG] [BUGGY] final Iterator<EventState> iterator = occuringEvents.iterator(); [FE] AssertionError [CONTEXT] for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  [BUGGY] final Iterator<EventState> iterator = occuringEvents.iterator(); [BUGGY] final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  [BUGGY] [BUGGY] final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	add	
97	[BUG] [BUGGY] final EventState currentEvent = iterator.next(); [FE] AssertionError [CONTEXT] if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); [BUGGY] final EventState currentEvent = iterator.next(); [BUGGY] iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	312	312	1	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (state.evaluateStep(interpolator)) {  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); [BUGGY] [BUGGY] final EventState currentEvent = iterator.next(); iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState(); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	312	312	1	add	
99	[BUG] [BUGGY] iterator.remove(); [FE] AssertionError [CONTEXT]  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); [BUGGY] iterator.remove(); [BUGGY]   final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState(); currentEvent.stepAccepted(eventT, eventY); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	313	313	1	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) {  final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); [BUGGY] [BUGGY] iterator.remove();  final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState(); currentEvent.stepAccepted(eventT, eventY); [CLASS] AbstractIntegrator 1 [METHOD] acceptStep [RETURN_TYPE] double  AbstractStepInterpolator interpolator final double[] y final double[] yDot final double tEnd [VARIABLES] ExpandableStatefulODE equations expandable expandableODE EventState currentEvent es0 es1 state double convergence currentT eventT maxCheckInterval previousT stepSize stepStart t t0 tEnd Incrementor evaluations StepHandler handler String name SortedSet occuringEvents int orderingSign boolean isLastStep resetOccurred stateInitialized statesInitialized double[] currentY eventY y yDot Iterator iterator Collection eventsStates stepHandlers AbstractStepInterpolator interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	313	313	1	add	
