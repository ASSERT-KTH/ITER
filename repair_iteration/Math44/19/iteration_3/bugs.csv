bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.eventsStates.remove(evaluations.size()  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.eventsStates.remove(evaluations.size()  +  1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.eventsStates.remove(evaluations.size()  +  1);	  this.eventsStates.remove(evaluations.size());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
2	[BUG]  [BUGGY]  this.eventsStates.remove(evaluators.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.eventsStates.remove(evaluators.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.eventsStates.remove(evaluators.size());	  this.eventsStates.remove(evaluators.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
3	[BUG]  [BUGGY]  this.evaluators.remove(evaluators.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.evaluators.remove(evaluators.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.evaluators.remove(evaluators.size());	  this.eventsStates.remove(evaluators.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.remove(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.remove(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.remove(i);  }	  for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.remove(0);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.remove(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.remove(0);  }	  for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
6	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
8	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
9	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
10	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(0).reset();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(0).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(0).reset();  }	  for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    evaluations.get(i).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i).reset();  }  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  For(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	For(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i).reset();  }	  for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    evaluations.get(i).reset();    }    	non-compiled	[CE]  '.class'  expected	11	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.removeCount(evaluations.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.removeCount(evaluations.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
17	[BUG]  [BUGGY]  int  stepHandlers  =  evaluates.get(stepStart);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepHandlers  =  evaluates.get(stepStart);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepHandlers  =  evaluates.get(stepStart);	  int    stepHandlers    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
18	[BUG]  [BUGGY]  int  stepHandlers  =  evaluations.get(stepStart);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepHandlers  =  evaluations.get(stepStart);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepHandlers  =  evaluations.get(stepStart);	  int    stepHandlers    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
19	[BUG]  [BUGGY]  int  stepHandlers  =  evaluations.get(i);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepHandlers  =  evaluations.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepHandlers  =  evaluations.get(i);	  int    stepHandlers    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
20	[BUG]  [BUGGY]  this.eventsStates.clear();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.eventsStates.clear();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.eventsStates.clear();	  this.eventsStates.remove(0);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
21	[BUG]  [BUGGY]  Integer  i  =  evaluations.get(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluations.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluations.get(i);	  Integer    i    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
22	[BUG]  [BUGGY]  Integer  i  =  evaluations.get(0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluations.get(0);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluations.get(0);	  Integer    i    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
23	[BUG]  [BUGGY]  Integer  i  =  evaluates.get(0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluates.get(0);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluates.get(0);	  Integer    i    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
25	[BUG]  [BUGGY]  evaluates.removeCount(evaluations.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.removeCount(evaluations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.removeCount(evaluations.size());	  evaluates.removeCount(evaluations.get(0));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
26	[BUG]  [BUGGY]  evaluates.removeCount(evaluations.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.removeCount(evaluations.size()  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.removeCount(evaluations.size()  -  1);	  evaluates.removeCount(evaluations.get(0));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
27	[BUG]  [BUGGY]  evaluations.removeCount(evaluations.size());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluations.removeCount(evaluations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluations.removeCount(evaluations.size());	  evaluates.removeCount(evaluations.get(0));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
28	[BUG]  [BUGGY]  int  stepSize  =  evaluates.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluates.get(i  +  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluates.get(i  +  1);	  int    stepSize    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
29	[BUG]  [BUGGY]  int  stepSize  =  evaluations.get(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluations.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluations.get(i);	  int    stepSize    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
30	[BUG]  [BUGGY]  int  stepSize  =  evaluates.get(stepStart);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluates.get(stepStart);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluates.get(stepStart);	  int    stepSize    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.remove(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.remove(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.remove(i);  }	  for(int    i    =    0;    i    <    assessments.size();    ++i)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  evaluates.removeCount(1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.removeCount(1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.removeCount(1);	  evaluates.removeCount(0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  evaluates.removeCount(2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.removeCount(2);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.removeCount(2);	  evaluates.removeCount(0);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  i++)  {  evaluates.remove(1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  i++)  {  evaluates.remove(1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  1;  i  <  evaluations.size();  i++)  {  evaluates.remove(1);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(1);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
36	[BUG]  [BUGGY]  int  stepStart  =  evaluations.size()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepStart  =  evaluations.size()  -  1;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepStart  =  evaluations.size()  -  1;	  int    stepStart    =    evaluates.size();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
37	[BUG]  [BUGGY]  int  stepStart  =  evaluates.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepStart  =  evaluates.size()  -  1;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepStart  =  evaluates.size()  -  1;	  int    stepStart    =    evaluates.size();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
38	[BUG]  [BUGGY]  int  stepStart  =  evaluations.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepStart  =  evaluations.size();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepStart  =  evaluations.size();	  int    stepStart    =    evaluates.size();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
39	[BUG]  [BUGGY]  int  stepStart  =  evaluations.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepStart  =  evaluations.size()  -  2;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepStart  =  evaluations.size()  -  2;	  int    stepStart    =    evaluates.size();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
40	[BUG]  [BUGGY]  int  stepStart  =  evaluates.get(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepStart  =  evaluates.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepStart  =  evaluates.get(i);	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluates.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluates.get(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(i  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(i  +  1);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.remove(i  +  1);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
44	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep)  {  continue;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep)  {  continue;  }	  Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
45	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(isLastStep)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(isLastStep)  {  continue;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(0);  if(isLastStep)  {  continue;  }	  Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
46	[BUG]  [BUGGY]  evaluations.remove(0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluations.remove(0);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluations.remove(0);	  evaluates.remove(0);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
47	[BUG]  [BUGGY]  evaluates.remove(1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.remove(1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.remove(1);	  evaluates.remove(0);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
48	[BUG]  [BUGGY]  int  stepSize  =  evaluations.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluations.size()  -  1;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluations.size()  -  1;	  int    stepSize    =    evaluates.size();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
49	[BUG]  [BUGGY]  int  stepSize  =  evaluations.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluations.size();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluations.size();	  int    stepSize    =    evaluates.size();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
50	[BUG]  [BUGGY]  int  stepSize  =  evaluates.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluates.size()  -  1;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluates.size()  -  1;	  int    stepSize    =    evaluates.size();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
51	[BUG]  [BUGGY]  int  stepSize  =  evaluations.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluations.size()  -  2;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluations.size()  -  2;	  int    stepSize    =    evaluates.size();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
52	[BUG]  [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluations);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluations);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluations);	  Incrementor    evaluator    =    getEvaluationsInstance(null);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
53	[BUG]  [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluations.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluations.size());	  Incrementor    evaluator    =    getEvaluationsInstance(null);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
54	[BUG]  [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluates);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluates);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  evaluator  =  getEvaluationsInstance(null,  evaluates);	  Incrementor    evaluator    =    getEvaluationsInstance(null);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
55	[BUG]  [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(registry);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(registry);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  evaluator  =  getEvaluationsInstance(registry);	  Incrementor    evaluator    =    getEvaluationsInstance(null);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.get(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluations.get(i);  }	  for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
57	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)values.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
58	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)values.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  ';'  expected	87	None	replace
60	[BUG]  [BUGGY]  if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
61	[BUG]  [BUGGY]  if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  <identifier>  expected	87	None	replace
62	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(i  +  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(i  +  1);	  Incrementor    state    =(Integer)evaluations.get(i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
63	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(i  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(i  -  1);	  Incrementor    state    =(Integer)evaluations.get(i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
64	[BUG]  [BUGGY]  Incrementor  state  =(Integer)this.evaluations.get(i);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)this.evaluations.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)this.evaluations.get(i);	  Incrementor    state    =(Integer)evaluations.get(i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
65	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
66	[BUG]  [BUGGY]  Integer  i  =  evaluations.get(name);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluations.get(name);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluations.get(name);	  Integer    i    =    evaluates.get(name);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
67	[BUG]  [BUGGY]  Integer  i  =  evaluates.get(this.stepStart);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluates.get(this.stepStart);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluates.get(this.stepStart);	  Integer    i    =    evaluates.get(name);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
68	[BUG]  [BUGGY]  Integer  i  =  evaluates.get(this.maxCheckInterval);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluates.get(this.maxCheckInterval);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluates.get(this.maxCheckInterval);	  Integer    i    =    evaluates.get(name);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
69	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
70	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.is  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.is  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.is	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  ')'  expected	20	None	replace
71	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(!state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(!state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(!state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
72	[BUG]  [BUGGY]  int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i).reset();  }  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i).reset();  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluations.get(i).reset();    }    	non-compiled	[CE]  >  expected	9	None	replace
73	[BUG]  [BUGGY]  evaluations.remove(name);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluations.remove(name);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluations.remove(name);	  evaluates.remove(name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
74	[BUG]  [BUGGY]  evaluates.remove(name  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.remove(name  +  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.remove(name  +  1);	  evaluates.remove(name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
75	[BUG]  [BUGGY]  this.evaluations.remove(evaluations.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.evaluations.remove(evaluations.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.evaluations.remove(evaluations.size());	  this.events.remove(evaluations.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.remove(1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.remove(1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.remove(1);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(1);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
77	[BUG]  [BUGGY]  Integer  evaluator  =  getStatesInitialized();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getStatesInitialized();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getStatesInitialized();	  Integer    evaluator    =    getEvaluationsInitialized();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
78	[BUG]  [BUGGY]  Integer  evaluator  =  getStatementsInitialized();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getStatementsInitialized();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getStatementsInitialized();	  Integer    evaluator    =    getEvaluationsInitialized();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
79	[BUG]  [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized()  +  1;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getEvaluationsInitialized()  +  1;	  Integer    evaluator    =    getEvaluationsInitialized();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
80	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  continue;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  continue;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
81	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    continue;    }    	non-compiled	[CE]  ';'  expected	103	None	replace
82	[BUG]  [BUGGY]  Integer  evaluator  =  getStatesInitialized(evaluations);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getStatesInitialized(evaluations);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getStatesInitialized(evaluations);	  Integer    evaluator    =    getEvaluationsInitialized(evaluations);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
83	[BUG]  [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(evaluations,  evaluations.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(evaluations,  evaluations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getEvaluationsInitialized(evaluations,  evaluations.size());	  Integer    evaluator    =    getEvaluationsInitialized(evaluations);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
84	[BUG]  [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(evaluations,  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(evaluations,  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getEvaluationsInitialized(evaluations,  1);	  Integer    evaluator    =    getEvaluationsInitialized(evaluations);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
86	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
88	[BUG]  [BUGGY]  this.events.remove(evaluations.size()  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.events.remove(evaluations.size()  +  1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.events.remove(evaluations.size()  +  1);	  this.events.remove(evaluations.size());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VAL  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VAL  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VAL	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VAL    	non-compiled	[CE]  ')'  expected	7	None	replace
90	[BUG]  [BUGGY]  if(isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  In  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  In  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  In	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VAL    	non-compiled	[CE]  ')'  expected	7	None	replace
91	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VAL    	non-compiled	[CE]  <identifier>  expected	7	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.get(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
93	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isFirstStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isFirstStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(i);  if(state.isFirstStep)  {  return;  }	  Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
94	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
95	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(!state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(!state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(!state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
96	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.is  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.is  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.is	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  ')'  expected	46	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(0).reset();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(0).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(0).reset();  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.get(0).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(1).reset();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(1).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(1).reset();  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.get(0).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.get(0).reset();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.get(0).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.get(0).reset();  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.get(0).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(1);  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(1);  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(1);  return;  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(0);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
101	[BUG]  [BUGGY]  int  stepStart  =  evaluates.get(0);  return;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepStart  =  evaluates.get(0);  return;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepStart  =  evaluates.get(0);  return;	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(0);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluates.get(0);  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluates.get(0);  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluates.get(0);  return;  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(0);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  evaluates.remove(1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  evaluates.remove(1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  evaluates.remove(1);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.remove(1);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
104	[BUG]  [BUGGY]  evaluations.removeCount(0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluations.removeCount(0);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluations.removeCount(0);	  evaluations.removeCount();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
105	[BUG]  [BUGGY]  evaluations.removeCount(1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluations.removeCount(1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluations.removeCount(1);	  evaluations.removeCount();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
106	[BUG]  [BUGGY]  evaluations.clear();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluations.clear();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluations.clear();	  evaluations.removeCount();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
107	[BUG]  [BUGGY]  Integrator  stepHandlers  =  evaluations.get(i);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integrator  stepHandlers  =  evaluations.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integrator  stepHandlers  =  evaluations.get(i);	  Integrator    stepHandlers    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
108	[BUG]  [BUGGY]  Integrator  stepHandlers  =  evaluates.get(name);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integrator  stepHandlers  =  evaluates.get(name);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integrator  stepHandlers  =  evaluates.get(name);	  Integrator    stepHandlers    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
109	[BUG]  [BUGGY]  Integrator  stepHandlers  =  evaluates.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integrator  stepHandlers  =  evaluates.get(i  +  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integrator  stepHandlers  =  evaluates.get(i  +  1);	  Integrator    stepHandlers    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.removeCount(evaluations.get(0));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.removeCount(evaluations.get(0));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.removeCount(evaluations.get(0));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.removeCount(evaluations.get(1));    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.removeCount(evaluations.get(0));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.removeCount(evaluations.get(0));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.removeCount(evaluations.get(0));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.removeCount(evaluations.get(1));    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
112	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0,  evaluations.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0,  evaluations.size()  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(0,  evaluations.size()  -  1);	  Incrementor    state    =(Integer)evaluations.get(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
113	[BUG]  [BUGGY]  Incrementor  state  =(Integer)this.evaluations.get(0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)this.evaluations.get(0);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)this.evaluations.get(0);	  Incrementor    state    =(Integer)evaluations.get(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
114	[BUG]  [BUGGY]  Incrementor  state  =(Integer)values.get(0);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)values.get(0);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)values.get(0);	  Incrementor    state    =(Integer)evaluations.get(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepSize  =  evaluates.get(i);  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepSize  =  evaluates.get(i);  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepSize  =  evaluates.get(i);  return;  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
116	[BUG]  [BUGGY]  int  stepStart  =  evaluates.get(i);  return;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepStart  =  evaluates.get(i);  return;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepStart  =  evaluates.get(i);  return;	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
117	[BUG]  [BUGGY]  evaluations.resetCount();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluations.resetCount();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluations.resetCount();	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VALUE    	non-compiled	[CE]  ')'  expected	6	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.remove(0);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.remove(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.remove(0);  }	  for(int    i    =    0;    i    <    assessments.size();    ++i)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  ';'  expected	88	None	replace
121	[BUG]  [BUGGY]  evaluates.reset();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.reset();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.reset();	  evaluates.clear();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
122	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }	  if(expandeable    ==    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluations.remove(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluations.remove(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluations.remove(i);  }	  for(int    i    =    0;    i    <    evaluates.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepSize  =  evaluates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepSize  =  evaluates.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepSize  =  evaluates.get(i);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
125	[BUG]  [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }	  if(expandeable!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
126	[BUG]  [BUGGY]  evaluates.resetOccurred();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.resetOccurred();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.resetOccurred();	  evaluates.resetCount();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
127	[BUG]  [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(0);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integrator)evaluations.get(0);	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
128	[BUG]  [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
129	[BUG]  [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
130	[BUG]  [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integrator)evaluations.get(i);	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  1;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Integer  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Integer  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Integer  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.getType()  ==  Integer.MIN_VALUE)  {	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
134	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep)  {  return;  }	  Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
135	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep  ||  state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep  ||  state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep  ||  state.isLastStep)  {  return;  }	  Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
136	[BUG]  [BUGGY]  Integer[]  evaluations  =  getEvaluationsInitialized();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer[]  evaluations  =  getEvaluationsInitialized();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer[]  evaluations  =  getEvaluationsInitialized();	  Integer[]    evaluations    =    getEvaluations();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
137	[BUG]  [BUGGY]  Integer[]  evaluations  =  getEvaluations().size();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer[]  evaluations  =  getEvaluations().size();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer[]  evaluations  =  getEvaluations().size();	  Integer[]    evaluations    =    getEvaluations();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
138	[BUG]  [BUGGY]  Integer[]  evaluations  =  getAllEvaluations();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer[]  evaluations  =  getAllEvaluations();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer[]  evaluations  =  getAllEvaluations();	  Integer[]    evaluations    =    getEvaluations();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluations.remove(0);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluations.remove(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluations.remove(0);  }	  for(int    i    =    0;    i    <    evaluates.size();    i++)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(1);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.remove(1);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
141	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
142	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
143	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(i);  }	  for(int    i    =    0;    i    <    assessments.size();    ++i)    {    evaluations.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
147	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
148	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
149	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN    	non-compiled	[CE]  ')'  expected	79	None	replace
151	[BUG]  [BUGGY]  if(evaluations  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN    	non-compiled	[CE]  ')'  expected	79	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.resetCount();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.resetCount();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.resetCount();  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluations.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(i  +  1);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluations.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
154	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
155	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluations.remove(0);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluations.remove(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluations.remove(0);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    i++)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(1);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(1);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    i++)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(1));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(1));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(1));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.addCount(evaluations.get(0));    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.addCount(evaluations.get(0));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.addCount(evaluations.get(0));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.addCount(evaluations.get(0));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.addCount(evaluations.get(0));    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.addCount(evaluations.get(0));  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.addCount(evaluations.get(0));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.addCount(evaluations.get(0));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.addCount(evaluations.get(0));    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
161	[BUG]  [BUGGY]  this.events.remove(evaluators.size()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.events.remove(evaluators.size()  -  1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.events.remove(evaluators.size()  -  1);	  this.events.remove(events.size());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
162	[BUG]  [BUGGY]  Integer  i  =  evaluates.get(0).reset();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluates.get(0).reset();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluates.get(0).reset();	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.get(0).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
163	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
164	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN    	non-compiled	[CE]  ')'  expected	79	None	replace
165	[BUG]  [BUGGY]  this.evaluationsStates.remove(evaluations.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.evaluationsStates.remove(evaluations.size()  -  1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.evaluationsStates.remove(evaluations.size()  -  1);	  this.eventsStates.remove(evaluations.size());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
166	[BUG]  [BUGGY]  int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(i).reset();  }  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(i).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(i).reset();  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.get(i).reset();    }    	non-compiled	[CE]  >  expected	8	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)values.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)values.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)values.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.getType()  ==  Integer.MIN_VALUE)  {	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.getType()    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
169	[BUG]  [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(expandable);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(expandable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  evaluator  =  getEvaluationsInstance(expandable);	  Incrementor    evaluator    =    getEvaluationsInstance(null);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
170	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.get(0);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluations.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
172	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)values.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
173	[BUG]  [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)values.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
174	[BUG]  [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)values.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
175	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isFirstStep)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isFirstStep)  {  continue;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(i);  if(state.isFirstStep)  {  continue;  }	  Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
177	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
178	[BUG]  [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
179	[BUG]  [BUGGY]  if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
180	[BUG]  [BUGGY]  Integer  stepHandlers  =  evaluates.get(i);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  stepHandlers  =  evaluates.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  stepHandlers  =  evaluates.get(i);	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
181	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
182	[BUG]  [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
183	[BUG]  [BUGGY]  if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
184	[BUG]  [BUGGY]  Integer  i  =  evaluates.size();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluates.size();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluates.size();	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    evaluates.get(i).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
185	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
186	[BUG]  [BUGGY]  Integrator  stepHandlers  =  evaluations.get(stepStart);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integrator  stepHandlers  =  evaluations.get(stepStart);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integrator  stepHandlers  =  evaluations.get(stepStart);	  Integrator    stepHandlers    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
187	[BUG]  [BUGGY]  Integrator  stepHandlers  =  evaluates.get(stepStart);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integrator  stepHandlers  =  evaluates.get(stepStart);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integrator  stepHandlers  =  evaluates.get(stepStart);	  Integrator    stepHandlers    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
188	[BUG]  [BUGGY]  int  stepSize  =  evaluates.get(resetOccurred);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluates.get(resetOccurred);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluates.get(resetOccurred);	  int    stepSize    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
189	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
190	[BUG]  [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
191	[BUG]  [BUGGY]  if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(state.isLastStep)  {  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  '('  expected	44	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.get(i).reset();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.get(i).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluations.get(i).reset();  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluations.get(i).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluations.remove(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluations.remove(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluations.remove(i);  }	  for(int    i    =    0;    i    <    evaluates.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
194	[BUG]  [BUGGY]  Incrementor  evaluator  =  getEvaluationsInitialized();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  evaluator  =  getEvaluationsInitialized();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  evaluator  =  getEvaluationsInitialized();	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(1);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(2));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(2));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(2));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.removeCount(evaluations.get(1));    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
196	[BUG]  [BUGGY]  this.evaluationsStates.remove(evaluations.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.evaluationsStates.remove(evaluations.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.evaluationsStates.remove(evaluations.size());	  this.eventsStates.remove(evaluations.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
197	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
198	[BUG]  [BUGGY]  if(expansions!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expansions!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expansions!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
199	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  ';'  expected	87	None	replace
200	[BUG]  [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  ';'  expected	87	None	replace
201	[BUG]  [BUGGY]  this.evaluations.remove(evaluations.size()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.evaluations.remove(evaluations.size()  -  1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.evaluations.remove(evaluations.size()  -  1);	  this.events.remove(evaluations.size());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
202	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
203	[BUG]  [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(i));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(i));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.addCount(evaluations.get(0));    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(i);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.addCount(evaluations.get(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.addCount(evaluations.get(0));    }    	non-compiled	[CE]  ')'  expected	32	None	replace
206	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
207	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
208	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep  ||  state.isLastStep)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep  ||  state.isLastStep)  {  continue;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(0);  if(state.isFirstStep  ||  state.isLastStep)  {  continue;  }	  Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  int  stepStart  =  evaluates.get(i);  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  int  stepStart  =  evaluates.get(i);  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  i++)  {  int  stepStart  =  evaluates.get(i);  return;  }	  for(int    i    =    0;    i    <    evaluates.size();    i++)    {    int    stepStart    =    evaluates.get(i);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
210	[BUG]  [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(statesInitialized);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(statesInitialized);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getEvaluationsInitialized(statesInitialized);	  Integer    evaluator    =    getEvaluationsInitialized(evaluations);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
211	[BUG]  [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(resetOccurred);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(resetOccurred);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getEvaluationsInitialized(resetOccurred);	  Integer    evaluator    =    getEvaluationsInitialized(evaluations);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
212	[BUG]  [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(resetCount);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized(resetCount);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getEvaluationsInitialized(resetCount);	  Integer    evaluator    =    getEvaluationsInitialized(evaluations);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluations.remove(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluations.remove(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluations.remove(i);  }	  for(int    i    =    0;    i    <    assessments.size();    i++)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
214	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    continue;    }    	non-compiled	[CE]  ';'  expected	103	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(i);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.removeCount(evaluations.get(0));    }    	non-compiled	[CE]  ')'  expected	29	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.get(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluations.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluations.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluations.get(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
218	[BUG]  [BUGGY]  evaluates.remove(this.exp);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  evaluates.remove(this.exp);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	evaluates.remove(this.exp);	  evaluates.remove(name);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
219	[BUG]  [BUGGY]  Integer  i  =  evaluates.get(this.statesInitialized);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluates.get(this.statesInitialized);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluates.get(this.statesInitialized);	  Integer    i    =    evaluates.get(name);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
220	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
221	[BUG]  [BUGGY]  Integer[]  evaluations  =  getEvaluations().values();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer[]  evaluations  =  getEvaluations().values();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer[]  evaluations  =  getEvaluations().values();	  Integer[]    evaluations    =    getEvaluations();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
222	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(1);  if(state.isLastStep)  {  return;  }	  Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
223	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(1);	  Incrementor    state    =(Integer)evaluations.get(0);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
224	[BUG]  [BUGGY]  int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.removeCount(evaluations.get(i));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.removeCount(evaluations.get(i));    }    	non-compiled	[CE]  >  expected	96	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(i  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(i  +  1);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
226	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(i);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)values.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
227	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(0);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(0);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)values.get(0);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)values.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
229	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.get(i).reset();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.get(i).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  assessments.size();  ++i)  {  evaluates.get(i).reset();  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.get(i).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
231	[BUG]  [BUGGY]  Integer  evaluator  =  getEvaluationsStatesInitialized();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getEvaluationsStatesInitialized();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getEvaluationsStatesInitialized();	  Integer    evaluator    =    getEvaluationsInitialized();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
232	[BUG]  [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized().resetCount();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  evaluator  =  getEvaluationsInitialized().resetCount();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  evaluator  =  getEvaluationsInitialized().resetCount();	  Integer    evaluator    =    getEvaluationsInitialized();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
233	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.remove(1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.remove(1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  evaluates.remove(1);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
234	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
235	[BUG]  [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
236	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
237	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(1);  if(state.isLastStep)  {  return	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.add(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.add(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(i);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  stepStart  =  evaluates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  stepStart  =  evaluates.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  stepStart  =  evaluates.get(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  i++)  {  evaluates.remove(0);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  1;  i  <  evaluations.size();  i++)  {  evaluates.remove(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  1;  i  <  evaluations.size();  i++)  {  evaluates.remove(0);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
241	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(1);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  evaluates.remove(1);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    i++)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
242	[BUG]  [BUGGY]  this.eventsStates.remove(expr);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.eventsStates.remove(expr);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.eventsStates.remove(expr);	  this.eventsStates.remove(evaluator);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluations.get(i);  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluations.get(i);  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluates.size();  i++)  {  int  stepStart  =  evaluations.get(i);  return;  }	  for(int    i    =    0;    i    <    evaluates.size();    i++)    {    int    stepStart    =    evaluates.get(i);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
244	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.remove(1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.remove(1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluates.size();  i++)  {  evaluates.remove(1);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    i++)    {    evaluates.remove(0);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(evaluations.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(evaluations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(evaluations.get(i));  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.removeCount(evaluations.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(0);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  int  stepStart  =  evaluates.get(0);  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
247	[BUG]  [BUGGY]  Integrator  state  =(Integrator)evaluations.get(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integrator  state  =(Integrator)evaluations.get(i);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integrator  state  =(Integrator)evaluations.get(i);	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    assessments.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
248	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(1).reset();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(1).reset();  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.get(1).reset();  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.get(0).reset();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
249	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  i++)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(!state.isLastStep)  {  return;  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    i++)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(!state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
250	[BUG]  [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(statesInitialized);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  evaluator  =  getEvaluationsInstance(statesInitialized);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  evaluator  =  getEvaluationsInstance(statesInitialized);	  Incrementor    evaluator    =    getEvaluationsInstance(null);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
251	[BUG]  [BUGGY]  Integer[]  evaluations  =  getEvaluations().toArray(new  Integer[resetOccurred]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer[]  evaluations  =  getEvaluations().toArray(new  Integer[resetOccurred]);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer[]  evaluations  =  getEvaluations().toArray(new  Integer[resetOccurred]);	  Integer[]    evaluations    =    getEvaluations();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
252	[BUG]  [BUGGY]  if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  ';'  expected	87	None	replace
253	[BUG]  [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandable  ==  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  ';'  expected	87	None	replace
254	[BUG]  [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(expandeable!=  null)  {  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(0);  if(state.isLastStep)  {	  if(expandeable!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
255	[BUG]  [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {	  if(expandeable    ==    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
256	[BUG]  [BUGGY]  Integer  i  =  evaluates.get(resetOccurred);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Integer  i  =  evaluates.get(resetOccurred);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Integer  i  =  evaluates.get(resetOccurred);	  Integer    i    =    evaluates.get(name);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
257	[BUG]  [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(evaluations!=  null)  {  for(int  i  =  0;  i  <  assessments.size();  ++i)  {  Incrementor  state  =(Integrator)evaluations.get(i);  if(state.isLastStep)  {  }	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    Incrementor    state    =(Integrator)evaluations.get(i);    if(state.isLastStep)    {    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
258	[BUG]  [BUGGY]  this.evalsStates.remove(evaluators.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  this.evalsStates.remove(evaluators.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	this.evalsStates.remove(evaluators.size());	  this.eventsStates.remove(evaluators.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.get(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.get(i  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  i++)  {  evaluates.get(i  +  1);  }	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    evaluates.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluations.remove(0);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluations.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
261	[BUG]  [BUGGY]  int  stepSize  =  evaluations.get(stepStart);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepSize  =  evaluations.get(stepStart);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepSize  =  evaluations.get(stepStart);	  int    stepSize    =    evaluates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(evaluations.get(i);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(evaluations.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	for(int  i  =  0;  i  <  evaluations.size();  ++i)  {  evaluates.add(evaluations.get(i);  }	  for(int    i    =    0;    i    <    evaluations.size();    ++i)    {    evaluates.addCount(evaluations.get(0));    }    	non-compiled	[CE]  ')'  expected	32	None	replace
263	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep  ||  state.isInitialized)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep  ||  state.isInitialized)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep  ||  state.isInitialized)  {  return;  }	  Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
264	[BUG]  [BUGGY]  int  stepStart  =  evaluations.get(0);  return;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  int  stepStart  =  evaluations.get(0);  return;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	int  stepStart  =  evaluations.get(0);  return;	  for(int    i    =    0;    i    <    evaluations.size();    i++)    {    int    stepStart    =    evaluates.get(0);    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
265	[BUG]  [BUGGY]  if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	if(state.isLastStep)  {  for(int  i  =  0;  i  <  evaluates.size();  ++i)  {  Incrementor  state  =(Integer)evaluations.get(i);  if(state.isLastStep)  {  continue	  if(evaluations!=    null)    {    for(int    i    =    0;    i    <    evaluates.size();    ++i)    {    Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    continue    	non-compiled	[CE]  ';'  expected	88	None	replace
266	[BUG]  [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep  ||  state.isInitialized)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep  ||  state.isInitialized)  {  continue;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)evaluations.get(0);  if(state.isLastStep  ||  state.isInitialized)  {  continue;  }	  Incrementor    state    =(Integer)evaluations.get(0);    if(state.isLastStep)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
267	[BUG]  [BUGGY]  Incrementor  state  =(Integer)this.evaluations.get(i);  if(state.isLastStep)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  resetEvaluations()  {  evaluations.resetCount();      [BUGGY]  Incrementor  state  =(Integer)this.evaluations.get(i);  if(state.isLastStep)  {  return;  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  resetEvaluations  [RETURN_TYPE]  void  [VARIABLES]  ExpandableStatefulODE  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	186	186	1	replace	Incrementor  state  =(Integer)this.evaluations.get(i);  if(state.isLastStep)  {  return;  }	  Incrementor    state    =(Integer)evaluations.get(i);    if(state.isLastStep)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
