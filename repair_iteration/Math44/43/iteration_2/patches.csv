bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(final  EventState  state  =  this.eventsStates)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  =  this.eventsStates)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  =  this.eventsStates)  {	  for(final    EventState    state    :    this.eventsStates)    {    for(final    EventState    state    =    this.eventsStates)    {    	non-compiled	[CE]  ';'  expected	95	None	replace
2	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates.iterator())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]          AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates.iterator())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates.iterator())  {	  for(final    EventState    state    :    this.eventsStates.size())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	22	None	replace
3	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates.entrySet())  {  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates.entrySet())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates.entrySet())  {	  for(final    EventState    state    :    this.eventsStates.size())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
4	[BUG]  [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  occuringSign  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(events!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  occuringSign	9	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	112	None	replace
6	[BUG]  [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventSigns  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventSigns)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventSigns	112	None	replace
7	[BUG]  [BUGGY]  For(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	111	None	replace
9	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	111	None	replace
10	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isFirstStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	35	None	replace
11	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isFirstStepInterpolator(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isFirstStepInterpolator(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates)  {  if(!isFirstStepInterpolator(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isFirstStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
12	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	64	None	replace
13	[BUG]  [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  event  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
14	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	79	None	replace
15	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(events))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(events))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(events))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	59	None	replace
16	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  existingSign  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  existingSign	59	None	replace
17	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	83	None	replace
18	[BUG]  [BUGGY]  For(final  EventState  state  :  this.eventsStates)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  state  :  this.eventsStates)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  state  :  this.eventsStates)  {	  for(final    EventState    state    :    this.eventsStates)    {    For(final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
19	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStepInterpolator)    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	99	None	replace
20	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStepInterpolator)    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
21	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  isLastStepInterpolator  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStepInterpolator)    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  isLastStepInterpolator	99	None	replace
22	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!ignoredEvents.contains(eventSign))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!ignoredEvents.contains(eventSign))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(!ignoredEvents.contains(eventSign))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStepInterpolator)    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
23	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	41	None	replace
24	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	92	None	replace
25	[BUG]  [BUGGY]  For(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
26	[BUG]  [BUGGY]  for(final  EventState  state  :  instancesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  instancesInitialized  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  instancesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  instancesInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  instancesInitialized	92	None	replace
27	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateInitialized(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	14	None	replace
28	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(interpolator.evaluateInitialized(events))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(interpolator.evaluateInitialized(events))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(interpolator.evaluateInitialized(events))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateInitialized(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	14	None	replace
29	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(events.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(events.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(events.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateInitialized(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	14	None	replace
30	[BUG]  [BUGGY]  state  =(State)iterator.next();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  state  =(State)iterator.next();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	state  =(State)iterator.next();	  State    state    =(State)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
31	[BUG]  [BUGGY]  State  state  =(State)events.next();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(State)events.next();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(State)events.next();	  State    state    =(State)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
32	[BUG]  [BUGGY]  final  EventState  state  :  this.eventsStates)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  state  :  this.eventsStates)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  state  :  this.eventsStates)  {	  for(final    EventState    state    :    this.eventsStates)    {    final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
33	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events.size())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events.size())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events.size())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  if(events!=    null)    {    for(final    EventState    state    :    events)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
34	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  occuringEvents)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  occuringEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    occuringEvents)    {    for(final  EventState  state  :  occuringEvents)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
35	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  For(final  EventState  state  :  occuringEvents)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  For(final  EventState  state  :  occuringEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    occuringEvents)    {    For(final  EventState  state  :  occuringEvents)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
36	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  occurredEvents)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  occurredEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    occuringEvents)    {    for(final  EventState  state  :  occurredEvents)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
37	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  interpolator)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  interpolator)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    occuringEvents)    {    for(final  EventState  state  :  interpolator)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
38	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  eventSign)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  eventSign)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    occuringEvents)    {    for(final  EventState  state  :  eventSign)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
39	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
40	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  <identifier>  expected	40	None	add
41	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
42	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  event  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  event  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  event  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
43	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  	non-compiled	[CE]  <identifier>  expected	40	None	add
44	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
45	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	84	None	replace
46	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	84	None	replace
47	[BUG]  [BUGGY]  For(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
48	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.iterator())  {  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events.iterator())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events.iterator())  {	  for(final    EventState    state    :    this.events.size())    {    	non-compiled	[CE]  cannot  find  symbol  events	45	None	replace
49	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
50	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	93	None	replace
51	[BUG]  [BUGGY]  for(final  EventState  eventState  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    events)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	37	None	replace
52	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    events)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	37	None	replace
53	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	15	None	replace
54	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)state.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)state.clone();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)state.clone();	  State    state    =(SortedSet    <    EventState>)es0.clone();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
55	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)existingEvents.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)existingEvents.clone();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)existingEvents.clone();	  State    state    =(SortedSet    <    EventState>)es0.clone();    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
56	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  if(events!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
57	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	  for(final    EventState    event    :    events)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
58	[BUG]  [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	  for(final    EventState    event    :    events)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  for(final    EventState    state    :    this.eventsStates)    {    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
60	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  type  EventState  does  not  take  parameters  [FE]          AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates)  {  final  EventState  <  EventState>  iterator  =  this.eventsStates.iterator();	  for(final    EventState    state    :    this.eventsStates)    {    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	78	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	add	for(final  EventState  state  :  this.eventsStates)  {  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  for(final    EventState    state    :    this.eventsStates)    {    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	compilable	  [FE]  AssertionError  	78	1	replace
62	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates)  {  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  for(final    EventState    state    :    this.eventsStates)    {    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	compilable	  [FE]  AssertionError  	78	1	replace
63	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  }  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates)  {  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  }	  for(final    EventState    state    :    this.eventsStates)    {    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
64	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	12	None	replace
65	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents.size())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents.size())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  occuringEvents.size())  {	  for(final    EventState    state    :    occuringEvents)    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	62	None	replace
66	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  [CE]  cannot  find  symbol  events  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  events)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events)  {	  for(final    EventState    state    :    occuringEvents)    {    	non-compiled	[CE]  cannot  find  symbol  events	62	None	replace
67	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)occurrences.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)occurrences.clone();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)occurrences.clone();	  State    state    =(SortedSet    <    EventState>)events.clone();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
68	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)super.clone();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)super.clone();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)super.clone();	  State    state    =(SortedSet    <    EventState>)events.clone();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
69	[BUG]  [BUGGY]  for(final  EventState  :  this.eventsStates)  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  :  this.eventsStates)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  :  this.eventsStates)  {	  for(final    EventState    state    :    this.eventsStates)    {    for(final    EventState    :    this.eventsStates)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
70	[BUG]  [BUGGY]  for(final  EventState  es0  :  this.eventsStates)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  es0  :  this.eventsStates)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  es0  :  this.eventsStates)  {	  for(final    EventState    state    :    this.eventsStates)    {    for(final    EventState    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol  state	27	None	replace
71	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
72	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
73	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	106	None	replace
74	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
75	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	107	None	replace
76	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    event    :    events.events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	105	None	replace
77	[BUG]  [BUGGY]  for(final  EventState  event  :  interpolator.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  interpolator.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  interpolator.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events.events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	105	None	replace
78	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	53	None	replace
79	[BUG]  [BUGGY]  for(final  EventState  event  :  existingEvents)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  existingEvents  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  existingEvents)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  existingEvents)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  existingEvents	53	None	replace
80	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
81	[BUG]  [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
82	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates,  orderingSign,  interpolator)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates,  orderingSign,  interpolator)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates,  orderingSign,  interpolator)  {	  for(final    EventState    state    :    this.eventsStates,    orderingSign)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
83	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized,  orderingSign)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized,  orderingSign)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized,  orderingSign)  {	  for(final    EventState    state    :    this.eventsStates,    orderingSign)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
84	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	90	None	replace
85	[BUG]  [BUGGY]  for(final  EventState  event  :  events.size())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.size())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.size())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	90	None	replace
86	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.size())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	90	None	replace
87	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events.values())    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
88	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    event    :    events.values())    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
89	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events.values())    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	104	None	replace
90	[BUG]  [BUGGY]  for(final  EventState  state  :  this.occuringEvents)  {  [CE]  cannot  find  symbol  occuringEvents  [FE]        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.occuringEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.occuringEvents)  {	  for(final    EventState    state    :    this.eventsStates)    {    for(final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol  occuringEvents	25	None	replace
91	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	  for(final    EventState    event    :    events.values())    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
92	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	  for(final    EventState    event    :    events.values())    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	96	None	replace
93	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  if(events!=    null)    {    for(final    EventState    state    :    events)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
94	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)events.get(orderingSign);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)events.get(orderingSign);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)events.get(orderingSign);	  State    state    =(SortedSet    <    EventState>)events.get(0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
95	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)events.get(1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)events.get(1);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)events.get(1);	  State    state    =(SortedSet    <    EventState>)events.get(0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
96	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)occurrences.get(0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)occurrences.get(0);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)occurrences.get(0);	  State    state    =(SortedSet    <    EventState>)events.get(0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
97	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator)&&    occuringEvents.contains(event);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
98	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator)&&  occursEvents.contains(event);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator)&&  occursEvents.contains(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator)&&  occursEvents.contains(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator)&&    occuringEvents.contains(event);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
99	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator)&&  occuringEvents.contains(event);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator)&&  occuringEvents.contains(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator)&&  occuringEvents.contains(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator)&&    occuringEvents.contains(event);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
100	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)events.next();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)events.next();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)events.next();	  State    state    =(SortedSet    <    EventState>)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
101	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.getValue();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)iterator.getValue();	  State    state    =(SortedSet    <    EventState>)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
102	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.values())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	66	None	replace
103	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	66	None	replace
104	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	77	None	replace
105	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	77	None	replace
106	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events.values())  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events.values())  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events.values())  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  if(events!=    null)    {    for(final    EventState    eventState    :    events)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
107	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    this.events)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	89	None	replace
108	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    event    :    events.size())    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	32	None	replace
109	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                          AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events.size())    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	32	None	replace
110	[BUG]  [BUGGY]  for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    event    :    events.size())    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	32	None	replace
111	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events.size())    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	32	None	replace
112	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized.size())  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized.size())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsInitialized.size())  {	  for(final    EventState    state    :    eventsInitialized.size())    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	2	None	replace
113	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvent.eventsInitialized.size())  {  [CE]  package  currentEvent  does  not  exist  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvent.eventsInitialized.size())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvent.eventsInitialized.size())  {	  for(final    EventState    state    :    eventsInitialized.size())    {    	non-compiled	[CE]  package  currentEvent  does  not  exist	2	None	replace
114	[BUG]  [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsInitialized)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	54	None	replace
115	[BUG]  [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsInitialized)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
116	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)es2.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)es2.clone();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)es2.clone();	  State    state    =(SortedSet    <    EventState>)es1.clone();    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
117	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	91	None	replace
118	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	91	None	replace
119	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	16	None	replace
120	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	16	None	replace
121	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateOccurred(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
122	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	56	None	replace
123	[BUG]  [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    eventsInitialized)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	30	None	replace
124	[BUG]  [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    eventsInitialized)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
125	[BUG]  [BUGGY]  final  EventState  event  =  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  =  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  =  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
126	[BUG]  [BUGGY]  final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
127	[BUG]  [BUGGY]  final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
128	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  for-each  not  applicable  to  expression  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	55	None	replace
129	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	55	None	replace
130	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
131	[BUG]  [BUGGY]  for(final  EventState  eventState  :  this.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  this.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  this.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    events)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	5	None	replace
132	[BUG]  [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.eventsInitialized)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsInitialized)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	65	None	replace
133	[BUG]  [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  event  :  eventsStates)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsInitialized)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
134	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
135	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	100	None	replace
136	[BUG]  [BUGGY]  For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
137	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	74	None	replace
138	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.events)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	88	None	replace
139	[BUG]  [BUGGY]  for(final  EventState  event  :  interpolator.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  interpolator.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  interpolator.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.events)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	88	None	replace
140	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates.iterator())  {  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventStates.iterator())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventStates.iterator())  {	  for(final    EventState    state    :    this.eventStates.size())    {    	non-compiled	[CE]  cannot  find  symbol  eventStates	98	None	replace
141	[BUG]  [BUGGY]  final  EventState  event  =  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  =  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  =  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
142	[BUG]  [BUGGY]  for(final  EventState  eventT  :  eventsStates)  {  if(interpolator.evaluateStep(eventT))  {  occuringEvents.add(eventT);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventT  :  eventsStates)  {  if(interpolator.evaluateStep(eventT))  {  occuringEvents.add(eventT);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventT  :  eventsStates)  {  if(interpolator.evaluateStep(eventT))  {  occuringEvents.add(eventT);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
143	[BUG]  [BUGGY]  final  EventState  state  =  this.eventsStates)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  state  =  this.eventsStates)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  state  =  this.eventsStates)  {	  for(final    EventState    state    :    this.eventsStates)    {    final    EventState    state    =    this.eventsStates)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
144	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.events)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	108	None	replace
145	[BUG]  [BUGGY]  for(final  EventState  event  :  interpolator.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  interpolator.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  interpolator.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.events)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	108	None	replace
146	[BUG]  [BUGGY]  state.evaluateStep(orderingSign);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  state.evaluateStep(orderingSign);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	state.evaluateStep(orderingSign);	  state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
147	[BUG]  [BUGGY]  state.evaluateStep(orderingSign,  interpolator);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  state.evaluateStep(orderingSign,  interpolator);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	state.evaluateStep(orderingSign,  interpolator);	  state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
148	[BUG]  [BUGGY]  state.evaluateStep(ordinal);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  state.evaluateStep(ordinal);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	state.evaluateStep(ordinal);	  state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
149	[BUG]  [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	  for(final    EventState    event    :    eventsInitialized)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	72	None	replace
150	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents.events)  {  [CE]  cannot  find  symbol  currentEvents  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvents.events)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvents.events)  {	  for(final    EventState    state    :    events.events)    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	44	None	replace
151	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized.events)  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized.events)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized.events)  {	  for(final    EventState    state    :    events.events)    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	44	None	replace
152	[BUG]  [BUGGY]  for(final  EventState  state  :  eventS.events)  {  [CE]  cannot  find  symbol  eventS  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventS.events)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventS.events)  {	  for(final    EventState    state    :    events.events)    {    	non-compiled	[CE]  cannot  find  symbol  eventS	44	None	replace
153	[BUG]  [BUGGY]  final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
154	[BUG]  [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  For(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	For(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
155	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvent.eventsInitialized)  {  [CE]  cannot  find  symbol  currentEvent  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvent.eventsInitialized)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvent.eventsInitialized)  {	  for(final    EventState    state    :    this.eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  currentEvent	23	None	replace
156	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents.eventsInitialized)  {  [CE]  cannot  find  symbol  currentEvents  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvents.eventsInitialized)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvents.eventsInitialized)  {	  for(final    EventState    state    :    this.eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	23	None	replace
157	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateOccurred(events))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	13	None	replace
158	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	13	None	replace
159	[BUG]  [BUGGY]  for(final  EventState  state  :  event.values())  {  [CE]  cannot  find  symbol  event  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  event.values())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  event.values())  {	  for(final    EventState    state    :    currentEvent.values())    {    	non-compiled	[CE]  cannot  find  symbol  event	43	None	replace
160	[BUG]  [BUGGY]  for(final  EventState  orderSign  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  orderSign  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  orderSign  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }	  if(orderingSign    >    0)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
161	[BUG]  [BUGGY]  for(final  EventState  orderSign  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  orderSign  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  orderSign  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }	  if(orderingSign    >    0)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
162	[BUG]  [BUGGY]  for(final  EventState  orderSign  :  events)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  orderSign  :  events)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  orderSign  :  events)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }	  if(orderingSign    >    0)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	80	None	replace
163	[BUG]  [BUGGY]  for(final  EventState  orderSign  :  events)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  orderSign  :  events)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  orderSign  :  events)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }	  if(orderingSign    >    0)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
164	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
165	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
166	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	70	None	replace
167	[BUG]  [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsInitialized)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	71	None	replace
168	[BUG]  [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsInitialized)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	73	None	replace
169	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized.values())  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized.values())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsInitialized.values())  {	  for(final    EventState    state    :    eventsInitialized.values())    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	20	None	replace
170	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }	  if(events!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
171	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
172	[BUG]  [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  occuringSign  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  occuringSign	74	None	replace
173	[BUG]  [BUGGY]  for(final  EventState  state  :  thisEvents.values())  {  [CE]  cannot  find  symbol  thisEvents  [FE]        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  thisEvents.values())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  thisEvents.values())  {	  for(final    EventState    state    :    this.eventsStates.values())    {    	non-compiled	[CE]  cannot  find  symbol  thisEvents	21	None	replace
174	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.get();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.get();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)iterator.get();	  State    state    =(SortedSet    <    EventState>)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
175	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
176	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvent.events.values())  {  [CE]  package  currentEvent  does  not  exist  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvent.events.values())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvent.events.values())  {	  for(final    EventState    state    :    this.eventStates.values())    {    	non-compiled	[CE]  package  currentEvent  does  not  exist	102	None	replace
177	[BUG]  [BUGGY]  for(final  EventState  state  :  existingEvents.values())  {  [CE]  cannot  find  symbol  existingEvents  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  existingEvents.values())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  existingEvents.values())  {	  for(final    EventState    state    :    currentEvents.values())    {    	non-compiled	[CE]  cannot  find  symbol  existingEvents	18	None	replace
178	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
179	[BUG]  [BUGGY]  for(final  EventState  state  :  events.size())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  events.size())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events.size())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	69	None	replace
180	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)enterator.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)enterator.clone();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)enterator.clone();	  State    state    =(SortedSet    <    EventState>)iterator.clone();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
181	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  final  EventState  state  :  occuringEvents)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  final  EventState  state  :  occuringEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    occuringEvents)    {    final  EventState  state  :  occuringEvents)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
182	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
183	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  ';'  expected	40	None	add
184	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  	non-compiled	[CE]  <identifier>  expected	40	None	add
185	[BUG]  [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  occuringSign  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }	  if(events!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  occuringSign	39	None	replace
186	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsInitialized)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isFirstStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	35	None	replace
187	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isFirstStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	35	None	replace
188	[BUG]  [BUGGY]  final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
189	[BUG]  [BUGGY]  final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
190	[BUG]  [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  occuringSign  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  occuringSign	106	None	replace
191	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	106	None	replace
192	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	91	None	replace
193	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized,  this.eventsStates,  orderingSign)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsInitialized,  this.eventsStates,  orderingSign)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized,  this.eventsStates,  orderingSign)  {	  for(final    EventState    state    :    this.eventsStates,    orderingSign)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
194	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates,  interpolator)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates,  interpolator)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates,  interpolator)  {	  for(final    EventState    state    :    this.eventsStates,    orderingSign)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
195	[BUG]  [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  occuringSign  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(occuringSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStepInterpolator)    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  occuringSign	99	None	replace
196	[BUG]  [BUGGY]  for(final  EventState  state  :  existingEvents.size())  {  [CE]  cannot  find  symbol  existingEvents  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  existingEvents.size())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  existingEvents.size())  {	  for(final    EventState    state    :    currentEvents.size())    {    	non-compiled	[CE]  cannot  find  symbol  existingEvents	3	None	replace
197	[BUG]  [BUGGY]  final  EventState  event  :  eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
198	[BUG]  [BUGGY]  final  EventState  event  :  events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
199	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator)&&    occuringEvents.contains(event);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
200	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator)&&    occuringEvents.contains(event);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
201	[BUG]  [BUGGY]  state.evaluateStep(ignoreSign);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  state.evaluateStep(ignoreSign);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	state.evaluateStep(ignoreSign);	  state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
202	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  orderingSign);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  state.evaluateStep(interpolator,  orderingSign);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	state.evaluateStep(interpolator,  orderingSign);	  state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
203	[BUG]  [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  cannot  find  symbol  occuringSign  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(occuringSign!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  occuringSign	79	None	replace
204	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	16	None	replace
205	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	36	None	replace
206	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	36	None	replace
207	[BUG]  [BUGGY]  final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
208	[BUG]  [BUGGY]  final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
209	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  state  =  this.eventsStates.iterator();  [CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  state  =  this.eventsStates.iterator();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates)  {  final  EventState  state  =  this.eventsStates.iterator();	  for(final    EventState    state    :    this.eventsStates)    {    final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	28	None	replace
210	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  package  events  does  not  exist  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  package  events  does  not  exist	77	None	replace
211	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)allEvents.get(0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)allEvents.get(0);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)allEvents.get(0);	  State    state    =(SortedSet    <    EventState>)events.get(0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
212	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  iterator  =  this.eventsStates.iterator();  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  iterator  =  this.eventsStates.iterator();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates)  {  final  EventState  iterator  =  this.eventsStates.iterator();	  for(final    EventState    state    :    this.eventsStates)    {    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  incompatible  types	78	None	replace
213	[BUG]  [BUGGY]  State  state  =(State)iterator.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(State)iterator.clone();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(State)iterator.clone();	  State    state    =(State)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
214	[BUG]  [BUGGY]  State  state  =(State)iterator.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(State)iterator.getNext();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(State)iterator.getNext();	  State    state    =(State)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
215	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsInitialized)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsInitialized)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsInitialized)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	4	None	replace
216	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventStandard))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	4	None	replace
217	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	4	None	replace
218	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  this.events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	90	None	replace
219	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  package  events  does  not  exist  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  package  events  does  not  exist	90	None	replace
220	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }  [CE]  cannot  find  symbol  eventS  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventsStates!=  null)  {  for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }	  if(orderingSign!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  eventS	81	None	replace
221	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(events))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(events))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(events))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	56	None	replace
222	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  existingSign  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(existingSign))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  existingSign	56	None	replace
223	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(events!=    null)    {    for(final    EventState    state    :    events)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	47	None	replace
224	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  if(events!=    null)    {    for(final    EventState    state    :    events)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
225	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events.values())  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events.values())  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  events.values())  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(events!=    null)    {    for(final    EventState    eventState    :    events)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
226	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	31	None	replace
227	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(eventSign);  }	  if(events!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
228	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	  if(events!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
229	[BUG]  [BUGGY]  if(orderingSign  >  0)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(orderingSign  >  0)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(orderingSign  >  0)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	  if(orderingSign    >    0)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	80	None	replace
230	[BUG]  [BUGGY]  if(orderingSign  >  0)  {  for(final  EventState  orderState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(orderingSign  >  0)  {  for(final  EventState  orderState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(orderingSign  >  0)  {  for(final  EventState  orderState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }	  if(orderingSign    >    0)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	80	None	replace
231	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(events!=    null)    {    for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	48	None	replace
232	[BUG]  [BUGGY]  for(final  EventState  state  :  stateInitialized)  {  [CE]  cannot  find  symbol  stateInitialized  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  stateInitialized)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  stateInitialized)  {	  for(final    EventState    state    :    currentEventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	60	None	replace
233	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized,  orderingSign)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized,  orderingSign)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsInitialized,  orderingSign)  {	  for(final    EventState    state    :    this.eventsInitialized)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
234	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	add	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	compilable	  [FE]  AssertionError  	68	1	replace
235	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	compilable	  [FE]  AssertionError  	68	1	replace
236	[BUG]  [BUGGY]  for(final  EventState  event  :  state.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  state.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  state.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.events)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  state	101	None	replace
237	[BUG]  [BUGGY]  final  EventState  event  :  eventsAll)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  eventsAll)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsAll)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	82	None	replace
238	[BUG]  [BUGGY]  for(final  EventState  state  :  eventState.events)  {  [CE]  cannot  find  symbol  eventState  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventState.events)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventState.events)  {	  for(final    EventState    state    :    events.events)    {    	non-compiled	[CE]  cannot  find  symbol  eventState	44	None	replace
239	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  if(events!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
240	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  eventState  :  events.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events.events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    events)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	5	None	replace
241	[BUG]  [BUGGY]  final  EventState  event  :  eventsStates)  {  if(isLastStepInterpolator)  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  eventsStates)  {  if(isLastStepInterpolator)  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsStates)  {  if(isLastStepInterpolator)  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	63	None	replace
242	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(events!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	9	None	replace
243	[BUG]  [BUGGY]  for(final  EventState  state  :  events.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  events.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	92	None	replace
244	[BUG]  [BUGGY]  State  state  =(State)iterator.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(State)iterator.getValue();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(State)iterator.getValue();	  State    state    =(State)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
245	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  occurringEvents)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  occurringEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    occuringEvents)    {    for(final  EventState  state  :  occurringEvents)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
246	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  eventSigns)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  for(final  EventState  state  :  eventSigns)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    occuringEvents)    {    for(final  EventState  state  :  eventSigns)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
247	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.reset();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.reset();  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)iterator.reset();	  State    state    =(SortedSet    <    EventState>)iterator.clone();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
248	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsAll)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsAll)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsAll)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator)&&    occuringEvents.contains(event);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
249	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events1)  {  [CE]  cannot  find  symbol  events1  [FE]        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events1)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events1)  {	  for(final    EventState    state    :    this.eventsEvents)    {    	non-compiled	[CE]  cannot  find  symbol  events1	87	None	replace
250	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsTrees)  {  [CE]  cannot  find  symbol  eventsTrees  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsTrees)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsTrees)  {	  for(final    EventState    state    :    this.eventsStates)    {    for(final    EventState    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol  eventsTrees	27	None	replace
251	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsSet)  {  [CE]  cannot  find  symbol  eventsSet  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsSet)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsSet)  {	  for(final    EventState    state    :    this.eventsStates)    {    for(final    EventState    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol  eventsSet	27	None	replace
252	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  currentEvents  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvents)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	12	None	replace
253	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
254	[BUG]  [BUGGY]  for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(orderingSign);  }  }	  if(orderingSign!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
255	[BUG]  [BUGGY]  for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  orderState  :  eventsStates)  {  if(interpolator.evaluateStep(orderingSign))  {  occuringEvents.add(orderingSign);  }  }	  if(orderingSign!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
256	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
257	[BUG]  [BUGGY]  final  EventState  event  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  final  EventState  event  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(event);  }	  final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
258	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
259	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    eventsStates)    {    if(!isFirstStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	35	None	replace
260	[BUG]  [BUGGY]  if(eventStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  eventStates  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(eventStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	70	None	replace
261	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	59	None	replace
262	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
263	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.events)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	88	None	replace
264	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	16	None	replace
265	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	77	None	replace
266	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }	  if(events!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	39	None	replace
267	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  currentEvents  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvents)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	15	None	replace
268	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
269	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
270	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
271	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  for(final  EventState  state  :  eventsStates)  {  if(.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    for(final  EventState  state  :  eventsStates)  {  if(.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
272	[BUG]  [BUGGY]  for(final  EventState  state  :  eventState.size())  {  [CE]  cannot  find  symbol  eventState  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventState.size())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventState.size())  {	  for(final    EventState    state    :    currentEvents.size())    {    	non-compiled	[CE]  cannot  find  symbol  eventState	3	None	replace
273	[BUG]  [BUGGY]  for(final  EventState  state  :  eventS.values())  {  [CE]  cannot  find  symbol  eventS  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventS.values())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventS.values())  {	  for(final    EventState    state    :    currentEvents.values())    {    	non-compiled	[CE]  cannot  find  symbol  eventS	18	None	replace
274	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(existingSign.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  existingSign  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(existingSign.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(existingSign.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  existingSign	13	None	replace
275	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates,  orderingEvents)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates,  orderingEvents)  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates,  orderingEvents)  {	  for(final    EventState    state    :    this.eventsStates,    orderingSign)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
276	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	  for(final    EventState    eventState    :    events)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
277	[BUG]  [BUGGY]  for(final  EventState  state  :  events.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  events.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	112	None	replace
278	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates.keySet())  {  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates.keySet())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates.keySet())  {	  for(final    EventState    state    :    this.eventsStates.size())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
279	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.size())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	90	None	replace
280	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  if(events!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
281	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.values())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
282	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  orderSign);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  state.evaluateStep(interpolator,  orderSign);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	state.evaluateStep(interpolator,  orderSign);	  state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
283	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  currentEvents  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  currentEvents)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvents)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	84	None	replace
284	[BUG]  [BUGGY]  for(final  EventState  event  :  currentEvents.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  currentEvents  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  currentEvents.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  currentEvents.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events.events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	105	None	replace
285	[BUG]  [BUGGY]  for(final  EventState  event  :  state.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  state  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  state.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  state.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events.events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  state	105	None	replace
286	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateInitialized(events))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateInitialized(events))  {  occuringEvents.add(state);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(interpolator.evaluateInitialized(events))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateInitialized(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	14	None	replace
287	[BUG]  [BUGGY]  for(final  EventState  event  :  state.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  state.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  state.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.events)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  state	94	None	replace
288	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.values())    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	66	None	replace
289	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)this.events.get(0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  State  state  =(SortedSet  <  EventState>)this.events.get(0);  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)this.events.get(0);	  State    state    =(SortedSet    <    EventState>)events.get(0);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
290	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!interpolator.evaluateStep(state))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!interpolator.evaluateStep(state))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events)  {  if(!interpolator.evaluateStep(state))  {  continue;  }	  for(final    EventState    event    :    this.events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	75	None	replace
291	[BUG]  [BUGGY]  for(final  EventState  event  :  currentEvents)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  currentEvents  [FE]                      AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  currentEvents)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  currentEvents)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	31	None	replace
292	[BUG]  [BUGGY]  for(final  EventState  event  :  currentEvents.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  currentEvents  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  currentEvents.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  currentEvents.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }	  for(final    EventState    event    :    events.values())    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  currentEvents	104	None	replace
293	[BUG]  [BUGGY]  for(final  EventState  event  :  state.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  state.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  state.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	  for(final    EventState    event    :    events.events)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  state	108	None	replace
294	[BUG]  [BUGGY]  for(final  EventState  state  :  state.values())  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  state.values())  {  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  state.values())  {	  for(final    EventState    state    :    currentEvent.values())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
295	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!isLastStepInterpolator)  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!isLastStepInterpolator)  {  occuringEvents.remove(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(!isLastStepInterpolator)  {  occuringEvents.remove(event);  }	  for(final    EventState    event    :    events.values())    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	96	None	replace
296	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  }  [BUGGY]      if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  }	  for(final    EventState    state    :    this.eventsStates)    {    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
297	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isLastStepInterpolator)  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });      [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isLastStepInterpolator)  {  occuringEvents.remove(event);  }  [BUGGY]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!isLastStepInterpolator)  {  occuringEvents.remove(event);  }	  for(final    EventState    event    :    events.events)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	97	None	replace
