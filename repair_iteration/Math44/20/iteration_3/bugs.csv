bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equivalences.size());  [CE]  cannot  find  symbol  equivalences  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equivalences.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equivalences.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equivalences.size());    	non-compiled	[CE]  cannot  find  symbol  equivalences	65	None	replace
2	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equivalences.size());  [CE]  cannot  find  symbol  equivalences  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equivalences.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equivalences.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equivalences.size());    	non-compiled	[CE]  cannot  find  symbol  equivalences	65	None	replace
3	[BUG]  [BUGGY]  this.expandable  =  EquationState.equals(equations);  [CE]  cannot  find  symbol  EquationState  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  EquationState.equals(equations);  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.equals(equations);	  this.expandable    =    EquationState.elements();    	non-compiled	[CE]  cannot  find  symbol  EquationState	29	None	replace
4	[BUG]  [BUGGY]  this.expandable  =  EquationState.escapes();  [CE]  cannot  find  symbol  EquationState  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  EquationState.escapes();  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.escapes();	  this.expandable    =    EquationState.elements();    	non-compiled	[CE]  cannot  find  symbol  EquationState	29	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable!=  this.expandable  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable!=  this.expandable	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	74	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable!=  this.expandable)  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable!=  this.expandable)  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable!=  this.expandable)	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(ex    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable  ==  this.expandable  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable  ==  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expandable  ==  this.expandable	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	74	None	replace
8	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if    	non-compiled	[CE]  '('  expected	79	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if    	non-compiled	[CE]  '('  expected	79	None	replace
10	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }  [CE]  '('  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if    	non-compiled	[CE]  '('  expected	79	None	replace
11	[BUG]  [BUGGY]  this.expandable  =  equations  >>  ExpandableStatefulODE;  [CE]  cannot  find  symbol  ExpandableStatefulODE  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  >>  ExpandableStatefulODE;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  >>  ExpandableStatefulODE;	  this.expandable    =    equations!=    ExpandableStatefulODE;    	non-compiled	[CE]  cannot  find  symbol  ExpandableStatefulODE	45	None	replace
12	[BUG]  [BUGGY]  this.expandable  =  equations  >=  ExpandableStatefulODE;  [CE]  cannot  find  symbol  ExpandableStatefulODE  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  >=  ExpandableStatefulODE;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  >=  ExpandableStatefulODE;	  this.expandable    =    equations!=    ExpandableStatefulODE;    	non-compiled	[CE]  cannot  find  symbol  ExpandableStatefulODE	45	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equations.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equations.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equations.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
16	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalences.getEquations());  [CE]  cannot  find  symbol  equivalences  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalences.getEquations());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalences.getEquations());	  this.expandable    =    equations.equals(equations.getEquations());    	non-compiled	[CE]  cannot  find  symbol  equivalences	77	None	replace
17	[BUG]  [BUGGY]  this.expandable  =  Equations.equals(equations.getEquations());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  Equations.equals(equations.getEquations());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.equals(equations.getEquations());	  this.expandable    =    equations.equals(equations.getEquations());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
18	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.getExpandableStatement());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.getExpandableStatement());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.getExpandableStatement());	  this.expandable    =    equations.equals(equations.getEquations());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    }    	non-compiled	[CE]  ')'  expected	33	None	replace
20	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    }    	non-compiled	[CE]  ')'  expected	33	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expandable  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expandable  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expandable  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    }    	non-compiled	[CE]  ')'  expected	33	None	replace
22	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( "Expandable  statement  must  be  set  in  the  range. ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( "Expandable  statement  must  be  set  in  the  range. ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( "Expandable  statement  must  be  set  in  the  range. ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    this.events.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	80	None	replace
27	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    this.events.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	80	None	replace
28	[BUG]  [BUGGY]  if(equations  ==  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations  ==  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations  ==  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    this.events.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	80	None	replace
29	[BUG]  [BUGGY]  for(final  IncrementError  e  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  e  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  e  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
30	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  elements.elements())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  elements.elements())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  elements.elements())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
31	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  this.equations.elements())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  this.equations.elements())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  this.equations.elements())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
32	[BUG]  [BUGGY]  this.expandable  =  equations.getExpandableStatement();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.getExpandableStatement();  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.getExpandableStatement();	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
33	[BUG]  [BUGGY]  this.expandable  =  equations.getExpandableStatements();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.getExpandableStatements();  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.getExpandableStatements();	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	85	None	replace
35	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	85	None	replace
36	[BUG]  [BUGGY]  if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	85	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  }	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	85	None	replace
38	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  For(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  '.class'  expected	27	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expanpan    	non-compiled	[CE]  ')'  expected	78	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  ==  this.expandable  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  ==  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  ==  this.expandable	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expanpan    	non-compiled	[CE]  ')'  expected	78	None	replace
44	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  ==  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  ==  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  ==	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expanpan    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
45	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  ==  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  ==	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	32	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable).  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable).  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable).	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan!=  this.expandable  ==  this.expandable  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan!=  this.expandable  ==  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan!=  this.expandable  ==  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	32	None	replace
51	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  fields.size());  [CE]  cannot  find  symbol  fields  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  fields.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  fields.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations,    columns.size());    	non-compiled	[CE]  cannot  find  symbol  fields	92	None	replace
52	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  statesInitialized.size());  [CE]  boolean  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  statesInitialized.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  statesInitialized.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations,    columns.size());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	92	None	replace
53	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  values.size());  [CE]  cannot  find  symbol  values  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  values.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  values.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations,    columns.size());    	non-compiled	[CE]  cannot  find  symbol  values	92	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalences.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalences.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
56	[BUG]  [BUGGY]  this.expandable  =  Equations.equals(equations.get(0));  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  Equations.equals(equations.get(0));  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.equals(equations.get(0));	  this.expandable    =    equations.equals(equations.get(0));    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
57	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalences.get(0));  [CE]  cannot  find  symbol  equivalences  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalences.get(0));  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalences.get(0));	  this.expandable    =    equations.equals(equations.get(0));    	non-compiled	[CE]  cannot  find  symbol  equivalences	89	None	replace
58	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalents.get(0));  [CE]  cannot  find  symbol  equivalents  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalents.get(0));  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalents.get(0));	  this.expandable    =    equations.equals(equations.get(0));    	non-compiled	[CE]  cannot  find  symbol  equivalents	89	None	replace
59	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalences.expandable);  [CE]  cannot  find  symbol  equivalences  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalences.expandable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalences.expandable);	  this.expandable    =    equations.equals(equations.expandable);    	non-compiled	[CE]  cannot  find  symbol  equivalences	9	None	replace
60	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalents.expandable);  [CE]  cannot  find  symbol  equivalents  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalents.expandable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalents.expandable);	  this.expandable    =    equations.equals(equations.expandable);    	non-compiled	[CE]  cannot  find  symbol  equivalents	9	None	replace
61	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
62	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  ExpandableStatefulODE.EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  ExpandableStatefulODE.EMPTY;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  ExpandableStatefulODE.EMPTY;	  this.expandable    =    equations    ==    null?    equations    :    ExpandableStatefulODE.EMPTY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	96	None	replace
63	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.size);  [CE]  cannot  find  symbol  size  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.size);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.size);	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  size	93	None	replace
64	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.size());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.size());	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    this.expandable    	non-compiled	[CE]  ')'  expected	41	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expanpan  ==  this.expandable  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expanpan  ==  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expanpan  ==  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    this.expandable    	non-compiled	[CE]  ')'  expected	41	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  this.expandable  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    this.expandable    	non-compiled	[CE]  ')'  expected	41	None	replace
68	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.elements();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.elements();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.elements();	  this.expandable    =    equations    ==    null?    null    :    equations.elements();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
69	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  IllegalStateException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
70	[BUG]  [BUGGY]  for(final  IncrementError  e  :  equations.values())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  e  :  equations.values())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  e  :  equations.values())  {  throw  new  IllegalStateException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
71	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.maxCheckInterval);  [CE]  cannot  find  symbol  maxCheckInterval  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.maxCheckInterval);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.maxCheckInterval);	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  cannot  find  symbol  maxCheckInterval	12	None	replace
72	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.values);  [CE]  cannot  find  symbol  values  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.values);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.values);	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  cannot  find  symbol  values	12	None	replace
73	[BUG]  [BUGGY]  For(final  IncrementError  exception  :  equations.elements())  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  For(final  IncrementError  exception  :  equations.elements())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(final  IncrementError  exception  :  equations.elements())  {  break;  }	  For(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  this.expandable  =  equations.expandable;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  this.expandable  =  equations.expandable;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(final  IncrementError  exception  :  equations.values())  {  this.expandable  =  equations.expandable;  }	  For(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  continue;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(final  IncrementError  exception  :  equations.values())  {  continue;  }	  For(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
76	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.elements())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  equations.elements())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.elements())  {  throw  new  UnsupportedOccurredException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
77	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
78	[BUG]  [BUGGY]  for(final  IncrementError  e  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  e  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  e  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
79	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalences);  [CE]  cannot  find  symbol  equivalences  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalences);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalences);	  this.expandable    =    equations.equals(elements);    	non-compiled	[CE]  cannot  find  symbol  equivalences	13	None	replace
80	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalances);  [CE]  cannot  find  symbol  equivalances  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalances);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalances);	  this.expandable    =    equations.equals(elements);    	non-compiled	[CE]  cannot  find  symbol  equivalances	13	None	replace
81	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equators.size());  [CE]  cannot  find  symbol  equators  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equators.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equators.size());	  this.expandable    =    equations.equals(equivalents.size());    	non-compiled	[CE]  cannot  find  symbol  equators	22	None	replace
82	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equances.size());  [CE]  cannot  find  symbol  equances  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equances.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equances.size());	  this.expandable    =    equations.equals(equivalents.size());    	non-compiled	[CE]  cannot  find  symbol  equances	22	None	replace
83	[BUG]  [BUGGY]  for(final  IncrementError  e  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  e  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  e  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
84	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  elements.elements())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  elements.elements())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  elements.elements())  {  throw  new  IllegalStateException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
85	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  this.equations.elements())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  this.equations.elements())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  this.equations.elements())  {  throw  new  IllegalStateException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
86	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.equivalence);  [CE]  cannot  find  symbol  equivalence  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.equivalence);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.equivalence);	  this.expandable    =    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  equivalence	97	None	replace
87	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.eql);  [CE]  cannot  find  symbol  eql  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.eql);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.eql);	  this.expandable    =    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  eql	97	None	replace
88	[BUG]  [BUGGY]  this.expandable  =  EquationState.values();  [CE]  cannot  find  symbol  EquationState  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  EquationState.values();  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.values();	  this.expandable    =    equations.values();    	non-compiled	[CE]  cannot  find  symbol  EquationState	38	None	replace
89	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.values());  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.values());  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.values());	  this.expandable    =    equations.values();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
90	[BUG]  [BUGGY]  this.expandable  =  equations!=  null;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null;	  this.expandable    =    equations    ==    null;    	non-compiled	[CE]  incompatible  types	46	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
92	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	68	None	replace
94	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	68	None	replace
95	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	68	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
97	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equvalents.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equvalents.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equvalents.get(i);  if(  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	18	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	18	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable).  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable).  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this.expandable).	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.expandable.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.expandable.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.expandable.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  [CE]  '('  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equixes.get(i);    if    }    	non-compiled	[CE]  '('  expected	58	None	replace
106	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  }  [CE]  '('  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equixes.get(i);    if    }    	non-compiled	[CE]  '('  expected	58	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if  }  [CE]  '('  expected  [FE]                            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equixes.get(i);    if    }    	non-compiled	[CE]  '('  expected	58	None	replace
108	[BUG]  [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  [CE]  '('  expected  [FE]                              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equixes.get(i);    if    }    	non-compiled	[CE]  '('  expected	58	None	replace
109	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	81	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	81	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	73	None	replace
112	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	73	None	replace
113	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [CE]  '('  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	73	None	replace
114	[BUG]  [BUGGY]  if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [CE]  '('  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  }	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	73	None	replace
115	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  this.equations.values())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
116	[BUG]  [BUGGY]  for(final  IncrementError  e  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  e  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  e  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
117	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	66	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalents.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalents.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalents.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
119	[BUG]  [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	82	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	82	None	replace
121	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  new  ExpandableStatefulODE(equations.size());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  new  ExpandableStatefulODE(equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  new  ExpandableStatefulODE(equations.size());	  this.expandable    =    equations    ==    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expandable!=  this.expandable  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expandable!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expandable!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    this.expandable    	non-compiled	[CE]  ')'  expected	24	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    this.expandable    	non-compiled	[CE]  ')'  expected	24	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
125	[BUG]  [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(    	non-compiled	[CE]  '('  expected	53	None	replace
126	[BUG]  [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
127	[BUG]  [BUGGY]  this.expandable  =  Equations.equals(equations.size()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  Equations.equals(equations.size()  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.equals(equations.size()  -  1);	  this.expandable    =    Equations.equals(equations.size());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
128	[BUG]  [BUGGY]  this.expandable  =  Equations.equals(equations,  equations.size());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  Equations.equals(equations,  equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.equals(equations,  equations.size());	  this.expandable    =    Equations.equals(equations.size());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
129	[BUG]  [BUGGY]  this.expandable  =  Equations.equals(equations.size(),  equations.size());  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  Equations.equals(equations.size(),  equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.equals(equations.size(),  equations.size());	  this.expandable    =    Equations.equals(equations.size());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.expandable.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.expandable.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.expandable.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	40	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expanpan!=  this.expandable  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expanpan!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expanpan!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	40	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expanpan!=  this.expandable  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expanpan!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expanpan!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	40	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	40	None	replace
136	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations.expandable  :  equations.expandable;  [CE]  cannot  find  symbol  expandable  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  equations.expandable  :  equations.expandable;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  equations.expandable  :  equations.expandable;	  this.expandable    =    equations!=    null?    equations.expandable    :    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  expandable	94	None	replace
137	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	87	None	replace
138	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ".equals(equations);  }  [CE]  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ".equals(equations);  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ".equals(equations);  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	87	None	replace
139	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.expandableStatements;  [CE]  cannot  find  symbol  expandableStatements  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.expandableStatements;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.expandableStatements;	  this.expandable    =    equations    ==    null?    null    :    equations.expandableStatements;    	non-compiled	[CE]  cannot  find  symbol  expandableStatements	34	None	replace
140	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.expandableStatement;  [CE]  cannot  find  symbol  expandableStatement  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.expandableStatement;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.expandableStatement;	  this.expandable    =    equations    ==    null?    null    :    equations.expandableStatements;    	non-compiled	[CE]  cannot  find  symbol  expandableStatement	34	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  '('  expected	88	None	replace
142	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  '('  expected	88	None	replace
143	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  '('  expected	88	None	replace
144	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.elements())  {  break;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  equations.elements())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.elements())  {  break;  }	  final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
145	[BUG]  [BUGGY]  final  IncrementError  exception  :  this.equations.values())  {  break;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  this.equations.values())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  this.equations.values())  {  break;  }	  final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
146	[BUG]  [BUGGY]  if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
147	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalances.size());  [CE]  cannot  find  symbol  equivalances  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalances.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalances.size());	  this.expandable    =    equations.equals(equivalences.size());    	non-compiled	[CE]  cannot  find  symbol  equivalances	20	None	replace
148	[BUG]  [BUGGY]  this.expandable  =  equations.equals(escapes.size());  [CE]  cannot  find  symbol  escapes  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(escapes.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(escapes.size());	  this.expandable    =    equations.equals(equivalences.size());    	non-compiled	[CE]  cannot  find  symbol  escapes	20	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	25	None	replace
150	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.equals(equations);	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations);    	non-compiled	[CE]  incompatible  types	54	None	replace
151	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences);  [CE]  cannot  find  symbol  equivalences  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences);	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations);    	non-compiled	[CE]  cannot  find  symbol  equivalences	54	None	replace
152	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations.expandable);  [CE]  cannot  find  symbol  expandable  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations.expandable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.equals(equations.expandable);	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.expandable);    	non-compiled	[CE]  cannot  find  symbol  expandable	83	None	replace
153	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences.expandable);  [CE]  cannot  find  symbol  equivalences  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences.expandable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences.expandable);	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.expandable);    	non-compiled	[CE]  cannot  find  symbol  equivalences	83	None	replace
154	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations.values());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations.values());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.equals(equations.values());	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.values());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
155	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences.values());  [CE]  cannot  find  symbol  equivalences  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences.values());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equivalences.values());	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.values());    	non-compiled	[CE]  cannot  find  symbol  equivalences	55	None	replace
156	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations.expandable  :  equations.equals(equations.elements);  [CE]  cannot  find  symbol  expandable  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  equations.expandable  :  equations.equals(equations.elements);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  equations.expandable  :  equations.equals(equations.elements);	  this.expandable    =    equations!=    null?    equations.expandable    :    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  expandable	95	None	replace
157	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equivalences.elements);  [CE]  cannot  find  symbol  expandable  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equivalences.elements);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equivalences.elements);	  this.expandable    =    equations!=    null?    equations.expandable    :    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  expandable	95	None	replace
158	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.elements())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  equations.elements())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.elements())  {  throw  new  UnsupportedOccurredException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  	84	None	replace
159	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  }  [CE]  '('  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  }	  if(equations    ==    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    }    	non-compiled	[CE]  '('  expected	59	None	replace
160	[BUG]  [BUGGY]  if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  }  [CE]  '('  expected  [FE]                            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  }	  if(equations    ==    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    }    	non-compiled	[CE]  '('  expected	59	None	replace
161	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  1);  [CE]  cannot  find  symbol  Equations  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  1);	  this.expandable    =    equations!=    null?    Equations.EMPTY    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol  Equations	64	None	replace
162	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size());  [CE]  cannot  find  symbol  Equations  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size());	  this.expandable    =    equations!=    null?    Equations.EMPTY    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol  Equations	64	None	replace
163	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  1);  [CE]  cannot  find  symbol  Equations  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  1);	  this.expandable    =    equations!=    null?    Equations.EMPTY    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol  Equations	64	None	replace
164	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.elements())  {  break;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  equations.elements())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.elements())  {  break;  }	  for(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
165	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  this.equations.values())  {  break;  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  this.equations.values())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  this.equations.values())  {  break;  }	  for(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
166	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.equals(equations))  {  break;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  equations.equals(equations))  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.equals(equations))  {  break;  }	  for(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
167	[BUG]  [BUGGY]  this.expandable  =  EquationState.EQUIPMENT;  [CE]  cannot  find  symbol  EquationState  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  EquationState.EQUIPMENT;  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.EQUIPMENT;	  this.expandable    =    EquationState.EQUIPMENT.elements();    	non-compiled	[CE]  cannot  find  symbol  EquationState	90	None	replace
168	[BUG]  [BUGGY]  this.expandable  =  EquationState.EQUIPMENT.equals(equations);  [CE]  package  EquationState  does  not  exist  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  EquationState.EQUIPMENT.equals(equations);  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.EQUIPMENT.equals(equations);	  this.expandable    =    EquationState.EQUIPMENT.elements();    	non-compiled	[CE]  package  EquationState  does  not  exist	90	None	replace
169	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if  }  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)escapes.get(i);  if  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	57	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if  [CE]  '('  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.expandables.get(i);  if	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	57	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if  [CE]  '('  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	57	None	replace
173	[BUG]  [BUGGY]  this.expandable  =  equations.elements  ==  expandable;  [CE]  cannot  find  symbol  elements  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.elements  ==  expandable;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.elements  ==  expandable;	  this.expandable    =    equations    ==    expandable;    	non-compiled	[CE]  cannot  find  symbol  elements	47	None	replace
174	[BUG]  [BUGGY]  this.expandable  =  equations!=  expandable;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  expandable;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  expandable;	  this.expandable    =    equations    ==    expandable;    	non-compiled	[CE]  incompatible  types	47	None	replace
175	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expand  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expand  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expand	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	19	None	replace
176	[BUG]  [BUGGY]  this.expandable  =  Equations.elements(equations,  isLastStep);  [CE]  cannot  find  symbol  Equations  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  Equations.elements(equations,  isLastStep);  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.elements(equations,  isLastStep);	  this.expandable    =    Equations.elements(equations);    	non-compiled	[CE]  cannot  find  symbol  Equations	86	None	replace
177	[BUG]  [BUGGY]  this.expandable  =  Equations.elements(equivalences);  [CE]  cannot  find  symbol  equivalences  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  Equations.elements(equivalences);  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.elements(equivalences);	  this.expandable    =    Equations.elements(equations);    	non-compiled	[CE]  cannot  find  symbol  equivalences	86	None	replace
178	[BUG]  [BUGGY]  this.expandable  =  Equations.elements(equations,  true);  [CE]  cannot  find  symbol  Equations  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  Equations.elements(equations,  true);  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.elements(equations,  true);	  this.expandable    =    Equations.elements(equations);    	non-compiled	[CE]  cannot  find  symbol  Equations	86	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	69	None	replace
180	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	57	None	replace
182	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equations;  [CE]  cannot  find  symbol  equations  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equations;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.equations;	  this.expandable    =    equations.equations;    	non-compiled	[CE]  cannot  find  symbol  equations	10	None	replace
183	[BUG]  [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expanpan    	non-compiled	[CE]  ')'  expected	78	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expanpan    	non-compiled	[CE]  ')'  expected	78	None	replace
185	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  children.elements())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  children.elements())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  children.elements())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
186	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
187	[BUG]  [BUGGY]  final  IncrementError  exception  :  elements.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  elements.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  elements.values())  {  throw  new  UnsupportedOccurredException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  	84	None	replace
188	[BUG]  [BUGGY]  this.expandable  =  equations.equals(this.expandable);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(this.expandable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(this.expandable);	  this.expandable    =    equations.equals(equations.expandable);    	non-compiled	[CE]  incompatible  types	9	None	replace
189	[BUG]  [BUGGY]  this.expandable  =  equations.equals(Equations.EQUENCES);  [CE]  cannot  find  symbol  Equations  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(Equations.EQUENCES);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(Equations.EQUENCES);	  this.expandable    =    equations.equals(equations.expandable);    	non-compiled	[CE]  cannot  find  symbol  Equations	9	None	replace
190	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations.size());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.equals(equations.size());	  this.expandable    =    equations    ==    null;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
191	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equations.size()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equations.size()  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equations.size()  -  1);	  this.expandable    =    equations!=    null?    null    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
192	[BUG]  [BUGGY]  this.expandable  =  EquationState.EQUIPMENT.elements(equations);  [CE]  package  EquationState  does  not  exist  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  EquationState.EQUIPMENT.elements(equations);  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.EQUIPMENT.elements(equations);	  this.expandable    =    EquationState.EQUIPMENT.elements();    	non-compiled	[CE]  package  EquationState  does  not  exist	90	None	replace
193	[BUG]  [BUGGY]  this.expandable  =  EquationState.EQUIPMENT.evaluate(equations);  [CE]  package  EquationState  does  not  exist  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  EquationState.EQUIPMENT.evaluate(equations);  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.EQUIPMENT.evaluate(equations);	  this.expandable    =    EquationState.EQUIPMENT.elements();    	non-compiled	[CE]  package  EquationState  does  not  exist	90	None	replace
194	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(this.expandable);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(this.expandable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(this.expandable);	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.expandable);    	non-compiled	[CE]  incompatible  types	83	None	replace
195	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  elements.size());  [CE]  cannot  find  symbol  elements  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  elements.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  elements.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations,    columns.size());    	non-compiled	[CE]  cannot  find  symbol  elements	92	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equvalents.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equvalents.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equvalents.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
197	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  2);  [CE]  cannot  find  symbol  Equations  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  2);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size()  -  2);	  this.expandable    =    equations!=    null?    Equations.EMPTY    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol  Equations	64	None	replace
198	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  elements.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  elements.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  elements.values())  {  throw  new  UnsupportedOccurredException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	32	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable)  {  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this.expandable)  {	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
202	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  1);	  this.expandable    =    equations    ==    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	18	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equvalents.get(i);  if(expan  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equvalents.get(i);  if(expan  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equvalents.get(i);  if(expan	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	18	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
206	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.values();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.values();  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.values();	  this.expandable    =    equations.values();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
207	[BUG]  [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if    	non-compiled	[CE]  '('  expected	79	None	replace
208	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalents);  [CE]  cannot  find  symbol  equivalents  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalents);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalents);	  this.expandable    =    equations.equals(elements);    	non-compiled	[CE]  cannot  find  symbol  equivalents	13	None	replace
209	[BUG]  [BUGGY]  this.expandable  =  equations  ==  expansion;  [CE]  cannot  find  symbol  expansion  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  expansion;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  expansion;	  this.expandable    =    equations    ==    expandable;    	non-compiled	[CE]  cannot  find  symbol  expansion	47	None	replace
210	[BUG]  [BUGGY]  this.expandable  =  equations!=  expansion;  [CE]  cannot  find  symbol  expansion  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  expansion;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  expansion;	  this.expandable    =    equations    ==    expandable;    	non-compiled	[CE]  cannot  find  symbol  expansion	47	None	replace
211	[BUG]  [BUGGY]  final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalStateException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	87	None	replace
212	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations);  [CE]  cannot  find  symbol  expandable  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations);	  this.expandable    =    equations!=    null?    equations.expandable    :    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  expandable	95	None	replace
213	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.values);  [CE]  cannot  find  symbol  expandable  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.values);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.values);	  this.expandable    =    equations!=    null?    equations.expandable    :    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  expandable	95	None	replace
214	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  EquationStateful.EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  EquationStateful.EMPTY;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  EquationStateful.EMPTY;	  this.expandable    =    equations    ==    null?    equations    :    ExpandableStatefulODE.EMPTY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	96	None	replace
215	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.length);  [CE]  cannot  find  symbol  length  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.length);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.length);	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  cannot  find  symbol  length	12	None	replace
216	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.next);  [CE]  cannot  find  symbol  next  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.next);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.next);	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  cannot  find  symbol  next	12	None	replace
217	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  children.elements())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  children.elements())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  children.elements())  {  throw  new  IllegalStateException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
218	[BUG]  [BUGGY]  this.expandable  =  equations.equals(Equations.EMPTY_EQUIPABLE,  equations.get(0));  [CE]  cannot  find  symbol  Equations  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(Equations.EMPTY_EQUIPABLE,  equations.get(0));  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(Equations.EMPTY_EQUIPABLE,  equations.get(0));	  this.expandable    =    equations.equals(equations.get(0));    	non-compiled	[CE]  cannot  find  symbol  Equations	89	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
220	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  For(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  '.class'  expected	28	None	replace
221	[BUG]  [BUGGY]  int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
222	[BUG]  [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  '('  expected	60	None	replace
223	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  elements.values())  {  break;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  elements.values())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  elements.values())  {  break;  }	  for(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
224	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  ExpandableStatefulODE.EMPTY_ARRAY;  [CE]  cannot  find  symbol  EMPTY_ARRAY  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  ExpandableStatefulODE.EMPTY_ARRAY;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  ExpandableStatefulODE.EMPTY_ARRAY;	  this.expandable    =    equations    ==    null?    null    :    ExpandableStatefulODE.EMPTY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY_ARRAY	2	None	replace
225	[BUG]  [BUGGY]  this.expandable  =  equations.value;  [CE]  cannot  find  symbol  value  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.value;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.value;	  this.expandable    =    equations.equivalence;    	non-compiled	[CE]  cannot  find  symbol  value	11	None	replace
226	[BUG]  [BUGGY]  if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	81	None	replace
227	[BUG]  [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equixes.get(i);    if    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
228	[BUG]  [BUGGY]  this.expandable  =  equations.equals(Equations.EMPTY_EQUIPABLE,  equations.getEquations());  [CE]  cannot  find  symbol  Equations  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(Equations.EMPTY_EQUIPABLE,  equations.getEquations());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(Equations.EMPTY_EQUIPABLE,  equations.getEquations());	  this.expandable    =    equations.equals(equations.getEquations());    	non-compiled	[CE]  cannot  find  symbol  Equations	77	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
230	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalStateException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
231	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(    	non-compiled	[CE]  '('  expected	53	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equations.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
234	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.null);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.null);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.null);	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.elements);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
235	[BUG]  [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equations    ==    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    }    	non-compiled	[CE]  '('  expected	59	None	replace
236	[BUG]  [BUGGY]  final  IncrementError  exception  :  elements.values())  {  break;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  elements.values())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  elements.values())  {  break;  }	  final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
237	[BUG]  [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    }    	non-compiled	[CE]  ')'  expected	33	None	replace
238	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  Equations.equals(equations,  equations.values());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  Equations.equals(equations,  equations.values());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  Equations.equals(equations,  equations.values());	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.values());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
239	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.getElements();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.getElements();  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.getElements();	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
240	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.getElements();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.getElements();  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.getElements();	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	40	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	40	None	replace
244	[BUG]  [BUGGY]  For(final  IncrementError  exception  :  this.equations.values())  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  For(final  IncrementError  exception  :  this.equations.values())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(final  IncrementError  exception  :  this.equations.values())  {  break;  }	  For(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
245	[BUG]  [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  return;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(final  IncrementError  exception  :  equations.values())  {  return;  }	  For(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    this.expandable    	non-compiled	[CE]  ')'  expected	41	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    this.expandable    	non-compiled	[CE]  ')'  expected	24	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    this.expandable    	non-compiled	[CE]  ')'  expected	24	None	replace
250	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.expandable);  [CE]  cannot  find  symbol  expandable  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.expandable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.expandable);	  this.expandable    =    equations!=    null?    equations.expandable    :    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  expandable	94	None	replace
251	[BUG]  [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	31	None	replace
252	[BUG]  [BUGGY]  final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  elements.values())  {  throw  new  IllegalArgumentException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
253	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.expandableEscapes;  [CE]  cannot  find  symbol  expandableEscapes  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.expandableEscapes;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.expandableEscapes;	  this.expandable    =    equations    ==    null?    null    :    equations.expandableStatements;    	non-compiled	[CE]  cannot  find  symbol  expandableEscapes	34	None	replace
254	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations.elements);  [CE]  cannot  find  symbol  elements  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.equals(equations.elements);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  equations.equals(equations.elements);	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  elements	93	None	replace
255	[BUG]  [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
256	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expanpan    	non-compiled	[CE]  ')'  expected	78	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpanpan!=  this.expandable  =  equations;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpanpan!=  this.expandable  =  equations;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpanpan!=  this.expandable  =  equations;  }	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expanpan    	non-compiled	[CE]  ')'  expected	78	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(0);  if(  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(0);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(0);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  expandable  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  expandable  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.events.size();  ++i)  {  expandable  =(ExpandableStatefulODE)this.events.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
260	[BUG]  [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if	  if(equiries!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if    	non-compiled	[CE]  '('  expected	79	None	replace
261	[BUG]  [BUGGY]  this.expandable  =  equations!=  ExpandableStatefulODE  &&  equations.size()  >  1;  [CE]  cannot  find  symbol  ExpandableStatefulODE  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  ExpandableStatefulODE  &&  equations.size()  >  1;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  ExpandableStatefulODE  &&  equations.size()  >  1;	  this.expandable    =    equations!=    ExpandableStatefulODE;    	non-compiled	[CE]  cannot  find  symbol  ExpandableStatefulODE	45	None	replace
262	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equations.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	81	None	replace
263	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	81	None	replace
264	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	73	None	replace
265	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations,  expansionable.values());  [CE]  cannot  find  symbol  expansionable  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations,  expansionable.values());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equations,  expansionable.values());	  this.expandable    =    equations    ==    null?    null    :    equations.equals(equations.values());    	non-compiled	[CE]  cannot  find  symbol  expansionable	55	None	replace
266	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  this.elements.elements())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  this.elements.elements())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  this.elements.elements())  {  throw  new  IllegalArgumentException( " ");  }	  for(final    IncrementError    exception    :    equations.elements())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
267	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  '('  expected	60	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalents.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalents.get(i);  if(  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalents.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
270	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.events);  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.events);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.events);	  this.expandable    =    equations.equals(equations.elements);    	non-compiled	[CE]  cannot  find  symbol  events	97	None	replace
271	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.get(0),  equations.get(0));  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.get(0),  equations.get(0));  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.get(0),  equations.get(0));	  this.expandable    =    equations.equals(equations.get(0));    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
272	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if	  if(equivalents!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if    	non-compiled	[CE]  '('  expected	85	None	replace
273	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  rows.size());  [CE]  cannot  find  symbol  rows  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  rows.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  rows.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations,    columns.size());    	non-compiled	[CE]  cannot  find  symbol  rows	92	None	replace
274	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.getElements()  :  null;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.getElements()  :  null;  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.getElements()  :  null;	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
275	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.getElements()  :  Collections.EMPTY_LIST;  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.getElements()  :  Collections.EMPTY_LIST;  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.getElements()  :  Collections.EMPTY_LIST;	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
276	[BUG]  [BUGGY]  this.expandable  =  EquationState.equals();  [CE]  cannot  find  symbol  EquationState  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  EquationState.equals();  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.equals();	  this.expandable    =    EquationState.elements();    	non-compiled	[CE]  cannot  find  symbol  EquationState	29	None	replace
277	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	23	None	replace
278	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  otherEquations.values())  {  break;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  otherEquations.values())  {  break;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  otherEquations.values())  {  break;  }	  for(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansionable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansionable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansionable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    this.expandable    	non-compiled	[CE]  ')'  expected	24	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expanpan!=  this	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	18	None	replace
281	[BUG]  [BUGGY]  static  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  static  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	static  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
282	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.equations  :  new  ExpandableStatefulODE(equations.size());  [CE]  cannot  find  symbol  equations  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.equations  :  new  ExpandableStatefulODE(equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.equations  :  new  ExpandableStatefulODE(equations.size());	  this.expandable    =    equations.equations;    	non-compiled	[CE]  cannot  find  symbol  equations	10	None	replace
283	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.equations  :  new  ExpandableStatefulODE();  [CE]  cannot  find  symbol  equations  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.equations  :  new  ExpandableStatefulODE();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.equations  :  new  ExpandableStatefulODE();	  this.expandable    =    equations.equations;    	non-compiled	[CE]  cannot  find  symbol  equations	10	None	replace
284	[BUG]  [BUGGY]  this.expandable  =  equations.equals(Equations.EQUIPMENT);  [CE]  cannot  find  symbol  Equations  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(Equations.EQUIPMENT);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(Equations.EQUIPMENT);	  this.expandable    =    equations.equals(equations.expandable);    	non-compiled	[CE]  cannot  find  symbol  Equations	9	None	replace
285	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.expandableStatement);  [CE]  cannot  find  symbol  expandableStatement  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.expandableStatement);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.expandableStatement);	  this.expandable    =    equations.equals(equations.expandable);    	non-compiled	[CE]  cannot  find  symbol  expandableStatement	9	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
287	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  elements.elements();  [CE]  cannot  find  symbol  elements  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  null  :  elements.elements();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  elements.elements();	  this.expandable    =    equations    ==    null?    null    :    equations.elements();    	non-compiled	[CE]  cannot  find  symbol  elements	76	None	replace
288	[BUG]  [BUGGY]  static  final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  static  final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	static  final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
289	[BUG]  [BUGGY]  this.expandable  =  equations  ==  expansionable;  [CE]  cannot  find  symbol  expansionable  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  expansionable;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  expansionable;	  this.expandable    =    equations    ==    expandable;    	non-compiled	[CE]  cannot  find  symbol  expansionable	47	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalences.get(i);  if  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalences.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equivalences.get(i);  if	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	57	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if  [CE]  '('  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.equinoxes.get(i);  if	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	57	None	replace
292	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equators.getEquations());  [CE]  cannot  find  symbol  equators  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equators.getEquations());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equators.getEquations());	  this.expandable    =    equations.equals(equations.getEquations());    	non-compiled	[CE]  cannot  find  symbol  equators	77	None	replace
293	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan!=  this	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	32	None	replace
294	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations,  isLastStep;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations,  isLastStep;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations,  isLastStep;	  this.expandable    =    equations    ==    null?    ExpandableStatefulODE.EMPTY    :    equations;    	non-compiled	[CE]  ';'  expected	71	None	replace
295	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations);	  this.expandable    =    equations    ==    null?    ExpandableStatefulODE.EMPTY    :    equations;    	non-compiled	[CE]  ';'  expected	71	None	replace
296	[BUG]  [BUGGY]  this.expandable  =  equations.equations.equivalence;  [CE]  cannot  find  symbol  equations  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equations.equivalence;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equations.equivalence;	  this.expandable    =    equations.equivalence;    	non-compiled	[CE]  cannot  find  symbol  equations	11	None	replace
297	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null,  isLastStep;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null,  isLastStep;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null,  isLastStep;	  this.expandable    =    equations    ==    null;    	non-compiled	[CE]  ';'  expected	46	None	replace
298	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null  ||  equations.size()  >  0;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations  ==  null  ||  equations.size()  >  0;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null  ||  equations.size()  >  0;	  this.expandable    =    equations    ==    null;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
299	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  return;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  return;  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.values())  {  return;  }	  for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
300	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  ExpandableStatefulODE.EMPTY  :  equations,  isLastStep;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  ExpandableStatefulODE.EMPTY  :  equations,  isLastStep;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  ExpandableStatefulODE.EMPTY  :  equations,  isLastStep;	  this.expandable    =    equations!=    null?    ExpandableStatefulODE.EMPTY    :    equations;    	non-compiled	[CE]  ';'  expected	70	None	replace
301	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalences.size()  -  1);  [CE]  cannot  find  symbol  equivalences  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equivalences.size()  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalences.size()  -  1);	  this.expandable    =    equations.equals(equivalences.size());    	non-compiled	[CE]  cannot  find  symbol  equivalences	20	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equivalences.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equivalences.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
304	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.nextElement());  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(equations.nextElement());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.nextElement());	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
305	[BUG]  [BUGGY]  if(events!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  if(events!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(events!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    this.events.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if    	non-compiled	[CE]  '('  expected	80	None	replace
306	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(0);  if(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(0);  if(  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(0);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
307	[BUG]  [BUGGY]  this.expandable  =  equations.equals(eqns);  [CE]  cannot  find  symbol  eqns  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations.equals(eqns);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(eqns);	  this.expandable    =    equations.equals(elements);    	non-compiled	[CE]  cannot  find  symbol  eqns	13	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable!=  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable!=  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable!=  this  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable!=  this  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan  ==  this.expandable!=  this	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    this.expandable    	non-compiled	[CE]  ')'  expected	41	None	replace
310	[BUG]  [BUGGY]  static  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  static  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	static  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }	  final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
311	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.values()  :  new  ExpandableStatefulODE(equations.values());  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.values()  :  new  ExpandableStatefulODE(equations.values());  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.values()  :  new  ExpandableStatefulODE(equations.values());	  this.expandable    =    equations.values();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
312	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.values()  :  ExpandableStatefulODE;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.values()  :  ExpandableStatefulODE;  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.values()  :  ExpandableStatefulODE;	  this.expandable    =    equations.values();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
313	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.values()  :  new  ExpandableStatefulODE(equations.size());  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  this.expandable  =  equations!=  null?  equations.values()  :  new  ExpandableStatefulODE(equations.size());  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.values()  :  new  ExpandableStatefulODE(equations.size());	  this.expandable    =    equations.values();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable  }  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  ')'  expected	40	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable).  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable).  [BUGGY]      this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expanpan!=  this.expandable).	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    this.expandable    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
