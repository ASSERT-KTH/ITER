bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();  [CE]  package  state  does  not  exist  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  state.stepHandlers.iterator();	      Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  package  state  does  not  exist	9	None	replace
2	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.iterator();  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  statesInitialized.iterator();	      Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
3	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();  [CE]  package  state  does  not  exist  [FE]                AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();	      Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  package  state  does  not  exist	9	None	replace
4	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  currentEvent.getEvents().iterator();  [CE]  cannot  find  symbol  currentEvent  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  currentEvent.getEvents().iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  currentEvent.getEvents().iterator();	      Iterator    <    EventState>    iterator    =    state.getEvents().iterator();    	non-compiled	[CE]  cannot  find  symbol  currentEvent	12	None	replace
5	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.values().iterator();  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  events.values().iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  events.values().iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  events	8	None	replace
6	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
7	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
8	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  true;  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  true;  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  true;	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
9	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  false;  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  false;  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  false;	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
10	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Collection  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Collection  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Collection  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
11	[BUG]  [BUGGY]  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeBegin(previousT);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeBegin(previousT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
12	[BUG]  [BUGGY]  state.resetOccurred(previousT);  [CE]  cannot  find  symbol  state  [FE]              AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.resetOccurred(previousT);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.resetOccurred(previousT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
13	[BUG]  [BUGGY]  state.reinitializeBegin(eventT);  [CE]  cannot  find  symbol  eventT  [FE]                AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeBegin(eventT);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeBegin(eventT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  eventT	3	None	replace
14	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  interpolator);  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeBegin(previousT,  interpolator);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeBegin(previousT,  interpolator);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
15	[BUG]  [BUGGY]  statesInitialized  =  state;  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  statesInitialized  =  state;  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	statesInitialized  =  state;	  statesInitialized    =    null;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
16	[BUG]  [BUGGY]  statesInitialized  =  state.stateInitialized;  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  statesInitialized  =  state.stateInitialized;  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	statesInitialized  =  state.stateInitialized;	  statesInitialized    =    null;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
17	[BUG]  [BUGGY]  statesInitialized  =  state.isLastStep();  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  statesInitialized  =  state.isLastStep();  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	statesInitialized  =  state.isLastStep();	  statesInitialized    =    null;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
18	[BUG]  [BUGGY]  statesInitialized  =  state.getState();  [CE]  cannot  find  symbol  state  [FE]              AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  statesInitialized  =  state.getState();  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	statesInitialized  =  state.getState();	  statesInitialized    =    null;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
19	[BUG]  [BUGGY]  state.reinitializeEnd(currentT);  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeEnd(currentT);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeEnd(currentT);	      state.reinitializeEnd(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
20	[BUG]  [BUGGY]  state.reinitializeEnd(previousT);  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeEnd(previousT);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeEnd(previousT);	      state.reinitializeEnd(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
21	[BUG]  [BUGGY]  state.reinitializeEnd(expT);  [CE]  cannot  find  symbol  expT  [FE]              AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeEnd(expT);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeEnd(expT);	      state.reinitializeEnd(interpolator);    	non-compiled	[CE]  cannot  find  symbol  expT	2	None	replace
22	[BUG]  [BUGGY]  state.reinitializeEnd(eventSign);  [CE]  cannot  find  symbol  eventSign  [FE]                AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeEnd(eventSign);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeEnd(eventSign);	      state.reinitializeEnd(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventSign	2	None	replace
23	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]    AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  this.events.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
24	[BUG]  [BUGGY]  state.resetOccurred  =  false;  [CE]  cannot  find  symbol  state  [FE]              AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.resetOccurred  =  false;  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.resetOccurred  =  false;	      state.resetOccurred    =    true;    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
25	[BUG]  [BUGGY]  stateInitialized  =  true;  [CE]  cannot  find  symbol  stateInitialized  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  stateInitialized  =  true;  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	stateInitialized  =  true;	  stateInitialized    =    false;    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	5	None	replace
26	[BUG]  [BUGGY]  state.initializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.initializeBegin(interpolator);  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.initializeBegin(interpolator);	  stateInitialized    =    false;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
27	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  es1.getEvents().iterator();  [CE]  cannot  find  symbol  es1  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  es1.getEvents().iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  es1.getEvents().iterator();	      Iterator    <    EventState>    iterator    =    state.getEvents().iterator();    	non-compiled	[CE]  cannot  find  symbol  es1	12	None	replace
28	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  states.getEvents().iterator();  [CE]  cannot  find  symbol  states  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  states.getEvents().iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  states.getEvents().iterator();	      Iterator    <    EventState>    iterator    =    state.getEvents().iterator();    	non-compiled	[CE]  cannot  find  symbol  states	12	None	replace
29	[BUG]  [BUGGY]  statesInitialized  =  state.next();  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  statesInitialized  =  state.next();  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	statesInitialized  =  state.next();	  statesInitialized    =    null;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
30	[BUG]  [BUGGY]  statesInitialized  =  state.isInitialized();  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  statesInitialized  =  state.isInitialized();  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	statesInitialized  =  state.isInitialized();	  statesInitialized    =    null;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
31	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsIterator();  [CE]  cannot  find  symbol  state  [FE]              AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsIterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  state.eventsIterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
32	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.iterator();  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  this.stepHandlers.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  incompatible  types	10	None	replace
33	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE);  [CE]  cannot  find  symbol  expandableODE  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeBegin(expandableODE);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeBegin(expandableODE);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	3	None	replace
34	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();  [CE]  cannot  find  symbol  eventStates  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  eventStates.values().iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	8	None	replace
35	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
36	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.values().iterator();  [CE]  cannot  find  symbol  state  [FE]              AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.values().iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  state.values().iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
37	[BUG]  [BUGGY]  state.reinitializeEnd(expandableODE);  [CE]  cannot  find  symbol  expandableODE  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeEnd(expandableODE);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeEnd(expandableODE);	      state.reinitializeEnd(interpolator);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	2	None	replace
38	[BUG]  [BUGGY]  state.stateInitialized  =  false;  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.stateInitialized  =  false;  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.stateInitialized  =  false;	  stateInitialized    =    false;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
39	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  interpolator);  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeBegin(currentT,  interpolator);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeBegin(currentT,  interpolator);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
40	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Ilerator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Ilerator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Ilerator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  iterator  =  eventsStates.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	add	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    iterator  =  eventsStates.iterator();	  	compilable	  [FE]  AssertionError  	6	1	add
42	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  iterator  =  eventsStates.iterator();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  iterator  =  eventsStates.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    iterator  =  eventsStates.iterator();	  	compilable	  [FE]  AssertionError  	6	1	add
43	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventStates.iterator();  [CE]  package  state  does  not  exist  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventStates.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  state.eventStates.iterator();	      Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  package  state  does  not  exist	9	None	replace
44	[BUG]  [BUGGY]  state.reinitializeBegin(expT);  [CE]  cannot  find  symbol  expT  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  state.reinitializeBegin(expT);  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	state.reinitializeBegin(expT);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  expT	1	None	replace
45	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator());  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator());  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator());	  	non-compiled	[CE]  ';'  expected	6	None	add
46	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.events.iterator();  [CE]  package  state  does  not  exist  [FE]              AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.events.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  state.events.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  package  state  does  not  exist	10	None	replace
47	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();  [CE]  package  state  does  not  exist  [FE]                AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  package  state  does  not  exist	10	None	replace
48	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.stateStates.iterator();  [CE]  package  state  does  not  exist  [FE]            AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  state.stateStates.iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  state.stateStates.iterator();	      Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  package  state  does  not  exist	9	None	replace
49	[BUG]  [BUGGY]  statesInitialized  =  state.isInitialized()?  null  :  state.isInitialized();  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  statesInitialized  =  state.isInitialized()?  null  :  state.isInitialized();  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	statesInitialized  =  state.isInitialized()?  null  :  state.isInitialized();	  statesInitialized    =    null;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
50	[BUG]  [BUGGY]  statesInitialized  =  state.initialize();  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  statesInitialized  =  state.initialize();  [BUGGY]    }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	statesInitialized  =  state.initialize();	  statesInitialized    =    null;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
51	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  currentEvents.getEvents().iterator();  [CE]  cannot  find  symbol  currentEvents  [FE]        AssertionError    [CONTEXT]    double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }    [BUGGY]  Iterator  <  EventState>  iterator  =  currentEvents.getEvents().iterator();  [BUGGY]    statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	287	287	1	replace	Iterator  <  EventState>  iterator  =  currentEvents.getEvents().iterator();	      Iterator    <    EventState>    iterator    =    state.getEvents().iterator();    	non-compiled	[CE]  cannot  find  symbol  currentEvents	12	None	replace
